<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UODOTNET</name>
    </assembly>
    <members>
        <member name="T:IBMU2.UODOTNET.UniTokens">
            <summary>
            This is UniToken class
            </summary>
            <remarks> 
            This is additional information about UniToken class
            </remarks>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVCS_SERVICE">
            <summary>
            Values for UniConnection
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UNI_SERVICE">
            <summary>
            Values for UniConnection
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UNIVERSE">
            <summary>
            Values for UniConnection
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UNIDATA">
            <summary>
            Values for UniConnection
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.COMMS_VERSION">
            <summary>
            Values for UniConnection
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.CS_VERSION">
            <summary>
            Values for UniConnection
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.OLD_COMMS_VERSION">
            <summary>
            Values for UniConnection
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.OLD_CS_VERSION">
            <summary>
            Values for UniConnection
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.INTERNAL_FLAG">
            <summary>
            Values for UniConnection
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.NO_COMPRESSION">
            <summary>
            Values for UniConnection
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.INTERNAL_COMPRESSION">
            <summary>
            Values for UniConnection
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.DEFAULT_SOCKET_TIMEOUT">
            <summary>
            Values for UniConnection
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.NO_ENCRYPTION">
            <summary>
            Values for UniConnection
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVT_NONE">
            <summary>
            Values for UniConnection
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVT_UNIX">
            <summary>
            Values for UniConnection
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVT_NT">
            <summary>
            Values for UniConnection
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.OLD_SERVER">
            <summary>
            Values for UniConnection
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.NEW_SERVER">
            <summary>
            Values for UniConnection
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.IM">
            <summary>
            Array positions for the defaultMarkCharacters array
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.FM">
            <summary>
            Array positions for the defaultMarkCharacters array
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.VM">
            <summary>
            Array positions for the defaultMarkCharacters array
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.SVM">
            <summary>
            Array positions for the defaultMarkCharacters array
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.TM">
            <summary>
            Array positions for the defaultMarkCharacters array
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.SQLNULL">
            <summary>
            Array positions for the defaultMarkCharacters array
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.NUM_MARK_CHARACTERS">
            <summary>
            Array positions for the defaultMarkCharacters array
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_NOERROR">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_ENOENT">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_EIO">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_EACCESS">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_EINVAL">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_ENFILE">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_EMFILE">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_ENOSPC">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_NETUNREACH">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_BFN">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_BTS">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_IID">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_LRR">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_NFI">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_RNF">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_LCK">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_USC">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_SELFAIL">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_LOCKINVALID">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_SEEKFAILED">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_INVALIDATKEY">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_UNABLETOLOADSUB">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_BADNUMARGS">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_SUBERROR">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_ITYPEFTC">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_ITYPEFAILEDTOLOAD">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_ITYPENOTCOMPILED">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_BADITYPE">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_INVALIDFILENAME">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_WEOFFAILED">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_EXECUTEISACTIVE">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_EXECUTENOTACTIVE">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_TX_ACTIVE">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_CANT_ACCESS_PF">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_FAIL_TO_CANCEL">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_INVALID_INFO_KEY">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_CREATE_FAILED">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_DUPHANDLE_FAILED">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_NVR">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_NPN">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_NODATA">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_AT_INPUT">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_SESSION_NOT_OPEN">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_UVEXPIRED">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_CSVERSION">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_COMMSVERSION">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_BADDIR">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_BAD_UVHOME">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_INVALIDPATH">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_INVALIDACCOUNT">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_BAD_UVACCOUNT_FILE">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_FTA_NEW_ACCOUNT">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_ULR">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_NO_NLS">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_MAP_NOT_FOUND">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_NO_LOCALE">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_LOCALE_NOT_FOUND">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_CATEGORY_NOT_FOUND">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_SR_SLAVE_READ_FAIL">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_INVALIDFIELD">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_SESSIONEXISTS">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_BADPARAM">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_NOMORE">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_NOTATINPUT">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_INVALID_DATAFIELD">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_BAD_DICTIONARY_ENTRY">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_BAD_CONVERSION_DATA">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_FILE_NOT_OPEN">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_OPENSESSION_ERR">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_NONNULL_RECORDID">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_BAD_LOGINNAME">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_BAD_PASSWORD">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_ACCOUNT_EXPIRED">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_RUN_REMOTE_FAILED">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_UPDATE_USER_FAILED">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UNISESSION_NO_MORE_CONNECTIONS">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UNISESSION_CANT_FIND_SERVICE">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UNISESSION_TIMEOUT">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UNISESSION_REFUSED">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_MLTPLEX_SECURE_SESSION">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_NOT_A_PROXY_SESSION">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_BAD_SSL_MODE">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_SUCCESS_WITH_INFO">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.UVE_MUST_USE_SESSION">
            <summary>
            UniObjects error codes
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_ALPHA">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_CLEARDATA">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_CLEARFILE">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_CLEARSELECT">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_CLOSE">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_CLOSESEQ">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_COL1">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_COL2">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_CONVERT">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_COUNT">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_DATA">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_DATE">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_DCOUND">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_DELETE">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_EXECUTE">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_FIELD">
            <summary>
            Intercall define numbers
            </summary>public const int EIC_EXTRACT = 16;
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_FIELDSTORE">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_FILEINFO">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_FILELOCK">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_FILEUNLOCK">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_FMT">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_FORMLIST">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_GETLIST">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_GETVALUE">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_ICONV">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_INDICES">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_INSERT">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_ITYPE">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_LOCATE">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_LOCK">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_LOWER">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_OCONV">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_OPEN">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_OPENSEQ">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_RAISE">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_READ">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_READBLK">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_READLIST">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_READNEXT">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_READSEQ">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_READV">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_RECORDLOCK">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_RECORDLOCKED">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_RELEASE">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_REPLACE">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_SEEK">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_SELECT">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_SELECTINDEX">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_SETVALUE">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_STRDEL">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_SUBCALL">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_TIME">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_TIMEDATE">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_TIMEOUT">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_TRANS">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_TRANSACTION">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_TRIM">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_UNLOCK">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_WEOFSEQ">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_WRITE">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_WRITEBLK">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_WRITECONTINUE">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_WRITESEQ">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_WRITEV">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_EXECUTECONTINUE">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_INPUTREPLY">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_CANCEL">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_SESSIONINFO">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_SETMAP">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_GETMAP">
            <summary>
            Intercall define numbers
            </summary>
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_SETLOCALE">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_GETLOCALE">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_GETVERSION">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_GETSERVERINFO">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_READSET">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_READFIELDSET">
            <summary>
            Intercall define numbers - client side - from "uvclient.h"
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_READNAMEDFIELDSET">
            <summary>
            Intercall define numbers - client side - from "uvclient.h"
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_DELETESET">
            <summary>
            Intercall define numbers - client side - from "uvclient.h"
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_WRITESET">
            <summary>
            Intercall define numbers - client side - from "uvclient.h"
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_WRITEFIELDSET">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_WRITENAMEDFIELDSET">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_LOCKSET">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_UNLOCKSET">
            <summary>
            Intercall define numbers
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_GETLASTSERVERERROR">
            <summary>
            Set to the largest number
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_POOLOFF">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_INVALID_OP_POOLON">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_CANNOT_CHANGE_FROM_POOLED_TO_NONPOOLED">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_POOL_EXISTS">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_VERIFY_U2VERSION">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_CPOFF_VERIFY_U2VERSION">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.EIC_MINPOOL_MORETHAN_LICENSE">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.IM_CHAR">
            <summary>
            Array positions for the defaultMarkCharacters array
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.FM_CHAR">
            <summary>
            Array positions for the defaultMarkCharacters array
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.VM_CHAR">
            <summary>
            Array positions for the defaultMarkCharacters array
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.SVM_CHAR">
            <summary>
            Array positions for the defaultMarkCharacters array
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.TM_CHAR">
            <summary>
            Array positions for the defaultMarkCharacters array
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.SQLNULL_CHAR">
            <summary>
            Array positions for the defaultMarkCharacters array
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.NULL_CHAR">
            <summary>
            Array positions for the defaultMarkCharacters array
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.AT_IM">
            <summary>
            Array positions for the defaultMarkCharacters array
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.AT_FM">
            <summary>
            Array positions for the defaultMarkCharacters array
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.AT_VM">
            <summary>
            Array positions for the defaultMarkCharacters array
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.AT_SVM">
            <summary>
            Array positions for the defaultMarkCharacters array
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.AT_TM">
            <summary>
            Array positions for the defaultMarkCharacters array
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.AT_SQLNULL">
            <summary>
            Array positions for the defaultMarkCharacters array
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.AT_NULL">
            <summary>
            Array positions for the defaultMarkCharacters array
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTokens.defaultMarkArray">
            <summary>
            Array positions for the defaultMarkCharacters array
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniTokens.#cctor">
            <summary>
            this is no argument static constructor
            </summary>
        </member>
        <member name="T:IBMU2.UODOTNET.UniSubroutineException">
            <summary>
            UniSubroutineException extends ApplicationException. UniSubroutineException is thrown by a user program, 
            not by the common language runtime and it represents errors that occur during application execution.
            When an error occurs during UniSubroutine execution, it reports this by throwing an exception containing 
            information about the error. Once thrown, an exception is handled by the application or by the default
            exception handler.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSubroutineException.#ctor">
            <summary>
            Initializes a new instance of the UniSubroutineException class.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSubroutineException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the UniSubroutineException class with a specified error message.
            </summary>
            <param name="message">message description</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSubroutineException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the UniSubroutineException class with a specified error message and a 
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">message description</param>
            <param name="inner">inner exception object</param>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSubroutineException.ErrorCode">
            <summary>
            Gets Error Code
            </summary>
        </member>
        <member name="T:IBMU2.UODOTNET.UniRecord">
            <summary>
            <c>UniRecord</c> is used to control UniVerse/Unidata Record interaction. 
            It contains <c>UniDynArray</c> object, <c>Record ID</c>.
            </summary>
            <example> This sample shows how to use <c>UniRecord</c> object.
            <code>
            [C#]
            using IBMU2.UODOTNET;
            using System.Text;
              class MyAppClass 
              {
                 public static void Main() 
                 {
                    try
                    {
            			UniSession us1 = UniObjects.OpenSession("localhost","ZZZ","XXX","HS.SALES","uvcs");
            			// open customer file
            			UniFile fl = us1.CreateUniFile("CUSTOMER");
            			// read records as unidataset
            			string [] sArray =  {"2","12","3","4"};
            			UniDataSet uSet = fl.ReadRecords(sArray); 
            			// use for each statement to print the record
            			foreach (UniRecord item in uSet) 
            			{
            				Console.WriteLine(item.ToString());
            			}
            		}
            		Catch (Exception ex)
            		{
            			//some error, display it 
            			Console.WriteLine(ex.Message);
            		}
            		finally
            		{
            			// no error
            			if(us1 != null)
            			{
            				UniObjects.CloseSession(us1);
            				us1= null;
            			}
            		}
                 }
              }
              [VB.NET]
              ///	Option Explicit On 
            Option Strict On
            ' Add the classes in the following namespaces to our namespace
            Imports System
            Imports System.IO
            Imports System.Text
            Imports System.Collections
            Imports IBMU2.UODOTNET
            Class App
            	Public Shared Function Main(ByVal args() As String) As Integer
            	Dim us1 As UniSession = Nothing
            	Dim cmd As UniCommand = Nothing
            	Dim fl As UniFile = Nothing
            	Try
            		Console.WriteLine("Program started... ")
            		us1 = UniObjects.OpenSession("localhost", "ZZZ", "xxxx", "HS.SALES", "uvcs")
            		' open customer file
            		fl = us1.CreateUniFile("CUSTOMER")
            		' read records as unidataset
            		Dim sArray As String() = {"2", "12", "3", "4"}
            		Dim uSet As 	UniDataSet  = fl.ReadRecords(sArray)
            		' use for each statement to print the record
            		Dim item As UniRecord
            		For Each item In uSet
            			Console.WriteLine(item.ToString())
            		Next item
            	Catch e As Exception
            		If Not (us1 Is Nothing) Then
            			If (us1.IsActive) Then
            				UniObjects.CloseSession(us1)
            				us1 = Nothing
            			End If
            		End If
            		Console.WriteLine("")
            		Dim s As String
            		s = "Connection Failed : " + e.Message
            		Console.WriteLine(s)
            	Finally
            		If Not (us1 Is Nothing) Then
            			If (us1.IsActive) Then
            				Console.WriteLine("")
            				Dim s As String
            				s = "Connection Passed"
            				Console.WriteLine(s)
            				UniObjects.CloseSession(us1)
            				Console.WriteLine("Program finished... ")
            			End If
            		End If
            	End Try
            	Console.Read()
            	Return 0
            	End Function 'Main
            End Class 'App
            </code>
            </example>
        </member>
        <member name="T:IBMU2.UODOTNET.UniRoot">
            <summary>
            This is a Abstract UniRoot class. All UODOTNET class will be inherited from UniRoot class.
            Tracing functionality is implemented here.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRoot.Dispose">
            <summary>
            Performs clean up.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRoot.Dispose(System.Boolean)">
            <summary>
            override dispose method.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRoot.Finalize">
            <summary>
            Use C# destructor syntax for finalization code.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRoot.#ctor">
            <summary>
            This is a UniRoot no argument class Constructor.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRoot.UniLog(IBMU2.UODOTNET.UniRoot.UniTraceLevel,System.String)">
            <summary>
            This fuctuntion is for logging and tracing
            </summary>
            <param name="TraceLevel"></param>
            <param name="message"></param>
        </member>
        <member name="T:IBMU2.UODOTNET.UniRoot.UniTraceLevel">
            <summary>
            Specifies what messages to output for the Debug, Trace and TraceSwitch classes.
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRoot.UniTraceLevel.UO_ERROR">
            <summary>
            Error = 1
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRoot.UniTraceLevel.UO_WARNING">
            <summary>
            warning = 2
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRoot.UniTraceLevel.UO_INFO">
            <summary>
            Information = 3
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRoot.UniTraceLevel.UO_VERBOSE">
            <summary>
            Verbose = 4
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRecord.#ctor">
             <summary>
            Initializes a new instance of the UniRecord class.
             </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRecord.ToString">
            <summary>
            Converts the given UniReocrd into a base String.
            </summary>
            <returns>a String object representing the UniReocrd</returns>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRecord.m_RecId">
            <summary>
            Store for Record ID
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRecord.m_RetData">
            <summary>
            Store for Data
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRecord.m_Status">
            <summary>
            Store for Status
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRecord.m_ReturnValue">
            <summary>
            Store for Return Value 
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniRecord.Record">
            <summary>
            Gets or Sets Record Data.
            </summary>
            <value>Record accesses the value of the m_RetData data member</value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniRecord.RecordID">
            <summary>
            Gets or Sets Record ID.
            </summary>
            <value>RecordID accesses the value of the m_RecId data member</value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniRecord.RecordStatus">
            <summary>
            Gets or Sets Record Status.
            </summary>
            <value>RecordStatus accesses the value of the m_Status data member</value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniRecord.RecordReturnValue">
            <summary>
            Gets or Sets Record Return Value.
            </summary>
            <value>RecordReturnValue accesses the value of the m_RecordReturnValue data member</value>
        </member>
        <member name="T:IBMU2.UODOTNET.UniNLSMapException">
            <summary>
            UniNLSMapException extends ApplicationException. UniNLSMapException is thrown by a user program, 
            not by the common language runtime and it represents errors that occur during application execution.
            When an error occurs during UniNLSMap execution, it reports this by throwing an exception containing 
            information about the error. Once thrown, an exception is handled by the application or by the default
            exception handler.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniNLSMapException.#ctor">
            <summary>
            Initializes a new instance of the UniNLSMapException class.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniNLSMapException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the UniNLSMapException class with a specified error message.
            </summary>
            <param name="message">message description</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniNLSMapException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the UniNLSMapException class with a specified error message and a 
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">message description</param>
            <param name="inner">inner exception object</param>
        </member>
        <member name="P:IBMU2.UODOTNET.UniNLSMapException.ErrorCode">
            <summary>
            Gets Error Code
            </summary>
        </member>
        <member name="T:IBMU2.UODOTNET.UniNLSLocale">
            <summary>
            <c>UniNLSlocale</c> is used to control the NLS locale settings.  The NLS
            locale conventions it can control are Time, Numeric, Monetary, Character Type,
            and Collate.  This object allows the application to modify those values to what
            is appropriate for their given environment.  
            </summary>
            <example> This sample shows how to use <c>UniNLSLocale</c> Object.
            <code>
            [C#]
            using IBMU2.UODOTNET;
            using System.Text;
              class MyAppClass 
              {
                 public static void Main() 
                 {
                    try
                    {
            			UniSession us = UniObjects.OpenSession("localhost","ZZZ","XXX","HS.SALES","uvcs");
            			UniNLSLocale fl = null;
            			fl = us.CreateUniNLSLocale();
            			UniDynArray sd = fl.ClientNames;
            			UniDynArray sd2 = fl.ServerNames;
            			fl.SetLocaleName("");
            		}
            		Catch (Exception ex)
            		{
            			//some error, display it 
            			Console.WriteLine(ex.Message);
            		}
            		finally
            		{
            			// no error
            			if(us1 != null)
            			{
            				UniObjects.CloseSession(us1);
            				us1= null;
            			}
            		}
                 }
              }
              [VB.NET]
             Option Explicit On 
            Option Strict On
            ' Add the classes in the following namespaces to our namespace
            Imports System
            Imports System.IO
            Imports System.Text
            Imports System.Collections
            Imports IBMU2.UODOTNET
            Class App
            	Public Shared Function Main(ByVal args() As String) As Integer
            	Dim us1 As UniSession = Nothing
            	Dim cmd As UniCommand = Nothing
            	Try
            		Console.WriteLine("Program started... ")
            		us1 = UniObjects.OpenSession("localhost", "ZZZ", "xxxx", "HS.SALES", "uvcs")
            		Dim fl As UniNLSLocale = Nothing
            		fl = us.CreateUniNLSLocale()
            		Dim sd As UniDynArray = fl.ClientNames
            		Dim sd2 As UniDynArray  = fl.ServerNames
            		fl.SetLocaleName("");
            	Catch e As Exception
            		If Not (us1 Is Nothing) Then
            			If (us1.IsActive) Then
            				UniObjects.CloseSession(us1)
            				us1 = Nothing
            			End If
            		End If
            		Console.WriteLine("")
            		Dim s As String
            		s = "Connection Failed : " + e.Message
            		Console.WriteLine(s)
            	Finally
            		If Not (us1 Is Nothing) Then
            			If (us1.IsActive) Then
            				Console.WriteLine("")
            				Dim s As String
            				s = "Connection Passed"
            				Console.WriteLine(s)
            				UniObjects.CloseSession(us1)
            				Console.WriteLine("Program finished... ")
            			End If
            		End If
            	End Try
            	Console.Read()
            	Return 0
            	End Function 'Main
            End Class 'App
            </code>
            </example>
        </member>
        <member name="M:IBMU2.UODOTNET.UniNLSLocale.#ctor(IBMU2.UODOTNET.UniSession)">
            <summary>
            Initializes a new instance of the UniNLSLocale class.
            </summary>
            <param name="aSession">UniSession Object</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniNLSLocale.SetLocaleName(System.String,System.Int32)">
            <summary>
            Overloaded. Sets the specified locale.  If <c>aName</c> is of type <c>UniDynArray</c>
            then each individual category is set to the corresponding <c>UniDynArray</c>
            value.  If it contains only one element, and <c>anIndex</c> is specified, 
            only that locale setting is changed.  If <c>anIndex</c> is not set, then 
            all locale categories are set to the value defined by <c>aName</c>.
            </summary>
            <param name="aName">String representing the new locale settings</param>
            <param name="anIndex">integer representing which category to be set</param>
            <exception cref="T:IBMU2.UODOTNET.UniNLSLocaleException">Thrown when SetLocaleName() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniNLSLocale.SetLocaleName(IBMU2.UODOTNET.UniDynArray,System.Int32)">
            <summary>
            Overloaded. Sets the specified locale.  If <c>aName</c> is of type <c>UniDynArray</c>
            then each individual category is set to the corresponding <c>UniDynArray</c>
            value.  If it contains only one element, and <c>anIndex</c> is specified, 
            only that locale setting is changed.  If <c>anIndex</c> is not set, then 
            all locale categories are set to the value defined by <c>aName</c>.
            </summary>
            <param name="aName">UniDynArray representing the new locale settings</param>
            <param name="anIndex">integer representing which category to be set</param>
            <exception cref="T:IBMU2.UODOTNET.UniNLSLocaleException">Thrown when SetLocaleName() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniNLSLocale.SetLocaleName(System.String)">
            <summary>
            Overloaded. Sets the specified locale.  If <c>aName</c> is of type <c>UniDynArray</c>
            then each individual category is set to the corresponding <c>UniDynArray</c>
            value.  If it contains only one element, and <c>anIndex</c> is specified, 
            only that locale setting is changed.  If <c>anIndex</c> is not set, then 
            all locale categories are set to the value defined by <c>aName</c>.
            </summary>
            <param name="aName">UniDynArray representing the new locale settings</param>
            <exception cref="T:IBMU2.UODOTNET.UniNLSLocaleException">Thrown when SetLocaleName() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniNLSLocale.SetLocaleName(IBMU2.UODOTNET.UniDynArray)">
            <summary>
            Overloaded. Sets the specified locale.  If <c>aName</c> is of type <c>UniDynArray</c>
            then each individual category is set to the corresponding <c>UniDynArray</c>
            value.  If it contains only one element, and <c>anIndex</c> is specified, 
            only that locale setting is changed.  If <c>anIndex</c> is not set, then 
            all locale categories are set to the value defined by <c>aName</c>.
            </summary>
            <param name="localeName">UniDynArray representing the new locale settings</param>
            <exception cref="T:IBMU2.UODOTNET.UniNLSLocaleException">Thrown when SetLocaleName() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniNLSLocale.GetLocaleName(System.Int32)">
            <summary>
            Gets Locale Name with the given key.
            </summary>
            <param name="localeKey">a Local Key</param>
            <returns>Locale Name for the given key</returns>
            <exception cref="T:IBMU2.UODOTNET.UniNLSLocaleException">Thrown when GetLocaleName() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniNLSLocale.CheckEntryConditions">
            <summary>
            This routine will check whether or not we are in a state that we can perform any object operation,
            especially server communications.  It checks to see if a command is currently in the active state
            and it checks to ensure that the internal RPC packets are initialized.   If an error occurs,
            it passes it back up.
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniNLSLocale.m_ClientArray">
            <summary>
            Store for Local name
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniNLSLocale.m_Session">
            <summary>
            Store for instance of UniSession Object
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniNLSLocale.m_UniNLSLocaleStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniNLSLocale.m_UniReturnCode">
            <summary>
            Store for Return Code
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniNLSLocale.m_FileEncryptionType">
            <summary>
            Store for File Encryption Time
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniNLSLocale.ClientNames">
            <summary>
            Returns a <c>UniDynArray</c> of the client representation of the locale .
            settings.  
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniNLSLocale.ServerNames">
            <summary>
            Returns a <c>UniDynArray</c> of the server representation of the locale .
            settings.  
            </summary>
        </member>
        <member name="T:IBMU2.UODOTNET.UniDynArrayException">
            <summary>
            UniDynArrayException extends ApplicationException. UniDynArrayException is thrown by a user program, 
            not by the common language runtime and it represents errors that occur during application execution.
            When an error occurs during UniDynArray execution, it reports this by throwing an exception containing 
            information about the error. Once thrown, an exception is handled by the application or by the default
            exception handler.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArrayException.#ctor">
            <summary>
            Initializes a new instance of the UniDynArrayException class.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArrayException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the UniDynArrayException class with a specified error message.
            </summary>
            <param name="message">message description</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArrayException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the UniDynArrayException class with a specified error message and a 
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">message description</param>
            <param name="inner">inner exception object</param>
        </member>
        <member name="P:IBMU2.UODOTNET.UniDynArrayException.ErrorCode">
            <summary>
            Gets Error Code
            </summary>
        </member>
        <member name="T:IBMU2.UODOTNET.UniDynArray">
             <summary>
             <c>UniDynArray</c> is used to control dynamic array interaction.  It is important
             to note that <c>UniDynArray</c> referencing is done in '1'-based notation, meaning
             the first field is field 1.
             </summary>
             <example> This sample shows how to use <c>UniDynArray</c> object.
             <code>
             [C#]
             using IBMU2.UODOTNET;
            	using System.Text;
               class MyAppClass 
               {
                  public static void Main() 
                  {
                     try
                     {
            				UniSession us = UniObjects.OpenSession("localhost","ZZZ","XXX","HS.SALES","uvcs");
            				//creating UniDynArray
            				char bFM = Convert.ToChar(254);
            				char bVM = Convert.ToChar(253);
            				char bSVM = Convert.ToChar(252);
            				UniDynArray lDynArray =  new UniDynArray(us1,"ab" + bFM + "cd" + bVM + "ef" + bVM
            					+ "gh" + bVM + "ij" + bFM + "kl" + bSVM + "mn" + bSVM + "no" + 
            						bVM + "p" + bVM + "qr" + bFM + "s" + bFM + "t" + bFM + "");
            			
            				// run  Count()
            				int myVal = lDynArray.Count();
            				
            				// run Dcount()
            				int myVal2 = lDynArray.Dcount();
            
            				// run Extract 
            				UniDynArray real = lDynArray.Extract(1,1,0);
            				// run Replace
            				lDynArray.Replace(2, 0, 0, "*");
            				//run delete
            				lDynArray.Delete(1, 0, 0);
            				// run insert
            				lDynArray.Insert(0, 0, 0, "2500");
            			}
            			Catch (Exception ex)
            			{
            				//some error, display it 
            				Console.WriteLine(ex.Message);
            			}
            			finally
            			{
            				// no error
            				if(us1 != null)
            				{
            					UniObjects.CloseSession(us1);
            					us1= null;
            				}
            			}
                  }
               }
             [VB.NET]
             Option Explicit On 
            	Option Strict On
            	' Add the classes in the following namespaces to our namespace
            	Imports System
            	Imports System.IO
            	Imports System.Text
            	Imports System.Collections
            	Imports IBMU2.UODOTNET
            	Class App
            		Public Shared Function Main(ByVal args() As String) As Integer
            		Dim us1 As UniSession = Nothing
            		Try
            			Console.WriteLine("Program started... ")
            			us1 = UniObjects.OpenSession("localhost", "ZZZ", "xxxx", "HS.SALES", "uvcs")
            			'creating UniDynArray
            			Dim bFM As Char = Convert.ToChar(254)
            			Dim bVM As Char = Convert.ToChar(253)
            			Dim bSVM As Char = Convert.ToChar(252)
            			Dim str As String = "ab" + bFM + "cd" + bVM + "ef" + bVM + "gh" + bVM + "ij" + bFM + "kl" + bSVM + "mn" + bSVM + "no" + bVM + "p" + bVM + "qr" + bFM + "s" + bFM + "t" + bFM + ""
            			Dim lDynArray As New UniDynArray(us1, str)
            			' run  Count()
            			Dim myVal As Integer = lDynArray.Count()
            			' run Dcount()
            			Dim myVal2 As Integer = lDynArray.Dcount()
            			' run Extract 
            			Dim real As UniDynArray = lDynArray.Extract(1, 1, 0)
            			'run Replace
            			lDynArray.Replace(2, 0, 0, "*")
            			'run delete
            			lDynArray.Delete(1, 0, 0)
            			' run insert
            			lDynArray.Insert(0, 0, 0, "2500")
            		Catch e As Exception
            			If Not (us1 Is Nothing) Then
            				If (us1.IsActive) Then
            					UniObjects.CloseSession(us1)
            					us1 = Nothing
            				End If
            			End If
            			Console.WriteLine("")
            			Dim s As String
            			s = "Connection Failed : " + e.Message
            			Console.WriteLine(s)
            		Finally
            			If Not (us1 Is Nothing) Then
            				If (us1.IsActive) Then
            					Console.WriteLine("")
            					Dim s As String
            					s = "Connection Passed"
            					Console.WriteLine(s)
            					UniObjects.CloseSession(us1)
            					Console.WriteLine("Program finished... ")
            				End If
            			End If
            		End Try
            		Console.Read()
            		Return 0
            		End Function 'Main
            	End Class 'App
             </code>
             </example>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.#ctor(IBMU2.UODOTNET.UniSession)">
            <summary>
            Initializes a new instance of the UniDynArray class.
            </summary>
            <param name="aSession">UniSession Object</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.#ctor(System.Text.Encoding)">
            <summary>
            
            </summary>
            <param name="pEnc"></param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.#ctor(System.Text.Encoding,System.Char[],System.String)">
            <summary>
            
            </summary>
            <param name="pEnc"></param>
            <param name="Marks"></param>
            <param name="pString"></param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.Count(System.Int32,System.Int32,System.Int32)">
            <summary>
            Counts the number of text marks that exist in the array.
            </summary>
            <param name="aField">integer representing which field mark to count</param>
            <param name="aValue">integer representing the value position to count</param>
            <param name="aSubValue">integer representing which subvalue position to count</param>
            <returns>integer representing the number of text mark characters in the array</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.#ctor(IBMU2.UODOTNET.UniSession,System.Byte[])">
            <summary>
            Initializes a new instance of the UniDynArray class with given Byte Array Data
            </summary>
            <param name="aSession">UniSession Object</param>
            <param name="pData">Byte Array Data</param>
            <exception cref="T:IBMU2.UODOTNET.UniDynArray">Thrown when UniDynArray() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.#ctor(System.Text.Encoding,System.Byte[])">
            <summary>
            
            </summary>
            <param name="pEnc"></param>
            <param name="pData"></param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.#ctor(System.Text.Encoding,System.Char[],System.Byte[])">
            <summary>
            
            </summary>
            <param name="pEnc"></param>
            <param name="pMarks"></param>
            <param name="pData"></param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.#ctor(IBMU2.UODOTNET.UniSession,System.String)">
            <summary>
            Initializes a new instance of the UniDynArray class with given string Data.
            </summary>
            <param name="aSession">UniSession Object</param>
            <param name="pString">string data</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.#ctor(System.Text.Encoding,System.String)">
            <summary>
            
            </summary>
            <param name="pEnc"></param>
            <param name="pString"></param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.Count(System.Int32,System.Int32)">
            <summary>
            Counts the number of subvalue marks that exist in the array.
            </summary>
            <param name="aField">integer representing which field mark to count</param>
            <param name="aValue">integer representing the value position to count</param>
            <returns>integer representing the number of subvalue mark characters in the array</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.Count(System.Int32)">
            <summary>
            Counts the number of value marks that exist in the array.
            </summary>
            <param name="aField">integer representing which field mark to count</param>
            <returns>integer representing the number of value mark characters in the array</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.Count">
            <summary>
            Counts the number of field marks that exist in the array.
            </summary>
            <returns>integer representing the number of field mark characters in the array</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.Dcount(System.Int32,System.Int32,System.Int32)">
            <summary>
            Counts the number of text values that exist in the array at the given
            field,value,subvalue position, equivalent to <c>Count()</c> + 1.
            </summary>
            <param name="aField">integer representing which field to count values for</param>
            <param name="aValue">integer representing which value to use</param>
            <param name="aSubValue">integer representing which subvalue to use</param>
            <returns>integer representing the number of text values in the array</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.Dcount(System.Int32,System.Int32)">
            <summary>
            Counts the number of subvalues that exist in the array at the given
            field,value position, equivalent to <c>Count( aFieldValue, aValue)</c> + 1.
            </summary>
            <param name="aField">integer representing which field to count values for</param>
            <param name="aValue">integer representing which value to count subvalues for</param>
            <returns>integer representing the number of subvalue in the field/value of the array</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.Dcount(System.Int32)">
            <summary>
            Counts the number of values that exist in the array at the given
            field position, equivalent to <c>Count( aField )</c> + 1.
            </summary>
            <param name="aField">integer representing which field to count values for</param>
            <returns>integer representing the number of value in the field of the array</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.Dcount">
            <summary>
            Counts the number of fields that exist in the array, equivalent to 
            <c>Count()</c> + 1.
            </summary>
            <returns>integer representing the number of fields in the array</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.Delete(System.Int32,System.Int32,System.Int32)">
            <summary>
            Deletes the given field/value/subvalue value from the array.
            </summary>
            <param name="aField">integer representing which field to delete</param>
            <param name="aValue">integer representing which value within the field to delete</param>
            <param name="aSubValue">integer representing which subvalue within the value to delete</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.Delete(System.Int32,System.Int32)">
            <summary>
            Deletes the given field/value value from the array.
            </summary>
            <param name="aField">integer representing which field to delete</param>
            <param name="aValue">integer representing which value within the field to delete</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.Delete(System.Int32)">
            <summary>
            Deletes the given field value from the array.
            </summary>
            <param name="aField">integer representing which field to delete</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.Extract(System.Int32,System.Int32,System.Int32)">
            <summary>
            Extracts a copy of the requested subvalue.
            </summary>
            <param name="aField">integer representing which field to extract</param>
            <param name="aValue">integer representing which value to extract</param>
            <param name="aSubValue">integer representing which subvalue to extract</param>
            <returns>UniDynArray representing the requested subvalue</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.Extract(System.Int32,System.Int32)">
            <summary>
            Extracts a copy of the requested field.
            </summary>
            <param name="aField">integer representing which field to extract</param>
            <param name="aValue">integer representing which value to extract</param>
            <returns>UniDynArray representing the requested field</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.Extract(System.Int32)">
            <summary>
            Extracts a copy of the entire array.
            </summary>
            <param name="aField">integer representing which field to extract</param>
            <returns>UniDynArray representing the requested field</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.Insert(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Inserts an string Object into the dynamic array 
            at the given field,value,subvalue position.
            </summary>
            <param name="aField">integer representing which field to insert data into </param>
            <param name="aValue">integer representing which value to insert data into</param>
            <param name="aSubValue">integer representing which subvalue to insert data into</param>
            <param name="insertString">String representing the data to be inserted</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.Insert(System.Int32,System.Int32,System.Int32,IBMU2.UODOTNET.UniDynArray)">
            <summary>
            
            </summary>
            <param name="aField"></param>
            <param name="aValue"></param>
            <param name="aSubValue"></param>
            <param name="aUniDynArray"></param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.Insert(System.Int32,System.Int32,System.String)">
            <summary>
            Inserts an String Object into the dynamic array at the given field,value position.
            </summary>
            <param name="aField">integer representing which field to insert data into </param>
            <param name="aValue">integer representing which value to insert data into</param>
            <param name="aString">String representing the data to be inserted</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.Insert(System.Int32,System.Int32,IBMU2.UODOTNET.UniDynArray)">
            <summary>
            
            </summary>
            <param name="aField"></param>
            <param name="aValue"></param>
            <param name="aUniDynArray"></param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.Insert(System.Int32,System.String)">
            <summary>
            Inserts an Object into the dynamic array at the given field position.
            </summary>
            <param name="aField">integer representing which field to insert data into </param>
            <param name="aString">String representing the data to be inserted</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.Insert(System.Int32,IBMU2.UODOTNET.UniDynArray)">
            <summary>
            
            </summary>
            <param name="aField"></param>
            <param name="aUniDynArray"></param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.Length(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the length of the given field,value,subvalue of the dynamic array.
            </summary>
            <param name="aField">integer representing the field to obtain the length of</param>
            <param name="aValue">integer representing the value to get the length from</param>
            <param name="aSubValue">integer representing the subvalue to get the length from</param>
            <returns>integer representing the length of the field,value,subvalue of the dynamic array</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.Length(System.Int32,System.Int32)">
            <summary>
            Returns the length of the given field,value of the dynamic array.
            </summary>
            <param name="aField">integer representing which field to insert data into</param>
            <param name="aValue">integer representing the value to remove</param>
            <returns>integer representing the length of the dynamic array</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.Length(System.Int32)">
            <summary>
            Returns the length of the given field,value of the dynamic array.
            </summary>
            <param name="aField">integer representing which field to insert data into</param>
            <returns>integer representing the length of the dynamic array</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.Remove(System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs a delete on the given field/value/subvalue, 
            but also returns the deleted subvalue.
            </summary>
            <param name="aField">integer representing the field to remove</param>
            <param name="aValue">integer representing the value to remove</param>
            <param name="aSubValue">integer representing the subvalue to remove</param>
            <returns>UniDynArray representing the deleted subvalue from the array</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.Remove(System.Int32,System.Int32)">
            <summary>
            Performs a delete on the given field/value, but also returns the deleted value.
            </summary>
            <param name="aField">integer representing the field to remove</param>
            <param name="aValue">integer representing the value to remove</param>
            <returns>UniDynArray representing the deleted value from the array</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.Remove(System.Int32)">
            <summary>
            Performs a delete on the given field, but also returns the deleted field.
            </summary>
            <param name="aField">integer representing the field to remove</param>
            <returns>UniDynArray representing the deleted field from the array</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.Replace(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Replaces the field/value/subvalue specified with the new data value.
            </summary>
            <param name="aField">integer representing the field to replace</param>
            <param name="aValue">integer representing the value to replace</param>
            <param name="aSubValue">integer representing the subvalue to replace</param>
            <param name="replaceString">aString Object representing the new data value</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.Replace(System.Int32,System.Int32,System.Int32,IBMU2.UODOTNET.UniDynArray)">
            <summary>
            
            </summary>
            <param name="aField"></param>
            <param name="aValue"></param>
            <param name="aSubValue"></param>
            <param name="aUniDynArray"></param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.Replace(System.Int32,System.Int32,System.String)">
            <summary>
            Replaces the field/value specified with the new data value.
            </summary>
            <param name="aField">integer representing the field to replace</param>
            <param name="aValue">integer representing the value to replace</param>
            <param name="aString">aString Object representing the new data value</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.Replace(System.Int32,System.Int32,IBMU2.UODOTNET.UniDynArray)">
            <summary>
            
            </summary>
            <param name="aField"></param>
            <param name="aValue"></param>
            <param name="aUniDynArray"></param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.Replace(System.Int32,System.String)">
            <summary>
            Replaces the field specified with the new data value.
            </summary>
            <param name="aField">integer representing the field to replace</param>
            <param name="aString">aString Object representing the new data value</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.Replace(System.Int32,IBMU2.UODOTNET.UniDynArray)">
            <summary>
            
            </summary>
            <param name="aField"></param>
            <param name="aUniDynArray"></param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.ToByteArray">
            <summary>
            Converts the given UniDynArray into a byte array.
            </summary>
            <returns> Byte Array object representing the dynamic array</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.ToString">
            <summary>
            Converts the given UniDynArray into a base String.
            </summary>
            <returns>a String object representing the dynamic array</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.ToArrayString(System.Char)">
            <summary>
            
            </summary>
            <param name="pDelim"></param>
            <returns></returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.PrintByteArray">
            <summary>
            Print Each Byte of Byte Array into Console.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.RegenerateDynArray">
            <summary>
            Recreate the dynArray structure.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.CheckArrayState(System.Boolean)">
            <summary>
            Check Array State.
            </summary>
            <param name="changeStringState">boolean indication whether or not change byte array state</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.HasMarkCharacters(System.Byte[])">
            <summary>
            Returns true or false if byte array contains marks .
            </summary>
            <param name="pByteArray">byte array data</param>
            <returns>boolen indicating byte array has marks or not</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.ConstructDynArray(System.Byte[])">
            <summary>
            Converts the given byte array into a Vector array.
            </summary>
            <param name="itemArray">byte array data </param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.CountMarks(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            count the mark characters, using except_val to determine what to return.
            </summary>
            <param name="aField">integer representing which field mark to count</param>
            <param name="aValue">integer representing the value position to count</param>
            <param name="aSubValue">integer representing the sub value position to count</param>
            <param name="except_val">except value</param>
            <returns>returns number of mark characters</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.InitDefaultValues(IBMU2.UODOTNET.UniSession,System.String)">
            <summary>
            Initialize Default values.
            </summary>
            <param name="aSession"></param>
            <param name="pString"></param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDynArray.UniCodeStringToByteArray(System.Text.Encoding,System.String)">
            <summary>
            
            </summary>
            <param name="pEnc"></param>
            <param name="pStringVal"></param>
            <returns></returns>
        </member>
        <member name="F:IBMU2.UODOTNET.UniDynArray.m_Value">
            <summary>
            Store for Byte Array Value
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniDynArray.m_DynArray">
            <summary>
            Store for Dynamic Array
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniDynArray.m_IsArrayActive">
            <summary>
            Store for Active Array Flag
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniDynArray.m_IsByteArrayActive">
            <summary>
            Store for Byte Array Active Falg
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniDynArray.m_Session">
            <summary>
            Store for instance of UniSession Object
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniDynArray.m_FileEncryptionType">
            <summary>
            Store for File Encryption Type
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniDynArray.StringValue">
            <summary>
            Gets UniDyArray as string object.
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniDynArray.UseSession">
            <summary>
            
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniDynArray.UniDynArrayList">
            <summary>
            Gets UniDynArray as .NET ArrayList
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniDynArray.CurrentSession">
            <summary>
            Gets UniDynArray Session
            </summary>
        </member>
        <member name="T:IBMU2.UODOTNET.UniDataSetException">
            <summary>
            UniDataSetException extends ApplicationException. UniDataSetException is thrown by a user program, 
            not by the common language runtime and it represents errors that occur during application execution.
            When an error occurs during UniDataSet execution, it reports this by throwing an exception containing 
            information about the error. Once thrown, an exception is handled by the application or by the default
            exception handler.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDataSetException.#ctor">
            <summary>
            Initializes a new instance of the UniDataSetException class.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDataSetException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the UniDataSetException class with a specified error message.
            </summary>
            <param name="message">message description</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDataSetException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the UniDataSetException class with a specified error message and a 
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">message description</param>
            <param name="inner">inner exception object</param>
        </member>
        <member name="P:IBMU2.UODOTNET.UniDataSetException.ErrorCode">
            <summary>
            Gets Error Code
            </summary>
        </member>
        <member name="T:IBMU2.UODOTNET.SupportClass">
            <summary>
            This is a  utility class used by UODOTNET Classes.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.SupportClass.ToByteArray(System.SByte[])">
            <summary>
            Converts an array of sbytes to an array of bytes
            </summary>
            <param name="sbyteArray">The array of sbytes to be converted</param>
            <returns>The new array of bytes</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.SupportClass.ToByteArray(System.String)">
            <summary>
            Converts a string to an array of bytes.
            </summary>
            <param name="sourceString">The string to be converted.</param>
            <returns>The new array of bytes.</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.SupportClass.ToSByteArray(System.Byte[])">
            <summary>
            Converts an array of bytes to an array of sbytes.
            </summary>
            <param name="byteArray">The array of byte to be converted.</param>
            <returns>The new array of sbytes.</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.SupportClass.ToSByteArray(System.String)">
            <summary>
            Converts a string to an array of bytes.
            </summary>
            <param name="sourceString">The string to be converted.</param>
            <returns>The new array of bytes.</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.SupportClass.ToCharArray(System.SByte[])">
            <summary>
            Converts an array of sbytes to an array of chars.
            </summary>
            <param name="sByteArray">The array of sbytes to convert.</param>
            <returns>The new array of chars.</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.SupportClass.ToCharArray(System.Byte[])">
            <summary>
            Converts an array of bytes to an array of chars.
            </summary>
            <param name="byteArray">The array of bytes to convert.</param>
            <returns>The new array of chars.</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.SupportClass.URShift(System.Int32,System.Int32)">
            <summary>
            unsigned right shift .
            </summary>
            <param name="number">the number to be shifted.</param>
            <param name="bits">bits value.</param>
            <returns></returns>
        </member>
        <member name="M:IBMU2.UODOTNET.SupportClass.URShift(System.Int32,System.Int64)">
            <summary>
            unsigned right shift .
            </summary>
            <param name="number">the number to be shifted.</param>
            <param name="bits">bits value.</param>
            <returns></returns>
        </member>
        <member name="M:IBMU2.UODOTNET.SupportClass.URShift(System.Int64,System.Int32)">
            <summary>
            unsigned right shift .
            </summary>
            <param name="number">the number to be shifted.</param>
            <param name="bits">bits value.</param>
            <returns></returns>
        </member>
        <member name="M:IBMU2.UODOTNET.SupportClass.URShift(System.Int64,System.Int64)">
            <summary>
            unsigned right shift .
            </summary>
            <param name="number">the number to be shifted.</param>
            <param name="bits">bits value.</param>
            <returns></returns>
        </member>
        <member name="T:IBMU2.UODOTNET.UniSequentialFile">
            <summary>
            UniSequentialFile It is used to define and manage UniVerse and UniData Sequential Files, 
            which are operating system files.
            </summary>
            <example> This sample shows how to use <c>UniSequentialFile</c> Object.
            <code>
            [C#]
            using IBMU2.UODOTNET;
            using System.Text;
              class MyAppClass 
              {
                 public static void Main() 
                 {
                    try
                    {
            			UniSession us = UniObjects.OpenSession("localhost","ZZZ","XXX","HS.SALES","uvcs");
            			UniSequentialFile fl = us.CreateSequentialFile("FileName","RecID",true);
            			UniDynArray s5 = fl.ReadLine();
            			s5 = fl.ReadBlk();
            			fl.FileSeek(0,0);
            		}
            		Catch (Exception ex)
            		{
            			//some error, display it 
            			Console.WriteLine(ex.Message);
            		}
            		finally
            		{
            			// no error
            			if(us1 != null)
            			{
            				UniObjects.CloseSession(us1);
            				us1= null;
            			}
            		}
                 }
              }
              [VB.NET]
            Option Explicit On 
            Option Strict On
            ' Add the classes in the following namespaces to our namespace
            Imports System
            Imports System.IO
            Imports System.Text
            Imports System.Collections
            Imports IBMU2.UODOTNET
            Class App
            	Public Shared Function Main(ByVal args() As String) As Integer
            	Dim us1 As UniSession = Nothing
            	Dim cmd As UniCommand = Nothing
            	Try
            		Console.WriteLine("Program started... ")
            		us1 = UniObjects.OpenSession("localhost", "ZZZ", "xxxx", "HS.SALES", "uvcs")
            		Dim fl 	As UniSequentialFile  = us1.CreateSequentialFile("FileName","RecID",true)
            		Dim s5 As	UniDynArray  = fl.ReadLine()
            		s5 = fl.ReadBlk()
            		fl.FileSeek(0,0)
            	Catch e As Exception
            		If Not (us1 Is Nothing) Then
            			If (us1.IsActive) Then
            				UniObjects.CloseSession(us1)
            				us1 = Nothing
            			End If
            		End If
            		Console.WriteLine("")
            		Dim s As String
            		s = "Connection Failed : " + e.Message
            		Console.WriteLine(s)
            	Finally
            		If Not (us1 Is Nothing) Then
            			If (us1.IsActive) Then
            				Console.WriteLine("")
            				Dim s As String
            				s = "Connection Passed"
            				Console.WriteLine(s)
            				UniObjects.CloseSession(us1)
            				Console.WriteLine("Program finished... ")
            			End If
            		End If
            	End Try
            	Console.Read()
            	Return 0
            	End Function 'Main
            End Class 'App
            </code>
            </example>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSequentialFile.#ctor(IBMU2.UODOTNET.UniSession,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the UniSequentialFile class.
            </summary>
            <param name="pSession">UniSession Object</param>
            <param name="pFileName">Operating System File Name</param>
            <param name="pRecordID">refers to a record within the file, optionally created if it does not exist</param>
            <param name="pCreateFlag">boolean denoting whether or not the file should 
            be created if it does not exist.</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSequentialFile.Open">
            <summary>
            Physically opens the server-side file, creating it if the CreateFlag value was set and the file
            doesn't exist.
            </summary>
            <exception cref="T:IBMU2.UODOTNET.UniSequentialFileException">Thrown when Open() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSequentialFile.Close">
            <summary>
            Closes an open sequential file.
            </summary>
            <exception cref="T:IBMU2.UODOTNET.UniSequentialFileException">Thrown when Close() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSequentialFile.FileSeek(System.Int32,System.Int32)">
            <summary>
            Moves the file pointer within the Sequential File by an offset position specified in bytes,
            relative to the current position, beginning of the file, or the end of the file, as determined
            by the <c>aRelPos</c> parameter.
            </summary>
            <param name="aRelPos">integer denoting the relative position within a file to seek from.
            A 0 (UniT_START) implies to start from the beginning of the file.  1 (UniT_CURR) means to start 
            from the current position.  2 (UniT_END) means to start from the end of the file.</param>
            <param name="aOffset">integer denoting the number of bytes before or after aRelPos.  A negative
             value moves the pointer to a position before aRelPos</param>
            <exception cref="T:IBMU2.UODOTNET.UniSequentialFileException">Thrown when FileSeek() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSequentialFile.ReadBlk">
            <summary>
            Reads a block of data from the sequential file.  The size of the data block is defined by what
            is set using the <c>ReadSize</c> property.  Upon completion, the <c>ReadSize</c>
            property can be used to determine the number of bytes read.  Additionally, 
            the <c>UniSequentialStatus</c> property will return one of the following value:
            <list type="bullet">
            <item>
            <description>-1	The file is not open for reading</description>
            </item>
            <item>
            <description>0		The read was successful</description>
            </item>
            <item>
            <description>1		The end of file was reached</description>
            </item>
            </list>
            </summary>
            <returns>a UniDynArray value representing the data that was read</returns>
            <exception cref="T:IBMU2.UODOTNET.UniSequentialFileException">Thrown when ReadBlk() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSequentialFile.ReadLine">
            <summary>
            Reads a line of data from the sequential file.  The lines must be delimited with a newline character.
            Additionally, the <c>UniSequentialStatus</c> property will return one of the following values:
            <list type="bullet">
            <item>
            <description> -1	The file is not open for reading</description>
            </item>
            <item>
            <description>0		The read was successful</description>
            </item>
            <item>
            <description>1		The end of file was reached</description>
            </item>
            </list>
            </summary>
            <returns>a UniDynArray value representing the data that was read</returns>
            <exception cref="T:IBMU2.UODOTNET.UniSequentialFileException">Thrown when ReadLine() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSequentialFile.WriteBlk(System.String)">
            <summary>
            Overloaded. Writes the given block to the sequential file, at the location
             currently set.
            </summary>
            <param name="aString">a string representing the data block to be written</param>
            <exception cref="T:IBMU2.UODOTNET.UniSequentialFileException">Thrown when WriteBlk() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSequentialFile.WriteBlk(IBMU2.UODOTNET.UniDynArray)">
            <summary>
            Overloaded. Writes the given block to the sequential file, at the location 
            currently set.
            </summary>
            <param name="aString">a UniDynArray representing the data block to be written</param>
            <exception cref="T:IBMU2.UODOTNET.UniSequentialFileException">Thrown when WriteBlk() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSequentialFile.WriteLine(System.String)">
            <summary>
            Overloaded. Writes the given line to the sequential file, at the location 
            currently set.
            </summary>
            <param name="aString">a string  representing the line to be written</param>
            <exception cref="T:IBMU2.UODOTNET.UniSequentialFileException">Thrown when WriteLine() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSequentialFile.WriteLine(IBMU2.UODOTNET.UniDynArray)">
            <summary>
            Overloaded. Writes the given line to the sequential file, at the location 
            currently set.
            </summary>
            <param name="aString">a UniDynArray representing the line to be written</param>
            <exception cref="T:IBMU2.UODOTNET.UniSequentialFileException">Thrown when WriteLine() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSequentialFile.WriteEOF">
            <summary>
            Writes an EOF marker.	 
            </summary>
            <exception cref="T:IBMU2.UODOTNET.UniSequentialFileException">Thrown when WriteEOF() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSequentialFile.CheckEntryConditions(System.Boolean)">
            <summary>
            Checks entry conditions to make sure we can perform this operation
            checks to make sure that the file is open, that we are not within
            an active UnICommand.exec() state, etc...
            </summary>
            <param name="shouldThrow">flag inidicates whether or not exception should be thrown</param>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSequentialFile.m_UniSeqFileHandle">
            <summary>
            Store for UniSequentialFile Handle
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSequentialFile.m_UniSeqFileName">
            <summary>
            Store for UniSequentialFile Name
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSequentialFile.m_UniSeqRecordName">
            <summary>
            Store for UniSequentialFile Record Name
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSequentialFile.m_UniSeqReturnString">
            <summary>
            Store for UniSequentialFile Return Data
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSequentialFile.m_UniSeqReturnCode">
            <summary>
            Store for UniSequentialFile Return Code
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSequentialFile.m_UniSeqCreateFlag">
            <summary>
            Store for UniSequentialFile Creation Flag
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSequentialFile.m_UniSeqBlockSize">
            <summary>
            Store for UniSequentialFile Block Size
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSequentialFile.m_UniSeqTimeout">
            <summary>
            Store for UniSequentialFile Timeout
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSequentialFile.m_IsFileOpen">
            <summary>
            Store for status of File Open Flag
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSequentialFile.m_Session">
            <summary>
            Store for instance of UniSession Object
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSequentialFile.m_UniSeqStatus">
            <summary>
            Store for status of UniSequentialFile operation
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSequentialFile.m_FileEncryptionType">
            <summary>
            Store for File Encryption Type
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSequentialFile.IsFileOpen">
            <summary>
            Gets a value indicating whether the file  is opened.
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSequentialFile.ReadSize">
            <summary>
            Gets or Sets Block Size.
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSequentialFile.EncryptionType">
            <summary>
            Gets or Set File Encryption Type.
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSequentialFile.UniSequentialStatus">
            <summary>
            Gets or Set UniSequentialFile Status.
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSequentialFile.TimeOut">
            <summary>
            Gets and Sets the current timeout value for this object.
            </summary>
            <exception cref="T:IBMU2.UODOTNET.UniSequentialFileException">Thrown when TimeOut property fails.</exception>
        </member>
        <member name="T:IBMU2.UODOTNET.UniErrorMessage">
            <summary>
            UniErrorMessage is a class used to determine a given error message
            given an ErrorCode to be displayed
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniErrorMessage.#ctor">
            <summary>
             Creates UniErrorMessage object  
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniErrorMessage.GetErrorMessage(System.Int32)">
            <summary> 
            returns the appropriate error message, depending on the error code passed in
            </summary>
            <param name="aErrorCode">integer representing which error message to display
            </param>
            <returns> String representing the error message to be displayed
            </returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniErrorMessage.GetErrorMessage(System.Int32,System.String)">
            <summary>
            returns the appropriate error message, depending on the error code passed in
            </summary>
            <param name="aErrorCode">integer representing which error message to display
            </param>
            <param name="aExtraInfo">String used to represent additional information that might be 
            relevant (file name, record name, etc...)
            </param>
            <returns> String representing the error message to be displayed
            </returns>
        </member>
        <member name="T:IBMU2.UODOTNET.UniSubroutine">
             <summary>
            <c>UniSubroutine</c> is the object type used to allow the user to run a cataloged
             BASIC subroutine on the server.
             </summary>
             <example> This sample shows how to use <c>UniCommand</c> Object.
             <code>
             [C#]
             using IBMU2.UODOTNET;
            	using System.Text;
               class MyAppClass 
               {
                  public static void Main() 
                  {
                     try
                     {
            				UniSession us = UniObjects.OpenSession("localhost","ZZZ","XXX","HS.SALES","uvcs");
            				string RoutineName = "!TIMDAT";
            				int IntTotalAtgs = 1;
            				string [] largs = new string[IntTotalAtgs];
            				largs[0] = "1";
            				UniDynArray tmpStr2;				
            				UniSubroutine sub = us1.CreateUniSubroutine(RoutineName,IntTotalAtgs);
            				for (int i=0; i "less then" IntTotalAtgs; i++)
            				{
            					sub.SetArg(i,largs[i]);
            				}
            			
            				sub.Call();
            				tmpStr2 = sub.GetArgDynArray(0);
            				string result = "\n"+ "Result is :" +tmpStr2;
            				Console.WriteLine("  Response from UniSubRoutineSample :"+result);
            			}
            			Catch (Exception ex)
            			{
            				//some error, display it 
            				Console.WriteLine(ex.Message);
            			}
            			finally
            			{
            				// no error
            				if(us1 != null)
            				{
            					UniObjects.CloseSession(us1);
            					us1= null;
            				}
            			}
                  }
               }
             </code>
             [VB.NET]
             Option Explicit On 
            	Option Strict On
            	' Add the classes in the following namespaces to our namespace
            	Imports System
            	Imports System.IO
            	Imports System.Text
            	Imports System.Collections
            	Imports IBMU2.UODOTNET
            	Class App
            		Public Shared Function Main(ByVal args() As String) As Integer
            		Dim us1 As UniSession = Nothing
            		Dim cmd As UniCommand = Nothing
            		Dim subr As UniSubroutine = Nothing
            		Try
            			Console.WriteLine("Program started... ")
            			us1 = UniObjects.OpenSession("localhost", "ZZZ", "xxxx", "HS.SALES", "uvcs")
            			Dim RoutineName As String = "!TIMDAT"
            			Dim IntTotalAtgs As Integer = 1
            			Dim largs([IntTotalAtgs]) As String
            			largs(0) = "1"
            			Dim tmpStr2 As UniDynArray
            			subr = us1.CreateUniSubroutine(RoutineName, IntTotalAtgs)
            			Dim i As Integer
            			For i = 0 To (IntTotalAtgs - 1)
            				subr.SetArg(i, largs(i))
            			Next i
            			subr.Call()
            			tmpStr2 = subr.GetArgDynArray(0)
            			Dim result As String = Environment.NewLine + "Result is :" + tmpStr2.ToString()
            			Console.WriteLine("  Response from UniSubRoutineSample :" + result)
            		Catch e As Exception
            			If Not (us1 Is Nothing) Then
            				If (us1.IsActive) Then
            					UniObjects.CloseSession(us1)
            					us1 = Nothing
            				End If
            			End If
            			Console.WriteLine("")
            			Dim s As String
            			s = "Connection Failed : " + e.Message
            			Console.WriteLine(s)
            		Finally
            			If Not (us1 Is Nothing) Then
            				If (us1.IsActive) Then
            					Console.WriteLine("")
            					Dim s As String
            					s = "Connection Passed"
            					Console.WriteLine(s)
            					UniObjects.CloseSession(us1)
            					Console.WriteLine("Program finished... ")
            				End If
            			End If
            		End Try
            		Console.Read()
            		Return 0
            		End Function 'Main
            	End Class 'App
             </example>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSubroutine.UVSUB_INIT_SEND_ARGS">
            <summary>
            Initial static arguments we put on stack
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSubroutine.UVSUB_INIT_RETURN_ARGS">
            <summary>
            Initial number of arguments on return stack
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSubroutine.UVSUB_MAX_ARGS">
            <summary>
            Maximum  number of arguments
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSubroutine.#ctor(IBMU2.UODOTNET.UniSession,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the UniSubroutine class.
            </summary>
            <param name="pSession">UniSession Object</param>
            <param name="pSubName">SubRoutine Name</param>
            <param name="pNumArgs">Number of arguments</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSubroutine.ResetArgs">
            <summary>
            Resets the output argument array back to all empty values.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSubroutine.Call">
            <summary>
            Executes the catalogued UniVerse or UniData subroutine identified during the <c>UniSubroutine</c>
            creation.  Uses the arguments established with the <c>SetArg</c> method.
            </summary>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when Call() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSubroutine.GetArg(System.Int32)">
            <summary>
            Retrieves the the contents of the subroutine arguments after a successful <c>Call</c> has
             been executed.
            </summary>
            <param name="aArgNum">integer value of the argument to be retrieved.  0 based, first argument is 0.</param>
            <returns>String value representing the subroutine argument requested</returns>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when GetArgDynArray() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSubroutine.GetArgDynArray(System.Int32)">
            <summary>
            Retrieves the the contents of the subroutine arguments after a successful <c>Call</c> has
             been executed.
            </summary>
            <param name="aArgNum">integer value of the argument to be retrieved.  0 based, first argument is 0.</param>
            <returns>UniDynArray value representing the subroutine argument requested</returns>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when GetArgDynArray() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSubroutine.SetArg(System.Int32,IBMU2.UODOTNET.UniDynArray)">
            <summary>
            Sets up the input argument array to be used for the catalogued 
            subroutine call.
            </summary>
            <param name="aArgNum">integer representing which argument value is to be set.  0 represents the first argument</param>
            <param name="aArgVal">UniDynArray representing the value to set this argument to</param>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when SetArg() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSubroutine.SetArg(System.Int32,System.String)">
            <summary>
            Sets up the input argument array to be used for the catalogued subroutine call.
            </summary>
            <param name="aArgNum">integer representing which argument value is to be set.  0 represents the first argument</param>
            <param name="aArgVal">String representing the value to set this argument to</param>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when SetArg() fails.</exception>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSubroutine.m_UniInputArgArray">
            <summary>
            Store for input Argument
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSubroutine.m_UniOutputArgArray">
            <summary>
            Store for Output Argument
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSubroutine.m_UniRoutineName">
            <summary>
            Store for Routine Name
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSubroutine.m_UniNumArgs">
            <summary>
            Store for number of arguments
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSubroutine.m_Session">
            <summary>
            Store for instance of UniSession Object
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSubroutine.m_UniSubReturnCode">
            <summary>
            Store for UniSubroutine Return Code
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSubroutine.m_FileEncryptionType">
            <summary>
            Store for File Encryption Type
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSubroutine.RoutineName">
            <summary>
            Gets UniSubroutine name.
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSubroutine.ArgumentsNumber">
            <summary>
            Gets number of arguments.
            </summary>
        </member>
        <member name="T:IBMU2.UODOTNET.UniSessionException">
            <summary>
            UniSessionException extends ApplicationException. UniSessionException is thrown by a user program, 
            not by the common language runtime and it represents errors that occur during application execution.
            When an error occurs during UniSession execution, it reports this by throwing an exception containing 
            information about the error. Once thrown, an exception is handled by the application or by the default
            exception handler.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSessionException.#ctor">
            <summary>
            Initializes a new instance of the UniSessionException class.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSessionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the UniSessionException class with a specified error message.
            </summary>
            <param name="message">message description</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSessionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the UniSessionException class with a specified error message and a 
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">message description</param>
            <param name="inner">inner exception object</param>
        </member>
        <member name="T:IBMU2.UODOTNET.UniRPCConnectionException">
            <summary>
            UniRPCConnectionException extends ApplicationException. UniRPCConnectionException is thrown by a user program, 
            not by the common language runtime and it represents errors that occur during application execution.
            When an error occurs during UniRPCConnection execution, it reports this by throwing an exception containing 
            information about the error. Once thrown, an exception is handled by the application or by the default
            exception handler. 
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCConnectionException.#ctor">
            <summary>
            Initializes a new instance of the UniRPCConnectionException class.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCConnectionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the UniRPCConnectionException class with a specified error message.
            </summary>
            <param name="message">message description</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCConnectionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the UniRPCConnectionException class with a specified error message and a 
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">message description</param>
            <param name="inner">inner exception object</param>
        </member>
        <member name="T:IBMU2.UODOTNET.UniTransactionException">
            <summary>
            UniTransactionException extends ApplicationException. UniTransactionException is thrown by a user program, 
            not by the common language runtime and it represents errors that occur during application execution.
            When an error occurs during UniTransaction execution, it reports this by throwing an exception containing 
            information about the error. Once thrown, an exception is handled by the application or by the default
            exception handler.
            </summary>   
        </member>
        <member name="M:IBMU2.UODOTNET.UniTransactionException.#ctor">
            <summary>
            Initializes a new instance of the UniTransactionException class.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniTransactionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the UniTransactionException class with a specified error message.
            </summary>
            <param name="message">message description</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniTransactionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the UniTransactionException class with a specified error message and a 
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">message description</param>
            <param name="inner">inner exception object</param>
        </member>
        <member name="P:IBMU2.UODOTNET.UniTransactionException.ErrorCode">
            <summary>
            Gets Error Code
            </summary>
        </member>
        <member name="T:IBMU2.UODOTNET.UniRPCConnection">
            <summary>
            This is UniRPCConnection class
            </summary>
        </member>
        <member name="T:IBMU2.UODOTNET.UniRPC">
            <summary>
            UniRPC Class
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPC.m_UNIRPC_VERSION">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPC.m_UNIRPC_VERSION_LOWEST">
            <summary>
            
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPC.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPC.m_CurrentVersion">
            <summary>
            
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPC.IsCompressionSupported">
            <summary>
            If Compression Supported
            </summary>
            <returns>true or false</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPC.IsEncryptionSupported">
            <summary>
            if Encryption Supported
            </summary>
            <returns>true or false</returns>
        </member>
        <member name="P:IBMU2.UODOTNET.UniRPC.CurrentVersion">
            <summary>
            CurrentVersion Property
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniRPC.Version">
            <summary>
            CurrentVersion Property
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCConnection.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCConnection.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCConnection.#ctor">
            <summary>
            Constructs a UniRPCConnection object but does NOT open any connections to any hosts.
            Sets up all the default parameters for the connect method.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCConnection.#ctor(IBMU2.UODOTNET.UniRPCConnection)">
            <summary>
            Constructs a UniRPCConnection object but uses all the connection
            information from the connection passed in. You still need to call the
            connect method because a connection is not established by default.
            Sets up all the default parameters for the connect method.
            An exception will be thrown if the connection is not a proxy connection.
            </summary>
            <param name="aConnection">A previously established connection.</param>
            <exception cref="T:IBMU2.UODOTNET.UniRPCConnectionException">Throw when error occurs when creating this connection</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCConnection.AcceptConnect(IBMU2.UODOTNET.UniRPCSocket)">
            <summary>
             Accepts a connection request from another RPC library.
            If this method completes, the connection is alive and ready for use.
            </summary>
            <param name="aSocket">active socket </param>
            <exception cref="T:IBMU2.UODOTNET.UniRPCConnectionException">Throw when error occurs when establishing this connection</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCConnection.WritePacket(IBMU2.UODOTNET.UniRPCPacket)">
            <summary>
            
            </summary>
            <param name="anOutPacket"></param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCConnection.ReadPacket(IBMU2.UODOTNET.UniRPCPacket)">
            <summary>
            
            </summary>
            <param name="anInPacket"></param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCConnection.Call">
            <summary>
            
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCConnection.Call(System.Byte)">
            <summary>
            
            </summary>
            <param name="anEncryptionType"></param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCConnection.Close">
            <summary>
            
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCConnection.ConnectInternalSSL(System.Int32,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            
            </summary>
            <param name="responseIndex"></param>
            <param name="clientcertificate">the client certificate if server needs to authenticate the client</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCConnection.ConnectInternal(System.Int32)">
            <summary>
            
            </summary>
            <param name="responseIndex"></param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCConnection.Connect">
            <summary>
            
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCConnection.Connect(System.Int32)">
            <summary>
            
            </summary>
            <param name="responseIndex"></param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCConnection.DisableEncryption">
            <summary>
            
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCConnection.EnableEncryption">
            <summary>
            
            </summary>
            <exception cref="T:IBMU2.UODOTNET.UniRPCConnectionException"></exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCConnection.WritePacketInternal(System.Byte)">
            <summary>
            
            </summary>
            <param name="anEncryptionType"></param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCConnection.ReadPacketInternal">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCConnection.m_VersionPromotion">
            <summary>
            store for m_VersionPromotion
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCConnection.m_CurrentHost">
            <summary>
            store for m_CurrentHost
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCConnection.m_CurrentHostAddress">
            <summary>
            store for m_CurrentHostAddress
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCConnection.m_CurrentPort">
            <summary>
            store for m_CurrentPort
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCConnection.m_CurrentTransportType">
            <summary>
            store for m_CurrentTransportType
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCConnection.m_CurrentService">
            <summary>
            store for m_CurrentService
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCConnection.m_CurrentTimeoutSeconds">
            <summary>
            store for m_CurrentTimeoutSeconds
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCConnection.m_CurrentCompressionThreshold">
            <summary>
            store for m_CurrentCompressionThreshold
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCConnection.m_CurrentEncryptionType">
            <summary>
            store for m_CurrentEncryptionType
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCConnection.m_LastEncryptionType">
            <summary>
            store for the m_LastEncryptionType
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCConnection.m_IsActive">
            <summary>
            store for the m_IsActive
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCConnection.m_IsConnected">
            <summary>
            store for the m_IsConnected
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCConnection.m_IsClient">
            <summary>
            store for the isClient
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCConnection.m_IsEncryptionEnabled">
            <summary>
            store for the encription enable
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCConnection.m_Socket">
            <summary>
            store for the UniRPCSocket class instance
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCConnection.m_DataIn">
            <summary>
            store for the network input data
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCConnection.m_DataOut">
            <summary>
            store for the network output data
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCConnection.m_InPacket">
            <summary>
            store for Input Packet
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCConnection.m_OutPacket">
            <summary>
            store for Output Packet
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCConnection.m_ServerId">
            <summary>
            store for ServerID string
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCConnection.m_CurrentHostType">
            <summary>
            store for m_CurrentHostType
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCConnection.m_UseIPv6">
            <summary>
            
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniRPCConnection.OutPacket">
            <summary>
            Output UniRPCPacket Property
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniRPCConnection.InPacket">
            <summary>
            Input UniRPCPacket Property
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniRPCConnection.CompressionThreshold">
            <summary>
            CompressionThreshold property
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniRPCConnection.Connected">
            <summary>
            IsConnected property
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniRPCConnection.Host">
            <summary>
            Host Property
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniRPCConnection.Port">
            <summary>
            Port Property
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniRPCConnection.TransportType">
            <summary>
            TransportType Property
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniRPCConnection.Service">
            <summary>
            Service Property
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniRPCConnection.TimeoutSeconds">
            <summary>
            TimeoutSeconds Property
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniRPCConnection.IsServerAlive">
            <summary>
            IsServerAlive property.
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniRPCConnection.EncryptionType">
            <summary>
            EncryptionType Property
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniRPCConnection.IsActive">
            <summary>
            Active Property
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniRPCConnection.UseIPv6">
            <summary>
            
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniRPCConnection.ServerId">
            <summary>
            ServerId Property
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniRPCConnection.HostType">
            <summary>
            ServerId Property
            </summary>
        </member>
        <member name="T:IBMU2.UODOTNET.UniDictionary">
            <summary>
            <c>UniDictionary</c> is used to control access to UniVerse and Unidata dictionary
            files.  It is an extension of the standard <c>UniFile</c> class.
            </summary>
        </member>
        <member name="T:IBMU2.UODOTNET.UniFile">
            <summary>
            <c>UniFile</c>UniFile is used to access to all file operations.The UniFile object defines and manages a 
            data file on the server.
            </summary>
            <remarks>Use the UniFile Class for typical operations such as Open,Delete,Read, Write operations</remarks>
            <example> This sample shows how to use <c>UniFile</c> object.
            <code>
            [C#]
            using IBMU2.UODOTNET;
            using System.Text;
              class MyAppClass 
              {
                 public static void Main() 
                 {
                    try
                    {
            			UniSession us1 = UniObjects.OpenSession("localhost","ZZZ","XXX","HS.SALES","uvcs");
            			// open customer file
            			UniFile fl = us1.CreateUniFile("CUSTOMER");
            			// read records as unidataset
            			string [] sArray =  {"2","12","3","4"};
            			UniDataSet uSet = fl.ReadRecords(sArray); 
            			// use for each statement to print the record
            			foreach (UniRecord item in uSet) 
            			{
            				Console.WriteLine(item.ToString());
            			}
            		}
            		Catch (Exception ex)
            		{
            			//some error, display it 
            			Console.WriteLine(ex.Message);
            		}
            		finally
            		{
            			// no error
            			if(us1 != null)
            			{
            				UniObjects.CloseSession(us1);
            				us1= null;
            			}
            		}
                 }
              }
            [VB.NET]
            Option Explicit On 
            Option Strict On
            ' Add the classes in the following namespaces to our namespace
            Imports System
            Imports System.IO
            Imports System.Text
            Imports System.Collections
            Imports IBMU2.UODOTNET
            Class App
            	Public Shared Function Main(ByVal args() As String) As Integer
            	Dim us1 As UniSession = Nothing
            	Dim uSet As UniDataSet = Nothing
            	Dim fl As UniFile = Nothing
            	Try
            		Console.WriteLine("Program started... ")
            		us1 = UniObjects.OpenSession("localhost", "ZZZ", "xxxx", "HS.SALES", "uvcs")
            		' open customer file
            		fl = us1.CreateUniFile("CUSTOMER")
            		' read a record 
            		Dim ar_record As UniDynArray = fl.Read("2")
            		'read a field
            		Dim ar_record2 As UniDynArray = fl.ReadField("2", 7)
            		'read number of fields
            		Dim lFieldSet() As Integer = {4, 5, 6}
            		Dim ar_record3 As UniDynArray = fl.ReadFields("2", lFieldSet)
            		' read named field
            		Dim ar_record4 As UniDynArray = fl.ReadNamedField("2", "LNAME")
            		' read records as unidataset
            		Dim sArray As String() = {"2", "12", "3", "4"}
            		uSet = fl.ReadRecords(sArray)
            		' use for each statement to print the record
            		Dim item As UniRecord
            		For Each item In uSet
            			Console.WriteLine(item.ToString())
            		Next item
            	Catch e As Exception
            		If Not (us1 Is Nothing) Then
            			If (us1.IsActive) Then
            				UniObjects.CloseSession(us1)
            				us1 = Nothing
            			End If
            		End If
            		Console.WriteLine("")
            		Dim s As String
            		s = "Connection Failed : " + e.Message
            		Console.WriteLine(s)
            	Finally
            		If Not (us1 Is Nothing) Then
            			If (us1.IsActive) Then
            				Console.WriteLine("")
            				Dim s As String
            				s = "Connection Passed"
            				Console.WriteLine(s)
            				UniObjects.CloseSession(us1)
            				Console.WriteLine("Program finished... ")
            			End If
            		End If
            	End Try
            	Console.Read()
            	Return 0
            	End Function 'Main
            End Class 'App
            </code>
            </example>
        </member>
        <member name="F:IBMU2.UODOTNET.UniFile.THROW_EXCEPTION">
            <summary>
            Constant value for THROW_EXCEPTION flag
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniFile.NO_EXCEPTION">
            <summary>
            Constant value for NO_EXCEPTION flag
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniFile.CHECK_RECORD">
            <summary>
            Constant value for CHECK_RECORD flag
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniFile.NO_RECORD">
            <summary>
            Constant value for NO_RECORD flag
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.#ctor(IBMU2.UODOTNET.UniSession,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the UniFile class.
            </summary>
            <param name="pSession"> a UniSession Object</param>
            <param name="pFileName"> U2 File Name to be opened</param>
            <param name="pOption">a Dictionay Flag, 0 for normal files</param>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when UniFile() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.ClearFile">
            <summary>
            Clears a file, deleting all records contained within it.  If a file is locked by
            another user, the <c>BlockingStrategy</c>, which can be set with the 
            <c>BlockingStrategy</c> property, determines the behavior
            </summary>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when ClearFile() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.Close">
            <summary>
            Closes the file.  All file and record locks are released.
            </summary>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when Close() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.DeleteRecord">
            <summary>
            deletes the record identified by <c>RecordID</c> property.
            </summary>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when DeleteRecord() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.DeleteRecord(IBMU2.UODOTNET.UniDataSet)">
            <summary>
            Deletes the records identified by <c>aDataSet</c> UniDataSet object.
            </summary>
            <param name="aDataSet"><c>UniDataSet</c> object which identifies which record IDs to be deleted.</param>
            <returns></returns>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when DeleteRecord() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.DeleteRecord(System.String)">
            <summary>
            deletes the record identified by <c>aRecordIDObj</c>.
            </summary>
            <param name="aRecordIDObj">identifies which record ID is to be deleted.</param>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when DeleteRecord() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.GetAkInfo(System.String)">
            <summary>
             Obtains information concerning the secondary key indexes available for this
             object.  The return value will vary depending on the type of index, as follows:
            <list type="bullet">
            <item>
            <description>For D-Type indexes:  Field 1 contains D as first character and Field 2 
            								  contains the location number of the indexed field</description>
            </item>
            <item>
            <description>For I-type indexes:  Field 1 contains I as first character, Field 2 contains
            								  the I-type expression, and the compiled I-type resides
            								  in field 19 and onward.</description>
            </item>
            <item>
            <description>For both types:      2nd value of Field 1 indicates if the index needs to
            								  be rebuilt.  It is an empty string otherwise.
                                              3rd value of Field 1 is set if the index is null-suppressed.
                                              It is an empty string otherwise.
                                              4th value of Field 1 is set if automatic updates are
                                              disabled.  It is an empty string otherwise.
                                              6th value of Field 1 contains an S for single valued
                                              indices or M for a multivalued index.</description>
            </item>
            </list>
            If <c>akNameObj</c> is passed in as an empty string, then the list of
            available indices is returned
            </summary>
            <param name="akNameObj">name of the index to query about</param>
            <returns>UniDynArray Object</returns>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when GetAkInfo() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.Open">
            <summary>
            Opens the named file.
            </summary>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when Open() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.IsRecordLocked">
            <summary>
            Determines whether or not a user or session currently holds a lock on a given record ID.  
            </summary>
            <returns>representing whether the record is locked.</returns>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when IsRecordLocked() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.IsRecordLocked(System.String)">
            <summary>
            Determines whether or not a user or session currently holds a lock on a given record ID.  
            </summary>
            <param name="aRecordIDObj">represents the record ID to be checked.  </param>
            <returns>representing whether the record is locked.</returns>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when IsRecordLocked() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.iType(System.String,System.String)">
            <summary>
             Evalutes the specified I-descriptor and returns the evaluated string.  It applies
             no conversion to the data.
            </summary>
            <param name="aRecordID">record ID of the record supplied as data to the Itype facility</param>
            <param name="aITypeID">record ID of the Idescriptor record to be evaluated</param>
            <returns>representing the evaluated string</returns>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when iType() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.LockFile">
            <summary>
            Locks this UniVerse or UniData file.  If another user currently owns a lock, it will throw
            a UniFileException
            </summary>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when LockFile() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.LockRecord(System.Int32)">
            <summary>
            Locks the recordID established with the <c>RecordID</c>property.  
            This method is used to override the current locking strategy
            </summary>
            <param name="aLockFlag">Type of lock to set.  Valid values are: 
            <list type="bullet">
            <item><description>EXCLUSIVE_UPDATE (1) - Sets a READU lock</description></item>
            <item><description>SHARED_READ      (2) - Sets a READL lock</description></item>
            </list>
            </param>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when LockRecord() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.LockRecord(System.String,System.Int32)">
            <summary>
            Locks the recordID established with the <c>aRecordIDObj</c> argument..  
            This method is used to override the current locking strategy
            </summary>
            <param name="aRecordID">String denoting which record ID to lock</param>
            <param name="aLockFlag">Type of lock to set.  Valid values are: 
            <list type="bullet">
            <item>EXCLUSIVE_UPDATE (1) - Sets a READU lock</item>
            <item>SHARED_READ      (2) - Sets a READL lock</item>
            </list>
            </param>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when LockRecord() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.LockRecord(IBMU2.UODOTNET.UniDataSet,System.Int32)">
            <summary>
            Locks the recordIDs established with the <c>UniDataSet</c> object argument..  
            This method is used to override the current locking strategy
            </summary>
            <param name="aDataSet">UniDataSet denoting which record IDs to lock</param>
            <param name="aLockFlag">Type of lock to set.  Valid values are: 
            <list type="bullet">
            <item>EXCLUSIVE_UPDATE (1) - Sets a READU lock</item>
            <item>SHARED_READ      (2) - Sets a READL lock</item>
            </list>
            </param>
            <returns></returns>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when LockRecord() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.Read">
            <summary>
            Reads the UniVerse record from this file.  It uses the record ID established via
            the <c>RecordID</c> property.  
            </summary>
            <returns>Record Data as UniDynArray object</returns>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when Read() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.Read(System.String)">
            <summary>
            Reads the U2 record from this file.  It uses the record ID established via
            the <c>aRecordIDObj</c> argument that is passed in.  
            </summary>
            <param name="aRecordID">record ID to be read from the file</param>
            <returns>UniDynArray representing the data read</returns>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when Read() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.ReadField(System.Int32)">
            <summary>
            Reads the specified field from the UniVerse record identified.  It uses the record ID 
            established via the <c>RecordID</c>property. It will 
            return only the field number specified in <c>aFieldNumber</c>.
            </summary>
            <param name="aFieldNumber">value representing which field is to be read</param>
            <returns>UniDynArray representing the data read</returns>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when ReadField() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.ReadField(System.String,System.Int32)">
            <summary>
            Reads the specified field from the UniVerse record identified.  It uses the record ID 
            established via the <c>aRecordIDObj</c> argument that is passed in. It will 
            return only the field number specified in <c>aFieldNumber</c>.
            </summary>
            <param name="aRecordID">record ID to be read from the file</param>
            <param name="aFieldNumber">value representing which field is to be read</param>
            <returns>UniDynArray representing the data read</returns>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when ReadField() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.ReadFields(System.Int32[])">
            <summary>
            Reads the specified array of fields from the U2 record identified.  It uses the record ID 
            established via the <c>RecordID</c> property. It will 
            return only the field numbers specified in <c>aFieldNumber[]</c>.
            </summary>
            <param name="aFieldNumberSet">array of field numbers</param>
            <returns>UniDynArray representing the data read</returns>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when ReadField() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.ReadFields(System.String,System.Int32[])">
            <summary>
            Reads the specified array of fields from the U2 record identified.  It uses the record ID 
            established via the <c>aRecordID</c> argument that is passed in. It will 
            return only the field numbers specified in <c>aFieldNumber[]</c>.
            </summary>
            <param name="aRecordID">record ID to be read from the file</param>
            <param name="aFieldNumberSet">array of field numbers</param>
            <returns>UniDynArray representing the data read</returns>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when ReadField() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.ReadNamedField(System.String)">
            <summary>
            Reads the field identifed by the named field in <c>aFieldName</c>.  It
            does this by extracting the physical field number from the dictionary associated
            with this file, and then performs a <c>ReadField</c> on that field.  It will
            use the record ID established via the <c>RecordID</c> property
            </summary>
            <param name="aFieldName">name of the field in the dictionary to use as the field number</param>
            <returns>UniDynArray representing the data read</returns>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when ReadNamedField() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.ReadNamedField(System.String,System.String)">
            <summary>
            Reads the field identifed by the named field in <c>aFieldName</c>.  It
            does this by extracting the physical field number from the dictionary associated
            with this file, and then performs a <c>readField</c> on that field.It will
            use the record ID established via the <c>aRecordID</c> argument that is passed in
            </summary>
            <param name="aRecordID">record ID to be read</param>
            <param name="aFieldName">name of the field in the dictionary to use as the field number</param>
            <returns>UniDynArray representing the data read</returns>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when ReadNamedField() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.ReadNamedFields(System.String[])">
            <summary>
            Reads the array of fields identifed by the named field in <c>pFieldNames[]</c>.  It
            does this by extracting the physical field number from the dictionary associated
            with this file, and then performs a <c>readField</c> on that field.  It will
            use the record ID established via the <c>RecordID</c> property
            </summary>
            <param name="pFieldNames">array of name of the field in the dictionary to use as the field number</param>
            <returns>UniDynArray representing the data read</returns>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when ReadNamedFields() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.ReadNamedFields(System.String,System.String[])">
            <summary>
            Reads the array of fields identifed by the named field in <c>pFieldName[]</c>.  It
            does this by extracting the physical field number from the dictionary associated
            with this file, and then performs a <c>ReadField</c> on that field.It will
            use the record ID established via the <c>pRecordID</c> argument that is passed in
            </summary>
            <param name="pRecordID">record ID to be read</param>
            <param name="pFieldNames">array of name of the field in the dictionary to use as the field number</param>
            <returns>UniDynArray representing the data read</returns>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when ReadNamedFields() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.ReadRecords(System.String[],System.String[])">
            <summary>
            Reads the specified array of fields <c>aFieldNameSet</c>from the set of U2 record ID 
            passed in as argument<c>aRecordIDSet</c>. 
            </summary>
            <param name="aRecordIDSet">array of record id</param>
            <param name="aFieldNameSet">array of field names</param>
            <returns>UniDataSet representing the data read</returns>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when ReadRecords() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.ReadRecords2(System.String[],System.String[])">
            <summary>
            
            </summary>
            <param name="aRecordIDSet"></param>
            <param name="aFieldNameSet"></param>
            <returns></returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.ReadRecords(System.String[],System.String[],System.Int32)">
            <summary>
            
            </summary>
            <param name="aRecordIDSet"></param>
            <param name="aFieldNameSet"></param>
            <param name="optionalRecordSeparator"></param>
            <returns></returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.ReadRecords(System.String[],System.Int32[])">
            <summary>
            Reads the specified array of fields <c>aFieldNameSet</c>from the set of U2 record ID 
            passed in as argument<c>aRecordIDSet</c>. 
            </summary>
            <param name="aRecordIDSet">array of record id</param>
            <param name="aFieldNameSet">array of field names</param>
            <returns>UniDataSet representing the data read</returns>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when ReadRecords() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.ReadRecords(System.String[],System.Int32[],System.Int32)">
            <summary>
            
            </summary>
            <param name="aRecordIDSet"></param>
            <param name="aFieldNameSet"></param>
            <param name="optionalRecordSeparator"></param>
            <returns></returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.ReadRecords2(System.String[],System.Int32[])">
            <summary>
            
            </summary>
            <param name="aRecordIDSet"></param>
            <param name="aFieldNameSet"></param>
            <param name="optionalRecordSeparator"></param>
            <returns></returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.ReadRecords(System.String[])">
            <summary>
            Rreads the set of U2 records passed in via the array of record ids.  This
            string[] object should contain the list of record IDs to be read from this file.
            </summary>
            <param name="aRecordIDSet">list of record IDs to be read from this file</param>
            <returns>UniDataSet representing the data read</returns>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when ReadRecords() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.ReadRecords2(System.String[])">
            <summary>
            
            </summary>
            <param name="aRecordIDSet"></param>
            <returns></returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.ReadRecords(System.String[],System.Int32)">
            <summary>
            
            </summary>
            <param name="aRecordIDSet"></param>
            <param name="optionalRecordSeparator"></param>
            <returns></returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.UnlockFile">
            <summary>
            Unlocks the file.   
            </summary>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when ReadRecords() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.UnlockRecord">
            <summary>
            Unlocks the recordID established with the <c>RecordID</c>property.  
            </summary>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when UnlockRecord() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.UnlockRecord(System.String)">
            <summary>
            Unlocks the recordID established with the <c>aRecordID</c> parameter.  
            </summary>
            <param name="aRecordID">record id to be unlocked</param>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when UnlockRecord() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.UnlockRecord(System.String[])">
            <summary>
            Unlocks the recordIDs established with the <c>aRecordIDSet</c> object argument..  
            </summary>
            <param name="aRecordIDSet">a set of record id</param>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when UnlockRecord() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.Write">
            <summary>
            Used to write the data specified with the <c>Record</c> and <c>RecordID</c>
            properties into the file.  After completion, the <c>FileStatus</c> property can be used
            to determine the results of the operation.  A 0 indicates the record was locked, a -2
            indicates it was not locked 
            </summary>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when Write() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.Write(System.String,IBMU2.UODOTNET.UniDynArray)">
            <summary>
            Used to write the data specified with the <c>aRecordID</c> and <c>aRecordData</c>
            parameters into the file.  After completion, the <c>FileStatus</c> method can be used
            to determine the results of the operation.  A 0 indicates the record was locked, a -2
            indicates it was not locked 
            </summary>
            <param name="aRecordID">record ID that is to be written</param>
            <param name="aRecordData">record data that is to be written</param>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when Write() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.Write(System.String,System.String)">
            <summary>
            Used to write the data specified with the <c>aRecordID</c> and <c>aRecordData</c>
            parameters into the file.  After completion, the <c>FileStatus</c> method can be used
            to determine the results of the operation.  A 0 indicates the record was locked, a -2
            indicates it was not locked 
            </summary>
            <param name="aRecordID">record ID that is to be written</param>
            <param name="aRecordData">record data that is to be written</param>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when Write() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.WriteField(System.Int32)">
            <summary>
            Used to write the data specified with the <c>Record</c> and <c>RecordID</c>
            properties into the file, but only the field specified.  After completion, the <c>FileStatus</c> 
            method can be used to determine the results of the operation.  A 0 indicates the record was locked,
            a -2 indicates it was not locked 
            </summary>
            <param name="uniFieldNumber">Field Number that is to be written</param>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when WriteField() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.WriteField(System.String,System.Int32,IBMU2.UODOTNET.UniDynArray)">
            <summary>
            Used to write the data specified with the <c>aRecordID</c> and <c>aRecordData</c> 
            parameters into the file , but only the field specified.After completion, the <c>status</c> 
            method can be used  to determine the results of the operation. A 0 indicates the record was 
            locked, a -2 indicates it was not locked 
            </summary>
            <param name="aRecordID">record ID that is to be written</param>
            <param name="aFieldNumber">Field Number that is to be written</param>
            <param name="aRecordData">Record Data that is to be written</param>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when WriteField() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.WriteField(System.String,System.Int32,System.String)">
            <summary>
            Used to write the data specified with arguments the <c>aRecordID</c> and 
            <c>aRecordData</c>, but only the field specified.After completion, the <c>FileStatus</c> 
            method can be used  to determine the results of the operation. A 0 indicates the record was 
            locked, a -2 indicates it was not locked 
            </summary>
            <param name="aRecordID">record ID that is to be written</param>
            <param name="aFieldNumber">Field Number that is to be written</param>
            <param name="aRecordData">Record Data that is to be written</param>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when WriteField() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.WriteField(System.Int32,System.String)">
            <summary>
            Used to write the data specified with the <c>RecordID</c>property into the file, but only 
            the field specified and passed in Record Data<c>aRecordData</c>.  After completion, 
            the <c>FileStatus</c> method can be used  to determine the results of the operation.  
            A 0 indicates the record was locked, a -2 indicates it was not locked 
            </summary>
            <param name="aFieldNumber">field to be written</param>
            <param name="aRecordData">record data  to be written</param>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when WriteField() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.WriteField(System.Int32,IBMU2.UODOTNET.UniDynArray)">
            <summary>
            used to write the data specified with the <c>RecordID</c> property into the file, but only 
            the field specified and passed in Record Data  <c>aRecordData</c>.  After completion, 
            the <c>Filestatus</c> method can be used  to determine the results of the operation.  
            A 0 indicates the record was locked, a -2 indicates it was not locked 
            </summary>
            <param name="aFieldNumber">field to be written</param>
            <param name="aRecordData">record data  to be written</param>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when WriteField() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.WriteField(System.String,System.Int32)">
            <summary>
            used to write the data specified with the <c>Record</c>property into the file, but only 
            the field specified and passed in Record ID <c>aRecordID</c>.  After completion, 
            the <c>FileStatus</c> method can be used  to determine the results of the operation.  
            A 0 indicates the record was locked, a -2 indicates it was not locked 
            </summary>
            <param name="aRecordID">record ID that is to be written</param>
            <param name="aFieldNumber">field to be written</param>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when WriteField() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.WriteNamedField(System.String,IBMU2.UODOTNET.UniDynArray)">
            <summary>
            Used to write the data specified with <c>aRecordData</c>
            parameters into the file, but only the name field specified. It uses the record ID established via
            the <c>RecordID</c> property. The Named Field is extracted from the files Dictionary. 
            After completion, the <c>FileStatus</c> method can be used to determine the results of 
            the operation.  A 0 indicates the record was locked, a -2 indicates it was not locked 
            </summary>
            <param name="aFieldName">name of the field that is to be written</param>
            <param name="aRecordData">data to be written to that field</param>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when WriteNamedField() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.WriteNamedField(System.String,System.String)">
            <summary>
            Used to write the data specified with <c>aRecordData</c>
            parameters into the file, but only the name field specified. It uses the record ID established via
            the <c>RecordID</c> property. The Named Field is extracted from the files Dictionary. 
            After completion, the <c>FileStatus</c> method can be used to determine the results of 
            the operation.  A 0 indicates the record was locked, a -2 indicates it was not locked 
            </summary>
            <param name="aFieldName">name of the field that is to be written</param>
            <param name="aRecordData">data to be written to that field</param>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when WriteNamedField() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.WriteNamedField(System.String,System.String,IBMU2.UODOTNET.UniDynArray)">
            <summary>
            Used to write the data specified with the <c>aRecordID</c> and <c>aRecordData</c>
            parameters into the file, but only the name field specified.  The Named Field
            is extracted from the files Dictionary. After completion, the <c>FileStatus</c> method can be used
            to determine the results of the operation.  A 0 indicates the record was locked, a -2
            indicates it was not locked 
            </summary>
            <param name="aRecordID">record ID that is to be written</param>
            <param name="aFieldName">name of the field that is to be written</param>
            <param name="aRecordData">data to be written to that field</param>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when WriteNamedField() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.WriteFields(System.Int32[])">
            <summary>
            Used to write the data specified with the <c>Record</c> and <c>RecordID</c>
            properties into the file, but only the array of fields specified.  After completion, 
            the <c>FileStatus</c> method can be used to determine the results of the operation.  
            A 0 indicates the record was locked, a -2 indicates it was not locked 
            </summary>
            <param name="aFieldNumberSet">array of fields to be written</param>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when WriteFields() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.WriteFields(System.String,System.Int32[])">
            <summary>
            Used to write the data specified with the <c>aRecID</c> parameters into the file, 
            but only the array of fields specified <c>aFieldNumberSet</c>.  It uses record data
            specified in <c>Reocrd</c> property.After completion, the <c>FileStatus</c> method can 
            be used to determine the results of the operation.  A 0 indicates the record was locked, a -2
            indicates it was not locked 
            </summary>
            <param name="aRecID">record ID that is to be written</param>
            <param name="aFieldNumberSet">array of fields</param>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when WriteFields() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.WriteFields(System.String,System.Int32[],IBMU2.UODOTNET.UniDynArray)">
            <summary>
            Used to write the data specified with the <c>aRecID</c> and <c>aRecordData</c>
            parameters into the file, but only the array of fields specified <c>aFieldNumberSet</c>.
            After completion, the <c>FileStatus</c> method can be used
            to determine the results of the operation.  A 0 indicates the record was locked, a -2
            indicates it was not locked 
            </summary>
            <param name="aRecID">record ID that is to be written</param>
            <param name="aFieldNumberSet">array of fields</param>
            <param name="aRecordData">a record data</param>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when WriteFields() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.WriteNamedFields(System.String[])">
            <summary>
            Used to write the data specified with the <c>Record</c> and <c>RecordID</c>
            properties into the file, but only array of the name fields specified.  After completion, the <c>FileStatus</c> 
            method can be used to determine the results of the operation.  A 0 indicates the record was locked,
            a -2 indicates it was not locked 
            </summary>
            <param name="aFieldNameSet">Field Number that is to be written</param>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when WriteNamedFields() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.WriteNamedFields(System.String,System.String[])">
            <summary>
            Used to write the data specified with the <c>Record</c>property into the file, but only 
            array of name  fields specified and passed in Record ID <c>aRecordID</c>.  After completion, 
            the <c>FileStatus</c> method can be used  to determine the results of the operation.  
            A 0 indicates the record was locked, a -2 indicates it was not locked 
            </summary>
            <param name="aRecID">record ID that is to be written</param>
            <param name="aFieldNameSet">field to be written</param>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when WriteNamedFields() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.WriteNamedFields(System.String,System.String[],IBMU2.UODOTNET.UniDynArray)">
            <summary>
            Used to write the data specified with the <c>aRecordID</c> and <c>aRecordData</c>
            parameters into the file, but only array of name fields specified.  The Named Field
            is extracted from the files Dictionary. After completion, the <c>FileStatus</c> method can be used
            to determine the results of the operation.  A 0 indicates the record was locked, a -2
            indicates it was not locked 
            </summary>
            <param name="aRecID">record ID that is to be written</param>
            <param name="aFieldNameSet">name of the field that is to be written</param>
            <param name="aRecordData">data to be written to that field</param>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when WriteNamedFields() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.WriteRecords(IBMU2.UODOTNET.UniDataSet)">
            <summary>
            Used to write the data specified with the <c>aDataSet</c> 
            parameters into the file.  After completion, the returned UniDataSet object can be used
            to determine the results of the operation.  A 0 indicates the record was locked, a -2
            indicates it was not locked 
            </summary>
            <param name="aDataSet">UniDataSet object representing the data that is to be written</param>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when WriteRecords() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.WriteRecords(System.String[],IBMU2.UODOTNET.UniDataSet)">
            <summary>
            Used to write the data specified with the <c>aDataSet</c> 
            parameters into the file and specified array of field names. After completion, 
            the returned UniDataSet object can be used to determine the results of the operation.
            A 0 indicates the record was locked, a -2 indicates it was not locked 
            </summary>
            <param name="aFieldNameSet">array of fields to be written</param>
            <param name="aDataSet">UniDataSet object representing the data that is to be written</param>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when WriteRecords() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.WriteRecords(System.Int32[],IBMU2.UODOTNET.UniDataSet)">
            <summary>
            Used to write the data specified with the <c>aDataSet</c> 
            parameters into the file and specified array of field names. After completion, 
            the returned UniDataSet object can be used to determine the results of the operation.
            A 0 indicates the record was locked, a -2 indicates it was not locked 
            </summary>
            <param name="aFieldNumberSet">array of fields to be written</param>
            <param name="aDataSet">UniDataSet object representing the data that is to be written</param>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when WriteRecords() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.FindWriteLock">
            <summary>
            Returns the appropriate lock type, given the current locking parameters.   
            </summary>
            <returns>lock type to be used for this operation</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.UnLock">
            <summary>
            Reduces the current number of locks held counter.   
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.Lock">
            <summary>
            Increments the current lock count by one, if locking is set on .  
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.DoReadRelease">
            <summary>
            Checks to see whether the given record should be released after being read .  
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.SingleRelease">
            <summary>
            Releases a single record   .
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.ReleaseLock(System.String,System.Int32)">
            <summary>
            Unlocks the RecordID established with the <c>RecordID</c>property.  
            </summary>
            <param name="aRecordID">Record ID to be unlocked</param>
            <param name="aClearFlag">Representing whether or not to clear all the records</param>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when ReleaseLock() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.DoOnChangeRelease">
            <summary>
            checks to see whether the given record should be released after being changed   
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.FindDeleteLock">
            <summary>
            Returns the appropriate lock type, given the current locking parameters   
            </summary>
            <returns>Lock type to be used for this operation</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.FindReadLock">
            <summary>
            Returns the appropriate lock type, given the current locking parameters   
            </summary>
            <returns>Lock type to be used for this operation</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFile.CheckEntryConditions(System.Boolean,System.Boolean)">
            <summary>
            checks entry conditions to make sure we can perform this operation
            checks to make sure that the file is open, that we are not within
            an active UniCommand.exec() state, Record ID is valid or not
            </summary>
            <param name="shouldThrow">flag indicates Exception will be thrown</param>
            <param name="checkForRecord">flag indicates to check Record ID or not</param>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when CheckEntryConditions() fails.</exception>
        </member>
        <member name="F:IBMU2.UODOTNET.UniFile.m_FileEncryptionType">
            <summary>
            Store for UniFile Encryption Type
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniFile.m_UniFileHandle">
            <summary>
            Store for UniFile Handle
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniFile.m_Session">
            <summary>
            Store for associated UniSession Object
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniFile.m_UniFileName">
            <summary>
            Store for UniFile Name
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniFile.m_UniRecordID">
            <summary>
            Store for Record ID
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniFile.m_UniRecord">
            <summary>
            Store for Data Record
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniFile.m_UniFileLockFlag">
            <summary>
            Store for UniFile Lock Flag
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniFile.m_UniFileDictFlag">
            <summary>
            Store for UniFile Dictionary Falg
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniFile.m_UniFileType">
            <summary>
            Store for UniFile Type
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniFile.m_UniFileReturnCode">
            <summary>
            Store for UniFile Return Code
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniFile.m_UniFileLockCount">
            <summary>
            Store for UniFile Lock Count
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniFile.m_UniFileReleaseStrategy">
            <summary>
            Store for UniFile Release Strategy
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniFile.m_UniFileLockStrategy">
            <summary>
            Store for UniFile Lock Strategy
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniFile.m_UniFileBlockingStrategy">
            <summary>
            Store for UniFile Block Strategy
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniFile.m_IsFileOpen">
            <summary>
            Store for File Open Flag
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniFile.m_UniFileStatus">
            <summary>
            Store for UniFile Object Status
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniFile.IsFileOpen">
            <summary>
            Denotes whether the file is open.  A <c>true</c> value indicates the file is
            still open for use, a <c>false</c> indicates the file is closed and unavailable until reopened.
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniFile.UniFileBlockingStrategy">
             <summary>
             Gets or Sets UniFile Blocking Strategy
             </summary>
            <remarks>The initial value is inherited from the
             <c>UniSession.BlockingStrategy</c> property.  Valid values are:
             <list type="bullet">
             <item>
             <description>WAIT_ON_LOCKED (1)   - If the record is locked, wait until it is released.</description>
             </item>
             <item>
             <description>RETURN_ON_LOCKED (2) - Return a value to <c>FileStatus</c> to indicate	the state of the lock.</description>
             </item>
             </list>
            </remarks>
             <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when setting value is invalid.</exception>
        </member>
        <member name="P:IBMU2.UODOTNET.UniFile.UniFileLockStrategy">
             <summary>
             Gets or Sets UniFile Lock Strategy
             </summary>
            <remarks>The initial value is inherited from the
             <c>UniSession.LockStrategy</c> property.  Valid values are:
             <list type="bullet">
             <item>
             <description>NO_LOCKS (0)  - No locking is to be done by default.</description>
             </item>
             <item>
             <description>EXCLUSIVE_UPDATE - Sets an exclusive update lock (READU) for all file access.</description>
             </item>
             <item>
             <description>SHARED_READ - Sets a shared lock (READL) for all file access.</description>
             </item>
             </list>
            </remarks>
             <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when setting value is invalid.</exception>
        </member>
        <member name="P:IBMU2.UODOTNET.UniFile.UniFileReleaseStrategy">
             <summary>
             Gets or Sets UniFile Release Strategy
             </summary>
            <remarks>The initial value is inherited from the
             <c>UniSession.ReleaseStrategy</c> property.  Valid values are:
             <list type="bullet">
             <item>
             <description>WRITE_RELEASE (1)	- Release the lock when the record is written.</description>
             </item>
             <item>
             <description>READ_RELEASE  (2)	- Release the lock when the record is read.</description>
             </item>
             <item>
             <description>EXPLICIT_RELEASE (4) - maintains locks as specified by the <c>UniFileLockStrategy</c>
            										property.  Locks can only be released with the 
            										 <c>UnlockRecord</c> method.</description>
             </item>
             <item>
             <description>CHANGE_RELEASE (8) -	releases the lock whenever a new value is set using the
            										<c>RecordID</c> property.</description>
             </item>
             </list>
            </remarks>
             <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when setting value is less than 0 or greater than 15.</exception>
        </member>
        <member name="P:IBMU2.UODOTNET.UniFile.FileStatus">
            <summary>
             Gets the status of the last method performed on this object
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniFile.EncryptionType">
            <summary>
            Gets or Sets Encryption Type
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniFile.RecordID">
            <summary>
            Returns the ID of the record that was last read.  It is updated every time
            a <c>Read</c>, <c>ReadField</c>, or <c>ReadNamedField</c> is performed. 
            Set the record ID of the record to be read
            </summary>
            <exception cref="T:IBMU2.UODOTNET.UniFileException">Thrown when RecordID property fails.</exception>
        </member>
        <member name="P:IBMU2.UODOTNET.UniFile.Record">
            <summary>
            Gets the contents of the record that was last read as UniDynArray.  It is updated every time
            a <c>Read</c>, <c>ReadField</c>, or <c>ReadNamedField</c> is performed. 
            
            Sets the data portion of the record, primarily to be used for subsequent 
            <c>Write</c> methods.
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniFile.RecordString">
            <summary>
            Gets the contents of the record that was last read as String.  It is updated every time
            a <c>Read</c>, <c>ReadField</c>, or <c>ReadNamedField</c> is performed. 
            
            Sets the data portion of the record, primarily to be used for subsequent 
            <c>Write</c> methods.
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniFile.FileName">
            <summary>
            Gets UniFile Name
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniFile.FileType">
            <summary>
            Gets the type of file this is.  The file is either a static hashed (2-18),
            directory (1 or 19), b-tree (25), or dynamic (30).
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniFile.FileHandle">
            <summary>
            Gets UniFile Handle
            </summary>
            <value>FileHandle accesses the value of the m_UniFileHandle data member</value>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDictionary.#ctor(IBMU2.UODOTNET.UniSession,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the UniDictionary class.
            </summary>
            <param name="pSession">UniSession Object</param>
            <param name="pFileName">U2 File Name to be opened</param>
            <param name="pOption">a Dictionay Flag, 0 for normal files</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDictionary.GetAssoc">
            <summary>
            Returns the current ASSOC field from the dictionary.
            </summary>
            <returns>UniDynArray Object representing the ASSOC field</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDictionary.SetAssoc(IBMU2.UODOTNET.UniDynArray)">
            <summary>
            Sets the ASSOC field from the dictionary to the UniDynArray passed in. It uses Record ID from
            the <c>RecordID</c> property.
            </summary>
            <param name="aString">a UniDynArray representing the new value of the ASSOC field </param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDictionary.SetAssoc(System.String,IBMU2.UODOTNET.UniDynArray)">
            <summary>
            Sets the ASSOC field from the dictionary to the UniDynArray passed in. It uses passed 
            Record ID.
            </summary>
            <param name="aRecordID">a String representing the RecordID to be modified</param>
            <param name="aString">String representing the new value of the ASSOC field</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDictionary.GetConv">
            <summary>
            Returns the current CONV field from the dictionary.It uses Record ID from
            the <c>RecordID</c> property.
            </summary>
            <returns>UniDynArray representing the CONV field</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDictionary.GetConv(System.String)">
            <summary>
            Returns the current CONV field from the dictionary for the RecordID specified.
            </summary>
            <param name="aRecordID">a String representing the RecordID to be examined</param>
            <returns>UniDynArray representing the CONV field</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDictionary.SetConv(IBMU2.UODOTNET.UniDynArray)">
            <summary>
            Sets the CONV field from the dictionary to the UniDynArray passed in.It uses Record ID from
            the <c>RecordID</c> property.
            </summary>
            <param name="aString">a UniDynArray representing the new value of the CONV field</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDictionary.SetConv(System.String,IBMU2.UODOTNET.UniDynArray)">
            <summary>
            Sets the CONV field for the specified RecordID from the dictionary to the UniDynArray passed in.
            </summary>
            <param name="aRecordID">a String representing the recordID from the dictionary to modify</param>
            <param name="aString">a UniDynArray representing the new value of the CONV field</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDictionary.GetFormat">
            <summary>
            Returns the current FORMAT field from the dictionary.
            </summary>
            <returns>a UniDynArray representing the FORMAT field</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDictionary.GetFormat(System.String)">
            <summary>
            Returns the current FORMAT field from the dictionary for the RecordID specified.
            </summary>
            <param name="aRecordID">a String representing which RecordID to examine</param>
            <returns>a a UniDynArray representing the FORMAT field representing the FORMAT field</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDictionary.SetFormat(IBMU2.UODOTNET.UniDynArray)">
            <summary>
            Sets the FORMAT field from the dictionary to the UniDynArray passed in.
            </summary>
            <param name="aString">a UniDynArray representing the new value of the FORMAT field</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDictionary.SetFormat(System.String,IBMU2.UODOTNET.UniDynArray)">
            <summary>
            Sets the FORMAT field for the RecordID specified from the dictionary to the String passed in.
            </summary>
            <param name="aRecordID">a String representing the RecordID from the dictionary to modify</param>
            <param name="aString">a UniDynArray representing the new value of the FORMAT field</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDictionary.GetLoc">
            <summary>
            Returns the current LOC field from the dictionary.
            </summary>
            <returns>a UniDynArray representing the LOC field</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDictionary.GetLoc(System.String)">
            <summary>
            Returns the current LOC field from the dictionary for the RecordID specified.
            </summary>
            <param name="aRecordID">a String representing which RecordID to examine</param>
            <returns>a UniDynArray representing the LOC field</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDictionary.SetLoc(IBMU2.UODOTNET.UniDynArray)">
            <summary>
            Sets the LOC field from the dictionary to the UniDynArray passed in.
            </summary>
            <param name="aString">a UniDynArray representing the new value of the LOC field</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDictionary.SetLoc(System.String,IBMU2.UODOTNET.UniDynArray)">
            <summary>
            Sets the LOC field for the recordID specified from the dictionary to the UniDynArray passed in.
            </summary>
            <param name="aRecordID">a String representing the RecordID from the dictionary to modify</param>
            <param name="aString">a UniDynArray representing the new value of the LOC field</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDictionary.GetName">
            <summary>
            Returns the current NAME field from the dictionary.
            </summary>
            <returns>a UniDynArray representing the NAME field</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDictionary.GetName(System.String)">
            <summary>
            Returns the current NAME field from the dictionary for the RecordID specified.
            </summary>
            <param name="aRecordID">a String representing which recordID from the dictionary to examine</param>
            <returns>a UniDynArray representing the NAME field</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDictionary.SetName(IBMU2.UODOTNET.UniDynArray)">
            <summary>
            Sets the NAME field from the dictionary to the String passed in.
            </summary>
            <param name="aString">a UniDynArray representing the new value of the NAME field</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDictionary.SetName(System.String,IBMU2.UODOTNET.UniDynArray)">
            <summary>
            Sets the NAME field for the RecordID specified from the dictionary to the String passed in.
            </summary>
            <param name="aRecordID">a String representing which recordID from the dictionary to modify</param>
            <param name="aString">a UniDynArray representing the new value of the NAME field</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDictionary.GetSM">
            <summary>
            Returns the current SM field (single/multivalued) from the dictionary.
            </summary>
            <returns>a UniDynArray representing the SM field</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDictionary.GetSM(System.String)">
            <summary>
            Returns the current SM field (single/multivalued) from the dictionary for the field specified.
            </summary>
            <param name="aRecordID">a String representing which recordID to examine</param>
            <returns>a UniDynArray representing the SM field</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDictionary.SetSM(IBMU2.UODOTNET.UniDynArray)">
            <summary>
            Sets the SM (single/multivalued) field from the dictionary to the UniDynArray passed in.
            </summary>
            <param name="aString">a UniDynArray representing the new value of the SM field</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDictionary.SetSM(System.String,IBMU2.UODOTNET.UniDynArray)">
            <summary>
            Sets the SM (single/multivalued) field for the RecordID specified from the dictionary 
            to the String passed in.
            </summary>
            <param name="aRecordID">a String representing which dictionary recordID to modify</param>
            <param name="aString">a UniDynArray representing the new value of the SM field</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDictionary.GetSQLType">
            <summary>
            Returns the current SQLTYPE field from the dictionary.
            </summary>
            <returns>a UniDynArray representing the SQLTYPE field</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDictionary.GetSQLType(System.String)">
            <summary>
            Returns the current SQLTYPE field from the dictionary for the field specified.
            </summary>
            <param name="aRecordID">a String representing which recordID to examine</param>
            <returns>a UniDynArray representing the SQLTYPE field</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDictionary.SetSQLType(IBMU2.UODOTNET.UniDynArray)">
            <summary>
            Sets the SQLTYPE field from the dictionary to the String passed in.
            </summary>
            <param name="aString">a UniDynArray representing the new value of the SQLTYPE field</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDictionary.SetSQLType(System.String)">
            <summary>
            Sets the SQLTYPE field from the dictionary to the String passed in.
            </summary>
            <param name="aString">a string representing the new value of the SQLTYPE field</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDictionary.SetSQLType(System.String,IBMU2.UODOTNET.UniDynArray)">
            <summary>
            Sets the SQLTYPE field for the RecordID specified from the dictionary to the String passed in.
            </summary>
            <param name="aRecordID">a String representing which dictionary recordID to modify</param>
            <param name="aString">a UniDynArray representing the new value of the SQLTYPE field</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDictionary.SetSQLType(System.String,System.String)">
            <summary>
            Sets the SQLTYPE field for the RecordID specified from the dictionary to the String passed in.
            </summary>
            <param name="aRecordID">a String representing which dictionary recordID to modify</param>
            <param name="aString">a String representing the new value of the SQLTYPE field</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDictionary.GetFieldType(System.String)">
            <summary>
            Returns the current TYPE field from the dictionary.
            </summary>
            <param name="aRecordID">a String representing which RecordID to examine</param>
            <returns>a UniDynArray representing the TYPE field</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDictionary.GetFieldType">
            <summary>
            Returns the current TYPE field from the dictionary.
            </summary>
            <returns>a UniDynArray representing the TYPE field</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDictionary.SetType(IBMU2.UODOTNET.UniDynArray)">
            <summary>
            Sets the TYPE field from the dictionary to the UniDynArray passed in.
            </summary>
            <param name="aString">a UniDynArray representing the new value of the TYPE field</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDictionary.SetType(System.String,IBMU2.UODOTNET.UniDynArray)">
            <summary>
            Sets the TYPE field for the RecordID specified from the dictionary to the UniDynArray passed in.
            </summary>
            <param name="aRecordID">a String representing which RecordID to examine</param>
            <param name="aString">a UniDynArray representing the new value of the TYPE field</param>
        </member>
        <member name="T:IBMU2.UODOTNET.UniRPCPMessage">
             <summary>
             UniRPCPMessage is a class which builds and transfers the message information 
             for a UniRPC data packet.
            
            
             Version 2, UniRPC Message Packet structure.
             |--------16 Bits---------|
             |--------------------32 Bits----------------------|
             ===================================================
             |-------Version----------|--------SeqNo-----------|\
             |---------------------Length----------------------| \
             |----------------------Type-----------------------|  \ Message Header - 24 Bytes
             |-High Ver.--|--C. Mask--|--E. Mask--|---Future---|  /
             |-------------------Return code-------------------| /
             |-------Arg Count--------|------Proc Length-------|/
             ===================================================
             |----------Procedure name (unformated)------------|\
             |-------------------::::::::::--------------------| \
             |------------------Arg 1 Length-------------------|  \
             |-------------------Arg 1 Type--------------------|   \
             |-------------------::::::::::--------------------|    \ Message Body - (Length) Bytes
             |------------------Arg n Length-------------------|    /
             |-------------------Arg n Type--------------------|   /
             |---------------Arg 1 Data (unformated)-----------|  /
             |-------------------::::::::::--------------------| /
             |---------------Arg n Data (unformated)-----------|/
             ===================================================
             Important notes about how different data types are stored.
             1)Arg Length contains the number of data items or the length of a data item.
              For integers and integer arrays, the number.
              For doubles and double arrays, the number.
              For char*'s, UniString's and Procedure name's, the length.
             2)For all encrypted data items, only the data itself is encrypted. The 
               length and argument type are not encrypted.
             3)Procedure names are not currently supported. 
             </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCPMessage.m_UNIRPC_HEADER_SIZE">
            <summary>
            packet header size
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCPMessage.m_UNIRPC_DEFAULT_PACKET_TYPE">
            <summary>
            Default Packet type( currently this header field is not used)
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCPMessage.m_UNIRPC_MAX_PACKET_ARGS">
            <summary>
            Maximum number of arguments allowed per packet
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCPMessage.m_UNIRPC_DEFAULT_DATA_SIZE">
            <summary>
            default byte size of the data portion of a UniRPC packet.	
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCPMessage.m_UNIRPC_INT_LENGTH">
            <summary>
            integer argument length
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCPMessage.m_UNIRPC_DOUBLE_LENGTH">
            <summary>
            double argument length
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCPMessage.m_UNIRPC_UNCOMPRESSED">
            <summary>
            un compression used
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCPMessage.m_UNIRPC_COMPRESSED">
            <summary>
            compression used
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPMessage.GetLength(System.Byte)">
            <summary>
            Get the total number of bytes to be transmitted by this message Object.
            This value reflects any data encryption and compression that is to be
            performed.It is very important that this method is only called immediately before
            calling the <code>send()</code> method. If arguments are written to this message
             after calling <code>GetLength()</code>, those arguments will be lost and never
             transmitted to the remote RPC library. There also may be other 
             undesirable side affects. 
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPMessage.Encrypt(System.Byte)">
            <summary>
             Encrypt the data message about to be transmitted.
            The compress method must also be called before you transmit
            this message because the header length is set there
            </summary>
            <param name="anEncryptionType">type of encryption</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPMessage.Compress">
            <summary>
            Compress the data portion of this message object.
              This option is currently unsupported.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPMessage.WriteCompressionMask(System.Byte)">
            <summary>
            Sets the compression mask used for this packet.
            </summary>
            <param name="aMask">aMask value</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPMessage.WriteEncryptionMask(System.Byte)">
            <summary>
            Sets the encryption mask used for this packet.
            </summary>
            <param name="aMask">aMask value</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPMessage.WriteHeaderLength(System.Int32)">
            <summary>
            Set the total length of the data to be included with this message.
            </summary>
            <param name="aLength">aLength value</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPMessage.ReadCharArray(System.Int32)">
            <summary>
            
            </summary>
            <param name="anIndex"></param>
            <returns></returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPMessage.DataItemOffset(System.Int32)">
            <summary>
            calculates the byte offset into the data 
            buffer at which the data item specified by the given index is located.
            </summary>
            <param name="anIndex"> index value</param>
            <returns>return an index</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPMessage.ReadCompressionMask">
            <summary>
            Return the compression mask used on this message.
            </summary>
            <returns> the compression mask </returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPMessage.ReadDouble(System.Int32)">
            <summary>
            Read double data item from the message at the specified index.
            </summary>
            <param name="anIndex"></param>
            <returns>data item that was requested.</returns>
            <exception cref="T:IBMU2.UODOTNET.UniRPCPacketException">throws exception if index out of range</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPMessage.ReadDoubleArray(System.Int32)">
            <summary>
            Read double array data item from the message at the specified index.
            </summary>
            <param name="anIndex">index in packet </param>
            <returns>/// <exception cref="T:IBMU2.UODOTNET.UniRPCPacketException">throws exception if index out of range</exception></returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPMessage.ReadEncryptionMask">
            <summary>
            Read encryption mask used on this message.
            </summary>
            <returns>Return the encryption mask used on this message.</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPMessage.ReadHeaderVersion">
            <summary>
            Read the message header version.
            </summary>
            <returns>Return the message header version.</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPMessage.ReadHeaderVersionHighest">
            <summary>
            Read the highest message version supported.
            </summary>
            <returns>Return the highest message version supported.</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPMessage.ReadInteger(System.Int32)">
            <summary>
            Read integer data item from the message at the specified index.
            </summary>
            <param name="anIndex">index in packet</param>
            <returns>returns integer data item from the message at the specified index.</returns>
            <returns>/// <exception cref="T:IBMU2.UODOTNET.UniRPCPacketException">throws exception if index out of range</exception></returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPMessage.ReadIntegerArray(System.Int32)">
            <summary>
            Read integer array data item from the message at the specified index.
            </summary>
            <param name="anIndex"></param>
            <returns>Returns integer array data item from the message at the specified index.</returns>
            <returns>/// <exception cref="T:IBMU2.UODOTNET.UniRPCPacketException">throws exception if index out of range</exception></returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPMessage.ReadMessageType">
            <summary>
            Read the type of this message.
            </summary>
            <returns>Return the type of this message.</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPMessage.ReadReturnCode">
            <summary>
            Get the return code for this message.
            </summary>
            <returns>return Return Code</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPMessage.ReadByteArray(System.Int32)">
            <summary>
            Read Bytes data item from the message at the specified index.
            </summary>
            <param name="anIndex">index in packet</param>
            <returns>Returns integer data item from the message at the specified index.</returns>
            <returns>/// <exception cref="T:IBMU2.UODOTNET.UniRPCPacketException">throws exception if index out of range</exception></returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPMessage.ReadType(System.Int32)">
            <summary>
            Get the data type of the item at this index in this message Object.
            </summary>
            <param name="anIndex">index in the packet</param>
            <returns>return data type </returns>
            <exception cref="T:IBMU2.UODOTNET.UniRPCPacketException">throws exception if index out of range</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPMessage.Receive(System.IO.BinaryReader)">
            <summary>
            
            </summary>
            <param name="aDataIn"></param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPMessage.ReadHeaderLength">
            <summary>
            Reads the size in bytes of the data portion of this message.
            </summary>
            <returns>Returns the size in bytes of the data portion of this message. </returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPMessage.ReadArgumentCount">
            <summary>
            Read the number of arguments included in the data portion of this message.
            </summary>
            <returns>Returns the number of arguments included in the data portion of this message. </returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPMessage.Decompress">
            <summary>
            Decompress the data portion of this message object and return the number
            of bytes decompressed.
            This option is currently unsupported.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPMessage.Decrypt">
            <summary>
            Decrypt the data message we just received. The decrypt method must be called before
            we can access the message arguments just received.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPMessage.ResizeDataBuffer(System.Int32)">
             <summary>
             expands the current data buffer so that it can hold the incomming 
             <code>aLength</code> bytes. The data buffer is expanded in 32K increments.
             </summary>
             <param name="aLength">The length value</param>
            
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPMessage.Send(System.IO.BinaryWriter,System.Byte)">
            <summary>
            Writes this message out to the given data stream.
            Will throw an exception if there is any network problem or if the packet 
            is not completely written.
            </summary>
            <param name="aDataOut"> data to be sent</param>
            <param name="anEncryptionMask"> type of encryption</param>
            <exception cref="T:IBMU2.UODOTNET.UniRPCPacketException">throws exception if there is any network problem or if the packet is not completely written</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPMessage.SetCompressionThreshold(System.Int32)">
            <summary>
            Sets the threshold in bytes, beyond which this object will write 
            to the output stream in compressed format. This feature not supported 
            in UniRPC 1.0.
            </summary>
            <param name="aThreshold"> Threshold value</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPMessage.SetVersionCurrent(System.Int32)">
            <summary>
            Set the current version of the message.
            </summary>
            <param name="aVersion"> Version Value</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPMessage.WriteString(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="anIndex"></param>
            <param name="aString"></param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPMessage.WriteByteArray(System.Int32,System.Byte[])">
            <summary>
            
            </summary>
            <param name="anIndex"></param>
            <param name="bArray"></param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPMessage.IncreaseDataBuffer(System.Int32)">
            <summary>
            
            </summary>
            <param name="length"></param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPMessage.WriteCharArray(System.Int32,System.Char[])">
            <summary>
            
            </summary>
            <param name="anIndex"></param>
            <param name="aCharArray"></param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPMessage.WriteDouble(System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="anIndex"></param>
            <param name="aDouble"></param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPMessage.WriteDoubleArray(System.Int32,System.Double[])">
            <summary>
            
            </summary>
            <param name="anIndex"></param>
            <param name="aDouble"></param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPMessage.WriteInteger(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="anIndex"></param>
            <param name="anInteger"></param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPMessage.WriteArrayInteger(System.Int32,System.Int32[])">
            <summary>
            
            </summary>
            <param name="anIndex"></param>
            <param name="anInteger"></param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPMessage.WriteMessageType(System.Int32)">
            <summary>
            
            </summary>
            <param name="aType"></param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPMessage.WriteReturnCode(System.Int32)">
            <summary>
            
            </summary>
            <param name="aReturnCode"></param>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCPMessage.m_HeaderBuffer">
            <summary>
            store for Header Buffer
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCPMessage.m_DataInfoBuffer">
            <summary>
            store for Data Info Buffer
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCPMessage.m_DataBuffer">
            <summary>
            store of Data Buffer
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCPMessage.m_DataBufferEncrypted">
            <summary>
            store for Data Buffer Encrypted
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCPMessage.m_DataBufferCompressed">
            <summary>
            store for Data Buffer Compressed
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCPMessage.m_DataOffset">
            <summary>
            next empty byte in dataBuffer
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCPMessage.m_CurrentArgumentCount">
            <summary>
            store for argument count
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCPMessage.m_CurrentCompressionThreshold">
            <summary>
            store for Compression Thresold
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCPMessage.m_IsCompressed">
            <summary>
            store for IsCompressed
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCPMessage.m_IsEncrypted">
            <summary>
            store for m_IsEncrypted
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniRPCPMessage.ArgumentCount">
            <summary>
            ArgumentCount property
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniRPCPMessage.CompressionThreshold">
            <summary>
            CompressionThreshold property
            </summary>
            <exception cref="T:IBMU2.UODOTNET.UniRPCPacketException">throw if we try to set compression</exception>
        </member>
        <member name="P:IBMU2.UODOTNET.UniRPCPMessage.Size">
            <summary>
            Returns the size in bytes of this message. The network size of
            the message before encryption or compression are applied. 
            </summary>
        </member>
        <member name="T:IBMU2.UODOTNET.UniRPCPacket">
            <summary>
            UniRPCPacket is the container class for data transfered with UniRPC.
             An instance of this class can contain and be used for the transport
             of any type of data supported by Version 1 or 2 of UniRPC.
            
            
              Version 1, UniRPC Packet structure.
             |--------16 Bits---------|
             |--------------------32 Bits----------------------|
             ===================================================
             |-------Version----------|--------SeqNo-----------|\
             |---------------------Length----------------------| \
             |----------------------Type-----------------------|  \ Message Header - 24 Bytes
             |--------------------Timestamp--------------------|  /
             |-------------------Return code-------------------| /
             |-------Arg Count--------|------Proc Length-------|/
             ===================================================
             |----------Procedure name (unformated)------------|\
             |-------------------::::::::::--------------------| \
             |------------------Arg 1 Length-------------------|  \
             |-------------------Arg 1 Type--------------------|   \
             |-------------------::::::::::--------------------|    \ Message Body - (Length) Bytes
             |------------------Arg n Length-------------------|    /
             |-------------------Arg n Type--------------------|   /
             |---------------Arg 1 Data (unformated)-----------|  /
             |-------------------::::::::::--------------------| /
             |---------------Arg n Data (unformated)-----------|/
             ===================================================
             
            
            Version 2, UniRPC Packet structure.
             |--------16 Bits---------|
             |--------------------32 Bits----------------------|
             ===================================================
             |----Version-------------|--------SeqNo-----------|\
             |-High Ver.--|--Future---|--Proxy Header Length---| \
             |--------------------Header Type------------------|  | Message Proxy Header - 24 Bytes
             |---------------Connection Number-----------------|  |
             |-----------------Packet Length-------------------| /
             |-------------------Future Use--------------------|/
             ===================================================
             |-------Version----------|--------SeqNo-----------|\
             |---------------------Length----------------------| \
             |----------------------Type-----------------------|  \ Message Header - 24 Bytes
             |-High Ver.--|--C. Mask--|--E. Mask--|---Future---|  /
             |-------------------Return code-------------------| /
             |-------Arg Count--------|------Proc Length-------|/
             ===================================================
             |----------Procedure name (unformated)------------|\
             |-------------------::::::::::--------------------| \
             |------------------Arg 1 Length-------------------|  \
             |-------------------Arg 1 Type--------------------|   \
             |-------------------::::::::::--------------------|    \ Message Body - (Length) Bytes
             |------------------Arg n Length-------------------|    /
             |-------------------Arg n Type--------------------|   /
             |---------------Arg 1 Data (unformated)-----------|  /
             |-------------------::::::::::--------------------| /
             |---------------Arg n Data (unformated)-----------|/
             ===================================================
             
            
            NOTE:Version 1 of UniRPC does not officially support Procedure names.
             It also does not support packet sequencing or packet timestamping.
             Currently this UniObjects for .NET  client only supports the TCP/IP transport type.
             The C version of UniRPC supports LAN pipes transport type as well.
             NOTE:Version 2 of UniRPC does not officially support Procedure names.
             It also does not support packet sequencing or packet timestamping.
             The timestamp data field will be removed and the 4 bytes reused as layed
             out in the version 2 diagram. Currently this UniObjects for .NET client only supports
             the TCP/IP transport type.
             The C version of UniRPC supports LAN pipes transport type as well.
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCPacket.m_UNIRPC_INT">
            <summary> 
            Integer arguments use this argument type.
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCPacket.m_UNIRPC_DOUBLE">
            <summary>
             Double arguments use this argument type.
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCPacket.m_UNIRPC_CHAR">
            <summary>
             Character array arguments use this argument type.
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCPacket.m_UNIRPC_STRING">
            <summary> 
            UniVerse string arguments use this argument type.
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCPacket.m_UNIRPC_INT_PTR">
            <summary>
            Integer array arguments use this argument type.
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCPacket.m_UNIRPC_DOUBLE_PTR">
            <summary>
            Double array arguments use this argument type.
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCPacket.m_UNIRPC_FUNCNAME">
            <summary> 
            Function name arguments use this argument type.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPacket.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPacket.#ctor(IBMU2.UODOTNET.UniRPCConnection)">
            <summary>
            
            </summary>
            <param name="aConnection"></param>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCPacket.m_CurrentConnection">
            <summary>
            UniRPCConnection object
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCPacket.m_MessageObject">
            <summary>
            UniRPCPMessage object
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniRPCPacket.UniRPCPMessage">
            <summary>
            UniRPCPMessage property
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniRPCPacket.UniRPCConnection">
            <summary>
            UniRPCConnection Property
            </summary>
        </member>
        <member name="T:IBMU2.UODOTNET.UniNLSMap">
            <summary>
            <c>UniNLSmap</c> is used to control the NLS map settings.  It is only available
            if NLS is enabled on the server uniConnection.  
            </summary>
            <example> This sample shows how to use <c>UniNLSMap</c> Object.
            <code>
            [C#]
            using IBMU2.UODOTNET;
            using System.Text;
              class MyAppClass 
              {
                 public static void Main() 
                 {
                    try
                    {
            			UniSession us = UniObjects.OpenSession("localhost","ZZZ","XXX","HS.SALES","uvcs");
            			UniNLSMap fl = null;
            			fl = us.CreateUniNLSMap();
            			string s = fl.ServerMapName;
            		}
            		Catch (Exception ex)
            		{
            			//some error, display it 
            			Console.WriteLine(ex.Message);
            		}
            		finally
            		{
            			// no error
            			if(us1 != null)
            			{
            				UniObjects.CloseSession(us1);
            				us1= null;
            			}
            		}
                 }
              }
              [VB.NET
              ///	Option Explicit On 
            Option Strict On
            ' Add the classes in the following namespaces to our namespace
            Imports System
            Imports System.IO
            Imports System.Text
            Imports System.Collections
            Imports IBMU2.UODOTNET
            Class App
            	Public Shared Function Main(ByVal args() As String) As Integer
            	Dim us1 As UniSession = Nothing
            	Dim cmd As UniCommand = Nothing
            	Try
            		Console.WriteLine("Program started... ")
            		us1 = UniObjects.OpenSession("localhost", "ZZZ", "xxxx", "HS.SALES", "uvcs")
            		Dim fl As	UniNLSMap  = Nothing
            		fl = us.CreateUniNLSMap()
            		Dim s As String = fl.ServerMapName
            	Catch e As Exception
            		If Not (us1 Is Nothing) Then
            			If (us1.IsActive) Then
            				UniObjects.CloseSession(us1)
            				us1 = Nothing
            			End If
            		End If
            		Console.WriteLine("")
            		Dim s As String
            		s = "Connection Failed : " + e.Message
            		Console.WriteLine(s)
            	Finally
            		If Not (us1 Is Nothing) Then
            			If (us1.IsActive) Then
            				Console.WriteLine("")
            				Dim s As String
            				s = "Connection Passed"
            				Console.WriteLine(s)
            				UniObjects.CloseSession(us1)
            				Console.WriteLine("Program finished... ")
            			End If
            		End If
            	End Try
            	Console.Read()
            	Return 0
            	End Function 'Main
            End Class 'App
            </code>
            </example>
        </member>
        <member name="M:IBMU2.UODOTNET.UniNLSMap.#ctor(IBMU2.UODOTNET.UniSession)">
             <summary>
            Initializes a new instance of the UniNLSMap class.
             </summary>
             <param name="aSession">UniSession Object</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniNLSMap.SetName(System.String)">
            <summary>
            Sets the specified map.
            </summary>
            <param name="pName">map name</param>
            <exception cref="T:IBMU2.UODOTNET.UniNLSMapException">Thrown when SetName() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniNLSMap.GetUniMarks">
            <summary>
            Gets Marks from Server.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniNLSMap.CheckEntryConditions">
            <summary>
            This routine will check whether or not we are in a state that we can perform any object operation,
            especially server communications.  It checks to see if a command is currently in the active state
            and it checks to ensure that the internal RPC packets are initialized.   If an error occurs,
            it passes it back up.
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniNLSMap.m_NLSMarkChars">
            <summary>
            Store for Marks
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniNLSMap.m_ClientName">
            <summary>
            Store for Client Name
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniNLSMap.m_Session">
            <summary>
            Store for instance of UniSession Object
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniNLSMap.m_UniNLSMapStatus">
            <summary>
            Store for NLS MAP Status
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniNLSMap.m_UniReturnCode">
            <summary>
            Store for Return code
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniNLSMap.m_FileEncryptionType">
            <summary>
            Store for File Encryption Type
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniNLSMap.ServerMapName">
            <summary>
            Returns the server representation of the map name.  This value may differ from 
            the name that was requested via the <c>ClientMapName</c> property.  This is due to
            a client-server NLS Map name mapping that is done.
            </summary>
            <exception cref="T:IBMU2.UODOTNET.UniNLSMapException">Thrown when ServerMapName property fails.</exception>
        </member>
        <member name="P:IBMU2.UODOTNET.UniNLSMap.ClientMapName">
            <summary>
            Gets the  map.
            </summary>
            <returns></returns>
        </member>
        <member name="T:IBMU2.UODOTNET.UniFileException">
            <summary>
            UniFileException extends ApplicationException. UniFileException is thrown by a user program, 
            not by the common language runtime and it represents errors that occur during application execution.
            When an error occurs during UniFile execution, it reports this by throwing an exception containing 
            information about the error. Once thrown, an exception is handled by the application or by the default
            exception handler.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFileException.#ctor">
            <summary>
            Initializes a new instance of the UniFileException class.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFileException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the UniFileException class with a specified error message.
            </summary>
            <param name="message">message description</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniFileException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the UniFileException class with a specified error message and a 
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">message description</param>
            <param name="inner">inner exception object</param>
        </member>
        <member name="P:IBMU2.UODOTNET.UniFileException.ErrorCode">
            <summary>
            Gets Error Code
            </summary>
        </member>
        <member name="T:IBMU2.UODOTNET.UniDataSet">
            <summary>
            A UniDataSet is a Collection Class.  It provides a collection interface for sets of 
            <c>UniRecord</c> objects, which can then be used to perform bulk or batch style operations
            with one network operation. UniDataSet Class has implemented the System.Collections.IEnumerator interface.
            The foreach statement is a convenient way to iterate over the elements of <c>UniDataSet</c>.
            </summary>
            <example> This sample shows how to use <c>UniDataSet</c> object.
            <code>
            [C#]
            using IBMU2.UODOTNET;
            using System.Text;
              class MyAppClass 
              {
                 public static void Main() 
                 {
                    try
                    {
            			UniSession us1 = UniObjects.OpenSession("localhost","ZZZ","XXX","localhost","HS.SALES","uvcs");
            			// open customer file
            			UniFile fl = us1.CreateUniFile("CUSTOMER");
            			// read records as unidataset
            			string [] sArray =  {"2","12","3","4"};
            			UniDataSet uSet = fl.ReadRecords(sArray); 
            			// use for each statement to print the record
            			foreach (UniRecord item in uSet) 
            			{
            				Console.WriteLine(item.ToString());
            			}
            		}
            		Catch (Exception ex)
            		{
            			//some error, display it 
            			Console.WriteLine(ex.Message);
            		}
            		finally
            		{
            			// no error
            			if(us1 != null)
            			{
            				UniObjects.CloseSession(us1);
            				us1= null;
            			}
            		}
                 }
              }
              [VB.NET]
            Option Explicit On 
            Option Strict On
            ' Add the classes in the following namespaces to our namespace
            Imports System
            Imports System.IO
            Imports System.Text
            Imports System.Collections
            Imports IBMU2.UODOTNET
            Class App
            	Public Shared Function Main(ByVal args() As String) As Integer
            	Dim us1 As UniSession = Nothing
            	Dim uSet As UniDataSet = Nothing
            	Dim fl As UniFile = Nothing
            	Try
            		Console.WriteLine("Program started... ")
            		us1 = UniObjects.OpenSession("localhost", "ZZZ", "xxxx", "HS.SALES", "uvcs")
            		' open customer file
            		fl = us1.CreateUniFile("CUSTOMER")
            		' read records as unidataset
            		Dim sArray As String() = {"2", "12", "3", "4"}
            		uSet = fl.ReadRecords(sArray)
            		' use for each statement to print the record
            		Dim item As UniRecord
            		For Each item In uSet
            			Console.WriteLine(item.ToString())
            		Next item
            		' use index to print the record
            		Dim lCount As Integer = uSet.RowCount
            		Dim ii As Integer
            		For ii = 0 To (lCount - 1)
            			Dim ee As UniRecord = uSet(ii)
            			Console.WriteLine(ee.ToString())
            		Next ii
            		' print one by one record
            		Dim q2 As UniRecord = uSet("2")
            		Dim sq2 As String = q2.ToString()
            		Console.WriteLine("  Record data for rec id 2:" + sq2)
            		Dim q3 As UniRecord = uSet("3")
            		Dim sq3 As String = q3.ToString()
            		Console.WriteLine("  Record data for rec id 3:" + sq3)
            		'create UniDataSet in the Client Side
            		Dim uSet3 As UniDataSet = us1.CreateUniDataSet()
            		uSet3.Insert("3", "aaa")
            		uSet3.Insert("4", "bbb")
            		uSet3.Insert("5", "vvv")
            		uSet3.Insert(2, "8", "www")
            	Catch e As Exception
            		If Not (us1 Is Nothing) Then
            			If (us1.IsActive) Then
            				UniObjects.CloseSession(us1)
            				us1 = Nothing
            			End If
            		End If
            		Console.WriteLine("")
            		Dim s As String
            		s = "Connection Failed : " + e.Message
            		Console.WriteLine(s)
            	Finally
            		If Not (us1 Is Nothing) Then
            			If (us1.IsActive) Then
            				Console.WriteLine("")
            				Dim s As String
            				s = "Connection Passed"
            				Console.WriteLine(s)
            				UniObjects.CloseSession(us1)
            				Console.WriteLine("Program finished... ")
            			End If
            		End If
            	End Try
            	Console.Read()
            	Return 0
            	End Function 'Main
            End Class 'App
            </code>
            </example>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDataSet.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <c>UniDataSet</c>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDataSet.#ctor(IBMU2.UODOTNET.UniSession)">
            <summary>
            Initializes a new instance of the UniDataSet class.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDataSet.#ctor(IBMU2.UODOTNET.UniSession,System.String[],System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the UniDataSet class.
            </summary>
            <param name="pSession">a UniSession Object</param>
            <param name="RecId">array of Record IDs</param>
            <param name="RetData">Byte Array representing Reocrd Data</param>
            <param name="StatusData">Byte Array representing Reocrd Status</param>
            <param name="RetValData">Byte Array representing Reocrd Return Value</param>
            <exception cref="T:IBMU2.UODOTNET.UniDataSetException">Thrown when UniDataSet() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDataSet.#ctor(IBMU2.UODOTNET.UniSession,System.String[],System.Byte[],System.Byte[],System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="pSession"></param>
            <param name="RecId"></param>
            <param name="RetData"></param>
            <param name="StatusData"></param>
            <param name="RetValData"></param>
            <param name="optionalRecordSeparator"></param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDataSet.Add(System.String)">
            <summary>
            Adds Empty UniRecord object to the end of the UniDataSet Collection Object.
            </summary>
            <remarks>empty string will be converted to UniReocrd Object</remarks>
            <param name="pUniRecID">the Record ID of the row being added.</param>
            <exception cref="T:IBMU2.UODOTNET.UniDataSetException">Thrown when Add() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDataSet.Add(System.String,IBMU2.UODOTNET.UniDynArray)">
            <summary>
            Adds UniRecord object to the end of the UniDataSet Collection Object.
            </summary>
            <param name="pUniRecID">the Record ID of the row being added.</param>
            <param name="pUniRecord">the UniDynArray will be converted to UniRecord Object.</param>
            <exception cref="T:IBMU2.UODOTNET.UniDataSetException">Thrown when Add() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDataSet.Add(System.String,IBMU2.UODOTNET.UniRecord)">
            <summary>
            Adds UniRecord object to the end of the UniDataSet Collection Object.
            </summary>
            <param name="pUniRecID">the Record ID of the row being added.</param>
            <param name="pUniRec">UniReocrd Object to be added</param>
            <exception cref="T:IBMU2.UODOTNET.UniDataSetException">Thrown when Add() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDataSet.Add(System.String,System.String)">
            <summary>
            Adds UniRecord object to the end of the UniDataSet Collection Object.
            </summary>
            <param name="pUniRecID">the Record ID of the row being added.</param>
            <param name="pRecord">string will be converted to UniReocrd Object</param>
            <exception cref="T:IBMU2.UODOTNET.UniDataSetException">Thrown when Add() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDataSet.Insert(System.Int32,System.String,IBMU2.UODOTNET.UniDynArray)">
            <summary>
            Inserts a new row into the UniDataSet Collection Object,
             inserting the row at the given cursor position
            </summary>
            <param name="pIndexLoc">location in the UniDataSet Collection Object to insert this row</param>
            <param name="pUniRecID">the Record ID of the row being inserted.</param>
            <param name="pUniRecord">the UniDynArray will be converted to UniRecord Object before inserted.</param>
            <exception cref="T:IBMU2.UODOTNET.UniDataSetException">Thrown when Insert() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDataSet.Insert(System.Int32,System.String,System.String)">
            <summary>
            Inserts a new row into the UniDataSet Collection Object,
             inserting the row at the given cursor position
            </summary>
            <param name="pIndexLoc">location in the UniDataSet Collection Object to insert this row</param>
            <param name="pRecID">the Record ID of the row being inserted.</param>
            <param name="pRecord">string will be converted to UniReocrd before inserted</param>
            <exception cref="T:IBMU2.UODOTNET.UniDataSetException">Thrown when Insert() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDataSet.Insert(System.Int32,System.String,IBMU2.UODOTNET.UniRecord)">
            <summary>
            Inserts a new row into the UniDataSet Collection Object,
             inserting the row at the given cursor position
            </summary>
            <param name="pIndexLoc">location in the UniDataSet Collection Object to insert this row</param>
            <param name="pRecID">the Record ID of the row being inserted.</param>
            <param name="pRecord">the UniRecord Object to be inserted</param>
            <exception cref="T:IBMU2.UODOTNET.UniDataSetException">Thrown when Insert() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDataSet.Insert(System.String,IBMU2.UODOTNET.UniDynArray)">
            <summary>
            Inserts a new row into the UniDataSet Collection Object,
             inserting the row at the current  cursor position
            </summary>
            <param name="pUniRecID">the Record ID of the row being inserted.</param>
            <param name="pUniRecord">the UniDynArray will be converted to UniRecord Object before inserted.</param>
            <exception cref="T:IBMU2.UODOTNET.UniDataSetException">Thrown when Insert() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDataSet.Insert(System.String)">
            <summary>
            Inserts a new row into the UniDataSet Collection Object,
             inserting the row at the given cursor position. It inserts empty string which gets converted to
             UniReocrd.
            </summary>
            <param name="pUniRecID">the Record ID of the row being inserted.</param>
            <exception cref="T:IBMU2.UODOTNET.UniDataSetException">Thrown when Insert() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDataSet.Insert(System.String,System.String)">
            <summary>
            Inserts a new row into the UniDataSet Collection Object,
             inserting the row at the current cursor position
            </summary>
            <param name="pUniRecID">the Record ID of the row being inserted.</param>
            <param name="pRecord">the pRecord  will be converted to UniRecord Object before inserted.</param>
            <exception cref="T:IBMU2.UODOTNET.UniDataSetException">Thrown when Insert() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDataSet.Insert(System.String,IBMU2.UODOTNET.UniRecord)">
            <summary>
            Inserts a new row into the UniDataSet Collection Object,
             inserting the row at the current cursor position
            </summary>
            <param name="pUniRecID">the Record ID of the row being inserted.</param>
            <param name="pRecord">the UniReocrd Object to be inserted</param>
            <exception cref="T:IBMU2.UODOTNET.UniDataSetException">Thrown when Insert() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDataSet.GetRecord(System.String)">
            <summary>
            Gets the value associated with the specified UniRecord ID as a key. 
            </summary>
            <param name="pUniRecID">The  Record ID whose value to get.</param>
            <returns>UniRecord Object</returns>
            <exception cref="T:IBMU2.UODOTNET.UniDataSetException">Thrown when GetRecord() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDataSet.GetRecord(System.Int32)">
            <summary>
            Gets the value associated with the specified Index Position. 
            </summary>
            <param name="nIndex">The  index position whose value to get.</param>
            <returns>UniRecord Object</returns>
            <exception cref="T:IBMU2.UODOTNET.UniDataSetException">Thrown when GetRecord() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDataSet.GetRecordStatus(System.String)">
            <summary>
            Gets the UniRecord Status associated with the specified Record ID key. 
            </summary>
            <param name="pUniRecID">the Record ID for the associated UniRecord Object whose 
            status to be determined</param>
            <returns>record status</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDataSet.GetRecordStatus(System.Int32)">
            <summary>
            Gets the UniRecord Status associated with the specified index key. 
            </summary>
            <param name="nIndex">the index for  the associated UniRecord Object whose status to 
            be determined</param>
            <returns></returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDataSet.ToString">
            <summary>
            Returns a String that represents the UniDataSet Collection Object.
            </summary>
            <returns>A String that represents the UniDataSet Collection Object.</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDataSet.Relative(System.Int32)">
            <summary>
            Positions the UniDataSet Collection Object cursor to a position <c>numRows</c> away from 
            the current position.  For example, if the cursor is already set to the third row, and UniDataSet.Relative( 5 ) is referenced,
            it will set the cursor to the eighth position within the set.  If an operation is successful, it
            returns a <c>true</c>.  If the operation attempts to move the cursor past the end or before
            the beginning, the cursor will be set to the last row or first row respectively and the operation
            will return <c>false</c>.
            </summary>
            <param name="numRows">integer representing the number of rows the cursor should be moved</param>
            <returns>boolean denoting whether the operation was successful</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDataSet.Absolute(System.Int32)">
            <summary>
            Specifies the absolute position within the <c>UniDataSet</c> that the cursor
            should point to
            </summary>
            <param name="rowNum">integer which specifies the absolute position within the UniDataSet</param>
            <returns>boolean specifying whether the operation was successful.</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDataSet.Remove(System.String)">
            <summary>
            Removes the element with the specified Record ID key from the UniDataSet Collection Object
            </summary>
            <param name="pUniRecID">The Reocrd ID key of the element to remove. </param>
            <returns></returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDataSet.Clear">
            <summary>
            Removes all elements from the the UniDataSet Collection Object.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDataSet.GetDelimitedByteArrayRecordID">
            <summary>
            Returns Byte Array object that represents all Record IDs delimited by Record Marks
            </summary>
            <returns></returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDataSet.GetDelimitedByteArrayRecord">
            <summary>
            Returns Byte Array object that represents all Records delimited by Record Marks
            </summary>
            <returns></returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDataSet.ExtractRecord(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Extract a single Record from given Byte Array representing all the Records and index position
            </summary>
            <param name="pSourceByteArray">all the Records as Byte Array</param>
            <param name="nStartIndex">the position from where the single record will be extracted</param>
            <param name="nIndex">out value representing last position of the record</param>
            <returns>Byte Array for Single Record</returns>
        </member>
        <member name="F:IBMU2.UODOTNET.UniDataSet.m_HashList">
            <summary>
            Store for instance of UniRecord
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniDataSet.m_IndexList">
            <summary>
            Store for Record ID Index
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniDataSet.m_Session">
            <summary>
            Store for instance of UniSession Object
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniDataSet.RowCount">
            <summary>
            Gets the number of UniRecord objects contained in the UniDataSet Collection Object
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniDataSet.CurrentRow">
            <summary>
            Returns the current index position within the UniDataSet Collection Object.
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniDataSet.Item(System.String)">
            <summary>
            This property is the indexer for the UniDataSet class.
            Gets or sets the value associated with the specified Reocord ID key. 
            </summary>
            <exception cref="T:IBMU2.UODOTNET.UniDataSetException">Thrown when UniDataSet indexer fails.</exception>
        </member>
        <member name="P:IBMU2.UODOTNET.UniDataSet.Item(System.Int32)">
            <summary>
            This property is the indexer for the UniDataSet class.
            Gets or sets the value associated with the specified index key. 
            </summary>
            <exception cref="T:IBMU2.UODOTNET.UniDataSetException">Thrown when UniDataSet indexer fails.</exception>
        </member>
        <member name="P:IBMU2.UODOTNET.UniDataSet.DelimitedRecordID">
            <summary>
            Returns string object that represents all Record IDs delimited by Record Marks
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniDataSet.DelimitedRecord">
            <summary>
            Returns string object that represents all Records delimited by Record Marks
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniDataSet.Last">
            <summary>
            Gets a value indicating whether the position points to Last row in the UniDataSet Collection Object  
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniDataSet.First">
            <summary>
            Gets a value indicating whether the position points to First row in the UniDataSet Collection Object  
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniDataSet.AfterLast">
            <summary>
            Gets a value indicating whether the position points to AfterLast row in the UniDataSet Collection Object  
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniDataSet.BeforeFirst">
            <summary>
            Gets a value indicating whether the position points to BeforeFirst row in the UniDataSet Collection Object  
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDataSet.UniDataSetEnumerator.#ctor(IBMU2.UODOTNET.UniDataSet)">
            <summary>
            One argument constructor
            </summary>
            <param name="t"> UniDataSet Object</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDataSet.UniDataSetEnumerator.MoveNext">
            <summary>
            Move Next in the Enumerator
            </summary>
            <returns>true if position is within boundry, otherwise false</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniDataSet.UniDataSetEnumerator.Reset">
            <summary>
            Reset the relative position
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniDataSet.UniDataSetEnumerator.position">
            <summary>
            Store for relative position in the Enumerator
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniDataSet.UniDataSetEnumerator.t">
            <summary>
            Store for instance of UniDataSet Object
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniDataSet.UniDataSetEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            IEnumerator version: returns object
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniDataSet.UniDataSetEnumerator.Current">
            <summary>
            non-IEnumerator version: type-safe
            </summary>
        </member>
        <member name="T:IBMU2.UODOTNET.UniTrace">
            <summary>
            This is a Uniobject Trace class
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTrace.m_UniBooleanSwitch">
            <summary>
            This is boolean switch
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTrace.m_UniTraceSwitch">
            <summary>
            Stote for instance of Trace switch
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTrace.m_UniListener">
            <summary>
            Store for instance of TextWriterTraceListener
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTrace.m_RPCDUMP">
            <summary>
            Store for RPC DUMP
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniTrace.UniLog(IBMU2.UODOTNET.UniRoot.UniTraceLevel,System.String)">
            <summary>
            Writes information about the trace to the trace listeners in the Listeners collection.
            Listeners collection can be Console or a file name
            </summary>
            <param name="TraceLevel">error=1,warning=2,info=3,verbose=4</param>
            <param name="message">message to be written</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniTrace.#ctor">
            <summary>
            this is no argument constructor
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniTrace.RPCDUMP">
            <summary>
            Gets or Sets RPC DUMP Level.
            </summary>
            <value>RPCDUMP accesses the value of the m_RPCDUMP data member</value>
        </member>
        <member name="T:IBMU2.UODOTNET.UniRPCErrorMessage">
            <summary>
            UniRPCErrorMessage is a class used to determine a given error message
            given an ErrorCode to be displayed
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCErrorMessage.#ctor">
            <summary>
             Creates UniRPCErrorMessage object  
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCErrorMessage.GetErrorMessage(System.Int32)">
            <summary>
            returns the appropriate error message, depending on the error code passed in
            </summary>
            <param name="aErrorCode">integer representing which error message to display
            </param>
            <returns> String representing the error message to be displayed
            </returns>
        </member>
        <member name="T:IBMU2.UODOTNET.UniObjectsTokens">
            <summary>
            UniObjectsTokens Class
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.MAX_OPEN_FILES">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.NUM_AT_VARIABLES">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.RETURN_ON_LOCKED">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.NO_LOCKS">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.WRITE_RELEASE">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.LOCK_NO_LOCK">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.LOCK_MY_READL">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.LOCK_MY_READU">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.LOCK_MY_FILELOCK">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.LOCK_OTHER_READL">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.LOCK_OTHER_READU">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.LOCK_OTHER_FILELOCK">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.AT_LOGNAME">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.AT_PATH">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.AT_USER_NO">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.AT_WHO">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.AT_TRANSACTION">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.AT_DATA_PENDING">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.AT_USER_RETURN_CODE">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.AT_SYSTEM_RETURN_CODE">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.AT_NULL_STR">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.AT_SCHEMA">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.UVT_SELECTLISTEMPTY_STATE">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.NUMICMARKS">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.IK_MARK_MIN">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.IK_MARK_MAX">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.NUM_OF_ELEMENTS">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.LC_MIN">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.LC_MAX">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.UVT_NLS_TIME">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.UVT_NLS_NUMERIC">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.UVT_NLS_MONETARY">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.UVT_NLS_CTYPE">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.UVT_NLS_COLLATE">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.UVS_COMPLETE">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.UVS_REPLY">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.UVS_MORE">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.RESULT_BUFFER_SIZE">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.UVT_EXCLUSIVE_READ">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.UVT_SHARED_READ">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.UVT_NO_LOCKS">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.UVT_WRITE_RELEASE">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.UVT_READ_RELEASE">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.UVT_EXPLICIT_RELEASE">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.UVT_CHANGE_RELEASE">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.UVT_WAIT_LOCKED">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.UVT_RETURN_LOCKED">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.UVT_NORELEASEALL">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.UVT_DATA">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.UVT_DICT">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.UVORNFSUBARGCNT">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.IK_READ">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.IK_READL">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.IK_READU">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.IK_DELETE">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.IK_DELETEU">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.IK_WAIT">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.IK_WRITE">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.IK_WRITEW">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.IK_WRITEU">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.IK_DATA">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.IK_DICT">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.RESULT_ARG_NO">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.FILENAME_ARG_NO">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.LOCKTYPE_ARG_NO">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.RECORDID_ARG_NO">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.FIELDNAME_ARG_NO">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.STATUSCODE_ARG_NO">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.ERRORCODE_ARG_NO">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.UVORNFSUB">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.UVT_DICT_DICT_FILE">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.UVT_TYPE_INDEX">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.UVT_LOC_INDEX">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.UVT_CONV_INDEX">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.UVT_NAME_INDEX">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.UVT_FORMAT_INDEX">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.UVT_SM_INDEX">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.UVT_ASSOC_INDEX">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.UVT_SQLTYPE_INDEX">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.UVT_START">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.UVT_CURR">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjectsTokens.UVT_END">
            <summary>
            
            </summary>
        </member>
        <member name="T:IBMU2.UODOTNET.UniTransaction">
            <summary>
            <c>UniTransaction</c> is used to control the transaction settings
            It gives the developer the ability to provide transactional behavior for 
            their applications.  
            </summary>
            <example> This sample shows how to use <c>UniTransaction</c> Object.
            <code>
            [C#]
            using IBMU2.UODOTNET;
            using System.Text;
              class MyAppClass 
              {
                 public static void Main() 
                 {
                    try
                    {
            			UniSession us = UniObjects.OpenSession("localhost","ZZZ","XXX","HS.SALES","uvcs");
            			UniTransaction tt = us.CreateUniTransaction();
            			tt.Begin();
            			if(tt.IsActive())
            			{
            				Console.WriteLine("transaction active");
            			}
            		}
            		Catch (Exception ex)
            		{
            			//some error, display it 
            			Console.WriteLine(ex.Message);
            		}
            		finally
            		{
            			// no error
            			if(us1 != null)
            			{
            				UniObjects.CloseSession(us1);
            				us1= null;
            			}
            		}
                 }
              }
            [VB.NET]
            Option Explicit On 
            Option Strict On
            ' Add the classes in the following namespaces to our namespace
            Imports System
            Imports System.IO
            Imports System.Text
            Imports System.Collections
            Imports IBMU2.UODOTNET
            Class App
            	Public Shared Function Main(ByVal args() As String) As Integer
            	Dim us1 As UniSession = Nothing
            	Dim cmd As UniCommand = Nothing
            	Try
            		Console.WriteLine("Program started... ")
            		us1 = UniObjects.OpenSession("localhost", "ZZZ", "xxxx", "HS.SALES", "uvcs")
            		Dim tt As 	UniTransaction  = us.CreateUniTransaction()
            		tt.Begin()
            		If (tt.IsActive()) Then
            			Console.WriteLine("transaction active")
            		End If
            	Catch e As Exception
            		If Not (us1 Is Nothing) Then
            			If (us1.IsActive) Then
            				UniObjects.CloseSession(us1)
            				us1 = Nothing
            			End If
            		End If
            		Console.WriteLine("")
            		Dim s As String
            		s = "Connection Failed : " + e.Message
            		Console.WriteLine(s)
            	Finally
            		If Not (us1 Is Nothing) Then
            			If (us1.IsActive) Then
            				Console.WriteLine("")
            				Dim s As String
            				s = "Connection Passed"
            				Console.WriteLine(s)
            				UniObjects.CloseSession(us1)
            				Console.WriteLine("Program finished... ")
            			End If
            		End If
            	End Try
            	Console.Read()
            	Return 0
            	End Function 'Main
            End Class 'App
            </code>
            </example>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTransaction.UVI_TRANS_START">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTransaction.UVI_TRANS_COMMIT">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTransaction.UVI_TRANS_ROLLBACK">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTransaction.UVI_AT_TRANSACTION">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTransaction.UVI_AT_TRANSACTION_LEVEL">
            <summary>
            
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniTransaction.#ctor(IBMU2.UODOTNET.UniSession)">
            <summary>
            Initializes a new instance of the UniTransaction class.
            </summary>
            <param name="pSession">UniSession Object</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniTransaction.Commit">
            <summary>
            Commits the currently active transaction.
            </summary>
            <exception cref="T:IBMU2.UODOTNET.UniTransactionException">Thrown when Commit() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniTransaction.Rollback">
            <summary>
            Rolls back the current transaction.
            </summary>
            <exception cref="T:IBMU2.UODOTNET.UniTransactionException">Thrown when Rollback() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniTransaction.Begin">
            <summary>
            Begins a new transaction.
            </summary>
            <exception cref="T:IBMU2.UODOTNET.UniTransactionException">Thrown when Begin() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniTransaction.GetLevel">
            <summary>
            returns the current transaction level.
            </summary>
            <returns>integer representing the current transaction level</returns>
            <exception cref="T:IBMU2.UODOTNET.UniTransactionException">Thrown when GetLevel() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniTransaction.IsActive">
            <summary>
            Determines whether a transaction is currently active.  A <c>true</c>
            return value will indicate that a transaction is active.
            </summary>
            <returns>boolean denoting whether the transaction is active.  </returns>
            <exception cref="T:IBMU2.UODOTNET.UniTransactionException">Thrown when IsActive() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniTransaction.ServerTransaction(System.Int32)">
            <summary>
            Communicates to the server specific transaction requests, such as
            UVI_TRANS_ROLLBACK, UVI_TRANS_START, UVI_TRANS_COMMIT, etc...
            </summary>
            <param name="aKey">integer representing which transaction request to make</param>
            <returns>integer representing the status of the transaction request</returns>
            <exception cref="T:IBMU2.UODOTNET.UniTransactionException">Thrown when ServerTransaction() fails.</exception>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTransaction.m_IsTransActive">
            <summary>
            Store for Transaction Active Flag
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTransaction.m_UniReturnCode">
            <summary>
            Store for Return Code
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTransaction.m_Session">
            <summary>
            Store for instance of UniSession Object
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTransaction.m_UniTransactionStatus">
            <summary>
            Store for UniTransaction operation status
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniTransaction.m_FileEncryptionType">
            <summary>
            Store for File Encryption Type
            </summary>
        </member>
        <member name="T:IBMU2.UODOTNET.UniXML">
            <summary>
            Summary description for UniXML.
             UniXML class represents a XML representation of U2 database data.
             It has the ability to create XML/Schema documents from either a Query
             /SQL command, or from a data file directly.
             We also provide functions to generate new data/ modify data or generate
             XML from U2 database using Xmap file. please check the U2XMLDB tools 
             for detail.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniXML.#ctor(IBMU2.UODOTNET.UniSession)">
            <summary>
            Initializes a new instance of the UniXML class.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniXML.GenerateXML(System.String)">
            <summary>
            This is using command LIST(query)/SELECT (SQL) to get xml from U2 server. 
            when only command are given, set option to "", check result,
            if there is a error, set property m_Errorcode and 
            property m_Errstr.
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniXML.GenerateXML(System.String,System.String)">
            <summary>
            get xml from LIST(Query)/SELECT(sql)command from U2 server, user can give options
            as each one is separate by @FM and an option has value are separated
            by @VM. check if return code is correct. set property 
            m_Errorcode and property m_Errstr if problem.
            </summary>
            <param name="cmd"></param>
            <param name="options"></param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniXML.GetDataSet">
            <summary>
            getDataSet returns DataSet using m_Xmlstr and m_Xsdstr if there is one.
            </summary>
            <returns>DataSet</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniXML.GenerateXMLUsingXmap(System.String)">
            <summary>
            using server side pregenerated XMAP file to generate XML from U2 data file. 
            the relationship between xml and the U2 file are described in XMAP file, which 
            can be generated using U2XMLDBTOOL. now xml is returned as string here
            </summary>
            <param name="xmapname"></param>
            <returns></returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniXML.UpdateDataUsingXmap(System.String)">
            <summary>
            write to U2 server data file using XMAPfile to describe the relationship
            and using the client side m_Xmlstr as base. 
            note that xmap is generated by U2XMLDBtool, it is stored on server side _XML_
            or XML directory.
            </summary>
            <param name="xmapname"></param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniXML.UpdateDataUsingXmap(System.String,System.String)">
            <summary>
            setDataUsingXmap(), this version use server side xmap and server side xmldoc
            </summary>
            <param name="xmapname"></param>
            <param name="xmlname"></param>
        </member>
        <member name="P:IBMU2.UODOTNET.UniXML.XMLString">
            <summary>
            Gets or Sets XML doc as a string type. 
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniXML.XSDString">
            <summary>
            Gets or Sets XML schema as a string type. 
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniXML.Errmsg">
            <summary>
            gets XML m_Errstr
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniXML.Errcode">
            <summary>
            UniXML.m_Errorcode
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniTerminalServer.WTSOpenServer(System.String)">
            <summary>
            WTSOpenServer Opens the handle to Server
            </summary>
            <param name="pServerName"></param>
            <returns></returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniTerminalServer.WTSCloseServer(System.IntPtr)">
            <summary>
            WTSCloseServer, close the handle to server
            </summary>
            <param name="hServer"></param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniTerminalServer.WTSEnumerateSessions(System.IntPtr,System.Int32,System.Int32,System.IntPtr@,System.Int32@)">
            <summary>
            WTSEnumerateSessions, Enumerate Sessions on a Server
            </summary>
            <param name="hServer"></param>
            <param name="Reserved"></param>
            <param name="Version"></param>
            <param name="ppSessionInfo"></param>
            <param name="pCount"></param>
            <returns></returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniTerminalServer.WTSQuerySessionInformation(System.IntPtr,System.Int32,IBMU2.UODOTNET.UniTerminalServer.WTS_INFO_CLASS,System.IntPtr@,System.UInt32@)">
            <summary>
            WTSQuerySessionInformation - Query Session Information
            </summary>
            <param name="hServer"></param>
            <param name="sessionId"></param>
            <param name="wtsInfoClass"></param>
            <param name="ppBuffer"></param>
            <param name="pBytesReturned"></param>
            <returns></returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniTerminalServer.WTSFreeMemory(System.IntPtr)">
            <summary>
            Free WTS Memory
            </summary>
            <param name="pMemory"></param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniTerminalServer.OpenServer(System.String)">
            <summary>
            Wrapper to Open a Server
            </summary>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniTerminalServer.CloseServer(System.IntPtr)">
            <summary>
            Wrapper to Close Server
            </summary>
            <param name="ServerHandle"></param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniTerminalServer.ListSessions(System.String)">
            <summary>
            Get a List of all Sessions on a server and IP address.
            </summary>
            <param name="ServerName"></param>
            <returns></returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniTerminalServer.GetCurrentSessionID">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:IBMU2.UODOTNET.UniTerminalServer.TsSession">
            <summary>
            Structure holding TS Session
            </summary>
        </member>
        <member name="T:IBMU2.UODOTNET.UniTerminalServer.WTS_SESSION_INFO">
            <summary>
            Session Info
            </summary>
        </member>
        <member name="T:IBMU2.UODOTNET.UniSelectList">
            <summary>
            <c>UniSelectList</c> is used to control, access, and manipulate server
            side select lists.
            </summary>
            <example> This sample shows how to use <c>UniCommand Object</c>.
            <code>
            [C#]
            using IBMU2.UODOTNET;
            using System.Text;
              class MyAppClass 
              {
                 public static void Main() 
                 {
                    try
                    {
            			UniSession us = UniObjects.OpenSession("localhost","ZZZ","XXX","HS.SALES","uvcs");
            			UniSelectList sl = us1.CreateUniSelectList(2);
            			UniFile fl = us1.CreateUniFile("CUSTOMER");
            			sl.Select(fl);
            			bool lLastRecord = sl.LastRecordRead;
            			while(!lLastRecord)
            			{
            				string s = sl.Next();
            				Console.WriteLine("Record ID:" + s);
            				lLastRecord = sl.LastRecordRead;
            			}
            		}
            		Catch (Exception ex)
            		{
            			//some error, display it 
            			Console.WriteLine(ex.Message);
            		}
            		finally
            		{
            			// no error
            			if(us1 != null)
            			{
            				UniObjects.CloseSession(us1);
            				us1= null;
            			}
            		}
                 }
              }
              [VB.NET]
            Option Explicit On 
            Option Strict On
            ' Add the classes in the following namespaces to our namespace
            Imports System
            Imports System.IO
            Imports System.Text
            Imports System.Collections
            Imports IBMU2.UODOTNET
            Class App
            	Public Shared Function Main(ByVal args() As String) As Integer
            	Dim us1 As UniSession = Nothing
            	Dim cmd As UniCommand = Nothing
            	Try
            		Console.WriteLine("Program started... ")
            		us1 = UniObjects.OpenSession("localhost", "ZZZ", "xxxx", "HS.SALES", "uvcs")
            		Dim sl As UniSelectList = us1.CreateUniSelectList(2)
            		' open customer file
            		fl = us1.CreateUniFile("CUSTOMER")
            		sl.Select(fl)
            		Dim lLastRecord As Boolean = sl.LastRecordRead
            		While Not (lLastRecord)
            			Dim s As String = sl.Next()
            			Console.WriteLine("Record ID:" + s)
            			lLastRecord = sl.LastRecordRead
            		End While
            		' read select list as string array
            		sl.ClearList()
            		sl.Select(fl)
            		Dim str_array() As String = sl.ReadListAsStringArray()
            		Dim uSet As UniDataSet = fl.ReadRecords(str_array)
            		' use for each statement to print the record
            		Dim item As UniRecord
            		For Each item In uSet
            			Console.WriteLine(item.ToString())
            		Next item
            	Catch e As Exception
            		If Not (us1 Is Nothing) Then
            			If (us1.IsActive) Then
            				UniObjects.CloseSession(us1)
            				us1 = Nothing
            			End If
            		End If
            		Console.WriteLine("")
            		Dim s As String
            		s = "Connection Failed : " + e.Message
            		Console.WriteLine(s)
            	Finally
            		If Not (us1 Is Nothing) Then
            			If (us1.IsActive) Then
            				Console.WriteLine("")
            				Dim s As String
            				s = "Connection Passed"
            				Console.WriteLine(s)
            				UniObjects.CloseSession(us1)
            				Console.WriteLine("Program finished... ")
            			End If
            		End If
            	End Try
            	Console.Read()
            	Return 0
            	End Function 'Main
            End Class 'App
            </code>
            </example>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSelectList.#ctor(IBMU2.UODOTNET.UniSession,System.Int32)">
            <summary>
            Initializes a new instance of the UniNLSLocale class.
            </summary>
            <param name="pSession">UniSession Object</param>
            <param name="pSelectListNumber">Select List Number</param>
            <exception cref="T:IBMU2.UODOTNET.UniSelectListException">Thrown when UniSelectList() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSelectList.ClearList">
            <summary>
            Clears the selected list, emptying the contents and preparing for a new select
            list to be generated.
            </summary>
            <exception cref="T:IBMU2.UODOTNET.UniSelectListException">Thrown when ClearList() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSelectList.FormList(System.String)">
            <summary>
            Creates a new select list from the supplied list of record IDs
            seperated by field marks.
            </summary>
            <param name="pRecID">record id list seperated by field marks</param>
            <exception cref="T:IBMU2.UODOTNET.UniSelectListException">Thrown when FormList() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSelectList.FormList(System.String[])">
            <summary>
            Creates a new select list from the supplied list of record IDs in the form of 
            string array
            </summary>
            <param name="pRecIDSet">string array of record ids</param>
            <exception cref="T:IBMU2.UODOTNET.UniSelectListException">Thrown when FormList() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSelectList.GetList(System.String)">
            <summary>
            Activates the named select list from the  SAVEDLISTS file on the server.
            </summary>
            <param name="aListName">String denoting the name of which select list to activate</param>
            <exception cref="T:IBMU2.UODOTNET.UniSelectListException">Thrown when FormList() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSelectList.Next">
            <summary>
            Returns the next record ID in the select list.  If exhausted, it will return a
            <c>null</c> value and the <c>LastRecordRead</c> property will return
            <c>true</c>.
            </summary>
            <returns>the next record ID from the select list, or a <c>null</c> if exhausted</returns>
            <exception cref="T:IBMU2.UODOTNET.UniSelectListException">Thrown when Next() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSelectList.ReadList">
            <summary>
            Reads the entire contents of the select list and returns it all at once.
            </summary>
            <returns>representing the entire select list</returns>
            <exception cref="T:IBMU2.UODOTNET.UniSelectListException">Thrown when ReadList() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSelectList.ReadListAsStringArray">
            <summary>
            Reads the entire contents of the select list and returns it all at once.
            </summary>
            <returns>array of string representing the entire select list</returns>
            <exception cref="T:IBMU2.UODOTNET.UniSelectListException">Thrown when ReadList() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSelectList.SaveList(System.String)">
            <summary>
            Saves the current select list in SAVEDLISTS file on the server with the name
            supplied.
            </summary>
            <param name="aListName">String denoting the name the select list should be saved to</param>
            <exception cref="T:IBMU2.UODOTNET.UniSelectListException">Thrown when ReadList() fails.</exception>
            <exception cref="T:IBMU2.UODOTNET.UniSelectListException">Thrown when SaveList() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSelectList.Select(IBMU2.UODOTNET.UniFile)">
            <summary>
            Creates a new select list by selecting the <c>UniFile</c> object and 
            generating a select list of all the record IDs from that file.  It will overwrite
            any previous select list and the select list pointer will be reset to the first
            record in the list.
            </summary>
            <param name="uniFile"><c>UniFile</c> object to be selected</param>
            <exception cref="T:IBMU2.UODOTNET.UniSelectListException">Thrown when Select() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSelectList.Select(IBMU2.UODOTNET.UniDictionary)">
            <summary>
            Creates a new select list by selecting the <c>UniDictionary</c> object and 
            generating a select list of all the record IDs from that file.  It will overwrite
            any previous select list and the select list pointer will be reset to the first
            record in the list.
            </summary>
            <param name="uniFile"><c>UniDictionary</c> object to be selected</param>
            <exception cref="T:IBMU2.UODOTNET.UniSelectListException">Thrown when Select() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSelectList.SelectAlternateKey(IBMU2.UODOTNET.UniFile,System.String)">
            <summary>
            Generate a select list from the given <c>UniFile</c> from values in the 
            secondary key index that is specified.
            </summary>
            <param name="uniFile"><c>UniFile</c> to be selected</param>
            <param name="aIndexName">Index name to select on</param>
            <exception cref="T:IBMU2.UODOTNET.UniSelectListException">Thrown when SelectMatchingAK() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSelectList.SelectAlternateKey(IBMU2.UODOTNET.UniDictionary,System.String)">
            <summary>
            Generate a select list from the given <c>UniDictionary</c> from values in the 
            secondary key index that is specified.
            </summary>
            <param name="unid"><c>UniDictionary</c> to be selected</param>
            <param name="aIndexName">Index name to select on</param>
            <exception cref="T:IBMU2.UODOTNET.UniSelectListException">Thrown when SelectMatchingAK() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSelectList.SelectMatchingAK(IBMU2.UODOTNET.UniFile,System.String,System.String)">
            <summary>
            Overloaded. Generate a select list from the given <c>UniFile</c> from values in the 
            secondary key index that is specified whose value matches that in the named 
            value.
            </summary>
            <param name="uniFile">Universe or UniData File Name</param>
            <param name="aIndexName">Index name to select on</param>
            <param name="aIndexValue">value within the index to select to</param>
            <exception cref="T:IBMU2.UODOTNET.UniSelectListException">Thrown when SelectMatchingAK() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSelectList.SelectMatchingAK(IBMU2.UODOTNET.UniDictionary,System.String,System.String)">
            <summary>
            Overloaded. Generate a select list from the given <c>UniFile</c> from values in the 
            secondary key index that is specified whose value matches that in the named 
            value.
            </summary>
            <param name="unid">Universe or UniData Dictionary File Name</param>
            <param name="aIndexName">Index name to select on</param>
            <param name="aIndexValue">value within the index to select to</param>
            <exception cref="T:IBMU2.UODOTNET.UniSelectListException">Thrown when SelectMatchingAK() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSelectList.DoAKSelect(IBMU2.UODOTNET.UniFile,System.String,System.Int32,System.String)">
            <summary>
            generate a select list from the given <c>UniFile</c> from values in the 
            secondary key index that is specified.
            </summary>
            <param name="uniFile">Universe or UniData File Name</param>
            <param name="aIndexName">Index name to select on</param>
            <param name="aIndexLen">Index Length</param>
            <param name="aIndexValue">value within the index to select to</param>
            <exception cref="T:IBMU2.UODOTNET.UniSelectListException">Thrown when DoAKSelect() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSelectList.CheckEntryConditions">
            <summary>
            This routine will check whether or not we are in a state that we can perform any object operation,
            especially server communications.  It checks to see if a command is currently in the active state
            and it checks to ensure that the internal RPC packets are initialized.   If an error occurs,
            it passes it back up.
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSelectList.m_UniSelectListNumber">
            <summary>
            Store for UniSelect List Number
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSelectList.m_UniReturnCode">
            <summary>
            Store for Return Code
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSelectList.m_NumberOfSelectListItems">
            <summary>
            Store for number of Select List Items
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSelectList.m_LastRecordRead">
            <summary>
            Store for Last Record Reached Flag
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSelectList.m_Session">
            <summary>
            Store for instance of UniSession Object
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSelectList.m_UniSelStatus">
            <summary>
            Store for UniSelect List Status
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSelectList.m_FileEncryptionType">
            <summary>
            Store for File Encryption Type
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSelectList.LastRecordRead">
            <summary>
            Gets the status of Last Record Reached.
            </summary>
            <value>LastRecordRead accesses the value of the m_LastRecordRead data member</value>
        </member>
        <member name="T:IBMU2.UODOTNET.UniPool">
            <summary>
            This is a UniPool Class. It does all Connection Pooling Operations for the given pool identified 
            by "hostname+user+password+account" key in the hash table
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniPool.#ctor(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            UniPool Constructor
            </summary>
            <param name="hostname">Host Name</param>
            <param name="userid">User Name</param>
            <param name="password">User Password</param>
            <param name="account">Account Name</param>
            <param name="service">Service Type:"uvcs" or "udcs"</param>
            <param name="min_poolsize">min pool size </param>
            <param name="max_poolsize">max pool size</param>
            <param name="port_number">Host Port Number</param>
            <param name="sslmode">true if it is a SSL connection</param>
            <param name="clientcertificate">the client certificate if server needs to authenticate the client</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniPool.FindSession(System.Int32,System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Finds a Session from the pool in pTimeout time period. If there is one in Available list, gets
            from there and puts in Busy List. If it is not there and total is less than max pool size
            then it makes new one. If it is greater than max pool size than it waits till it gets notifica
            -tion from other Thread.
            </summary>
            <param name="pTimeout">time in milliseconds to wait</param>
            <param name="sslmode">true if it is a SSL connection</param>
            <param name="clientcertificate">the client certificate if server needs to authenticate the client</param>
            <returns>UniSession Object</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniPool.Free(IBMU2.UODOTNET.UniSession)">
            <summary>
            Free given UniSession Object. It removes from Busy List and then clone it and then
            makes some reference type null and then it adds into the Available List. Cloning is
            requires because given UniSession Object marked is Disposed so the same Thread cannot
            use it. Later on the original UniSession Object will Garbage Collected or if it remains
            in the free pool longer than specified time, then Thread Monitor will close it physically
            </summary>
            <param name="us">UniSession Object to be freed</param>
            <exception cref="T:System.Exception">Thrown when AdjustSession() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniPool.CloseIdleConnections">
            <summary>
            Close Idle marked connections
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniPool.CloseServerConnection(IBMU2.UODOTNET.UniSession)">
            <summary>
            Close Server Connection for given UniSession Object
            </summary>
            <param name="us">a UniSession Object to be closed</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniPool.CloseAllConnections">
            <summary>
            Close All Avialable and Busy Connections 
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniPool.AdjustMinPoolSizeConnections(System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            If Total connections falls below min pool size then it creates one UniSession Object.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniPool.TotalConnections">
            <summary>
            Calculated Total number of connections in the given pool
            </summary>
            <returns>total number of connections</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniPool.MakeNewConnection(System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Make New Connection to U2 Database Server
            </summary>
            <returns> a UniSession Object</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniPool.CloseConnections(System.Collections.Generic.LinkedList{IBMU2.UODOTNET.UniSession})">
            <summary>
            Close all connections that are in pUniSessions array list
            </summary>
            <param name="pUniSessions">array of UniSession Objects</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniPool.CloseBusyConnections(System.Collections.ArrayList)">
            <summary>
            Close all busy connections that are in pRPCConnections array list
            </summary>
            <param name="pRPCConnections">array of UniRPCConnection Objects</param>
        </member>
        <member name="F:IBMU2.UODOTNET.UniPool.m_Service">
            <summary>
            Store for Service Type "uvcs" or "udcs"
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniPool.m_Userid">
            <summary>
            Store for User ID
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniPool.m_Password">
            <summary>
            Store for User Password
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniPool.m_Server">
            <summary>
            Store for Server Name
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniPool.m_Account">
            <summary>
            Store for Account Name
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniPool.m_MinPoolSize">
            <summary>
            Store for Min Pool Size
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniPool.m_MaxPoolSize">
            <summary>
            Store for Max Pool Size
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniPool.m_AvailableConnections">
            <summary>
            Store for Available Connections
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniPool.m_BusyConnections">
            <summary>
            Store for Busy Connections
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniPool.User">
            <summary>
            Gets User Name
            </summary>
            <value>User accesses the value of the m_User data member</value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniPool.Password">
            <summary>
            Gets User Password
            </summary>
            <value>Password accesses the value of the m_Password data member</value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniPool.Server">
            <summary>
            Gets Server Name
            </summary>
            <value>Server accesses the value of the m_Server data member</value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniPool.Account">
            <summary>
            Gets Account Name
            </summary>
            <value>Account accesses the value of the m_Account data member</value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniPool.MaxPoolSize">
            <summary>
            Gets Max Pool Size
            </summary>
            <value>MaxPoolSize accesses the value of the m_MaxPoolSize data member</value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniPool.MinPoolSize">
            <summary>
            Gets Min Pool Size
            </summary>
            <value>MinPoolSize accesses the value of the m_MinPoolSize data member</value>
        </member>
        <member name="T:IBMU2.UODOTNET.UniPerfCounter">
            <summary>
            Summary description for UniPerfCounter.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniPerfCounter.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniPerfCounter.m_PooledConnections">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniPerfCounter.m_ConnectionPools">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniPerfCounter.m_FailedConnects">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniPerfCounter.m_AverageWaitTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniPerfCounter.m_AverageWaitTimeBase">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniPerfCounter.m_Counter1">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniPerfCounter.m_Counter2">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniPerfCounter.m_Counter3">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniPerfCounter.m_Counter4">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniPerfCounter.m_Counter5">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniPerfCounter.m_CounterDatas">
            <summary>
            
            </summary>
        </member>
        <member name="T:IBMU2.UODOTNET.UniSequentialFileException">
            <summary>
            UniSequentialFileException extends ApplicationException. UniSequentialFileException is thrown by a user program, 
            not by the common language runtime and it represents errors that occur during application execution.
            When an error occurs during UniSequentialFile execution, it reports this by throwing an exception containing 
            information about the error. Once thrown, an exception is handled by the application or by the default
            exception handler.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSequentialFileException.#ctor">
            <summary>
            Initializes a new instance of the UniSequentialFileException class.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSequentialFileException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the UniSequentialFileException class with a specified error message.
            </summary>
            <param name="message">message description</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSequentialFileException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the UniSequentialFileException class with a specified error message and a 
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">message description</param>
            <param name="inner">inner exception object</param>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSequentialFileException.ErrorCode">
            <summary>
            Gets Error Code
            </summary>
        </member>
        <member name="T:IBMU2.UODOTNET.UniSelectListException">
            <summary>
            UniSelectListException extends ApplicationException. UniSelectListException is thrown by a user program, 
            not by the common language runtime and it represents errors that occur during application execution.
            When an error occurs during UniSelectList execution, it reports this by throwing an exception containing 
            information about the error. Once thrown, an exception is handled by the application or by the default
            exception handler.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSelectListException.#ctor">
            <summary>
            Initializes a new instance of the UniSelectListException class.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSelectListException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the UniSelectListException class with a specified error message.
            </summary>
            <param name="message">message description</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSelectListException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the UniSelectListException class with a specified error message and a 
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">message description</param>
            <param name="inner">inner exception object</param>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSelectListException.ErrorCode">
            <summary>
            Gets Error Code
            </summary>
        </member>
        <member name="T:IBMU2.UODOTNET.UniNLSLocaleException">
            <summary>
            UniNLSLocaleException extends ApplicationException. UniNLSLocaleException is thrown by a user program, 
            not by the common language runtime and it represents errors that occur during application execution.
            When an error occurs during UniNLSLocale execution, it reports this by throwing an exception containing 
            information about the error. Once thrown, an exception is handled by the application or by the default
            exception handler.
            </summary>
            
        </member>
        <member name="M:IBMU2.UODOTNET.UniNLSLocaleException.#ctor">
            <summary>
            Initializes a new instance of the UniNLSLocaleException class.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniNLSLocaleException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the UniNLSLocaleException class with a specified error message.
            </summary>
            <param name="message">message description</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniNLSLocaleException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the UniNLSLocaleException class with a specified error message and a 
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">message description</param>
            <param name="inner">inner exception object</param>
        </member>
        <member name="P:IBMU2.UODOTNET.UniNLSLocaleException.ErrorCode">
            <summary>
            Gets Error Code
            </summary>
        </member>
        <member name="T:IBMU2.UODOTNET.UniRPCSocket">
            <summary>
            This class inherits from System.Net.Sockets.TcpClient
            </summary>
        </member>
        <member name="T:IBMU2.UODOTNET.UniCommand">
             <summary>
            UniCommand is used to control remote command execution.  
            With it users can run UniVerse or UniData commands or stored procedures on the server.  
             </summary>
             <example> This sample shows how to use <c>UniCommand Object</c>.
             <code>
             [C#]
             using IBMU2.UODOTNET;
            	using System.Text;
               class MyAppClass 
               {
                  public static void Main() 
                  {
                     try
                     {
            				UniSession us = UniObjects.OpenSession("localhost","ZZZ","XXX","HS.SALES","uvcs");
            				UniCommand cmd = us1.CreateUniCommand();
            				cmd.Command="LIST VOC SAMPLE 10";
            				cmd.Execute();
            				string response_str = cmd.Response;
            				Console.WriteLine("  Response from UniCommand :"+response_str);
            			}
            			Catch (Exception ex)
            			{
            				//some error, display it 
            				Console.WriteLine(ex.Message);
            			}
            			finally
            			{
            				// no error
            				if(us1 != null)
            				{
            					UniObjects.CloseSession(us1);
            					us1= null;
            				}
            			}
                  }
               }
             [VB.NET]
            	Option Explicit On 
            	Option Strict On
            	' Add the classes in the following namespaces to our namespace
            	Imports System
            	Imports System.IO
            	Imports System.Text
            	Imports System.Collections
            	Imports IBMU2.UODOTNET
            	Class App
            		Public Shared Function Main(ByVal args() As String) As Integer
            		Dim us1 As UniSession = Nothing
            		Dim cmd As UniCommand = Nothing
            		Try
            			Console.WriteLine("Program started... ")
            			us1 = UniObjects.OpenSession("localhost", "ZZZ", "xxxx", "HS.SALES", "uvcs")
            			cmd = us1.CreateUniCommand()
            			cmd.Command = "LIST VOC SAMPLE 10"
            			cmd.Execute()
            			Dim response_str As String
            			response_str = cmd.Response
            			Console.WriteLine("  Response from UniCommand :" + response_str)
            		Catch e As Exception
            			If Not (us1 Is Nothing) Then
            				If (us1.IsActive) Then
            					UniObjects.CloseSession(us1)
            					us1 = Nothing
            				End If
            			End If
            			Console.WriteLine("")
            			Dim s As String
            			s = "Connection Failed : " + e.Message
            			Console.WriteLine(s)
            		Finally
            			If Not (us1 Is Nothing) Then
            				If (us1.IsActive) Then
            					Console.WriteLine("")
            					Dim s As String
            					s = "Connection Passed"
            					Console.WriteLine(s)
            					UniObjects.CloseSession(us1)
            					Console.WriteLine("Program finished... ")
            				End If
            			End If
            		End Try
            		Console.Read()
            		Return 0
            		End Function 'Main
            	End Class 'App
            	</code>
             </example>
        </member>
        <member name="F:IBMU2.UODOTNET.UniCommand.m_SHOULD_THROW">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniCommand.m_NO_THROW">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniCommand.m_CHECK_STATE">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniCommand.m_NO_CHECK">
            <summary>
            
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniCommand.#ctor(IBMU2.UODOTNET.UniSession)">
            <summary>
            Initializes a new instance of the <code>UniCommand</code> class.
            </summary>
            <param name="aSession">UniSession Object</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniCommand.Cancel">
            <summary>
            Cancels all outstanding output from the executing command.  It can only be called when
            the command status, as returned by <c>CommandStatus</c> property is either <c>UVS_REPLY</c> 
            or <c>UVS_MORE</c>.  Upon completion, the command status will be set to 
            <c>UVS_COMPLETE</c>, allowing another command to be executed
            </summary>
            <exception cref="T:IBMU2.UODOTNET.UniCommandException">Thrown when Cancel() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniCommand.Execute">
            <summary>
            Executes the command that was set up using the <c>Command</c> property. The
            results of the execution can be obtained using the <c>Response</c> property. The
            <c>CommandStatus</c> peoperty can be used to get the current state of the 
            command.
            </summary>
            <exception cref="T:IBMU2.UODOTNET.UniCommandException">Thrown when Execute() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniCommand.NextBlock">
            <summary>
            Returns the next block of data from the command response, if the command response
            size was greater than the block size established with <c>CommandBlockSize</c> property
            After each call to <c>NextBlock</c>, the <c>Response</c> property can be
            called to retrieve the new block of data, and the <c>CommandStatus</c>
            property can be called to determine the state of execution.
            </summary>
            <exception cref="T:IBMU2.UODOTNET.UniCommandException">Thrown when NextBlock() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniCommand.Reply(System.String)">
            <summary>
            Replies to a command execution that it currently in the <c>UVS_REPLY</c> state.  Often, 
            a server side command may require user input.  Use this method to send the input requested.
            </summary>
            <param name="aReplyString"> a Reply String</param>
            <exception cref="T:IBMU2.UODOTNET.UniCommandException">Thrown when Reply() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniCommand.DoExecute(System.Int32,System.Int32,System.String)">
            <summary>
            Performs the actual execution of the command requested.  
            Talks to server and gets return information
            </summary>
            <param name="pServerCommand"> a Command Name</param>
            <param name="pInternalReadSize">integer representing how much data should be read in each reply block</param>
            <param name="pInputReply">Input Reply</param>
            <returns>integer representing the return status of the server operation</returns>
            <exception cref="M:IBMU2.UODOTNET.UniCommand.DoExecute(System.Int32,System.Int32,System.String)">Thrown when Reply() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniCommand.DoExecuteContinue(System.Int32)">
            <summary>
            It calls DoExecute() with continue flag
            </summary>
            <param name="pInternalReadSize"> Internal Read Size</param>
            <returns>integer representing the return status of the server operation</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniCommand.DoInputReply(System.Int32,System.String)">
            <summary>
            It calls DoExecute() with Read Size Flag and Input Reply 
            </summary>
            <param name="internalReadSize"> Read Size Flag</param>
            <param name="aInputReply">Input Reply</param>
            <returns>integer representing the return status of the server operation</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniCommand.CheckEntryConditions(System.Boolean,System.Boolean)">
            <summary>
            This routine will check whether or not we are in a state that we can perform any object operation,
            especially server communications.  It checks to see if a command is currently in the active state
            and it checks to ensure that the internal RPC packets are initialized.   If an error occurs,
            it passes it back up
            </summary>
            <param name="checkState">boolean denoting whether or not we should check the command status</param>
            <param name="shouldThrow">boolean denoting whether or not we should throw an exception if one is found</param>
        </member>
        <member name="F:IBMU2.UODOTNET.UniCommand.m_CommandStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniCommand.m_CommandEncryptionType">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniCommand.m_Command">
            <summary>
            Store for Command Name
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniCommand.m_CommandOutput">
            <summary>
            Store for Command Output
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniCommand.m_NextBuffer">
            <summary>
            Store for Next Buffer
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniCommand.m_CommandReturnCode">
            <summary>
            Store for Command Return Code
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniCommand.m_CommandBlockSize">
            <summary>
            Store for Block Size
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniCommand.m_CommandAtSystemReturnCode">
            <summary>
            Store for System Return Code
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniCommand.m_CommandAtSelected">
            <summary>
            Store for Command AtSelected
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniCommand.m_Session">
            <summary>
            Store for instance of UniSession Object
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniCommand.CommandStatus">
            <summary>
            Gets the status of the Command Object Execution. 
            </summary>
            <remarks>Possible values are:
            <list type="bullet">
            <item>
            <description>UVS_COMPLETE (0):  command has finished execution and is awaiting next command.</description>
            </item>
            <item>
            <description>UVS_REPLY (1):		server is waiting for input data.  The reply can be sent 
            								using the <c>Reply</c> method.</description>
            </item>
            <item>
            <description>UVS_REPLY (2):		denotes that there is more data waiting to be retrieved.  Will
            								only occur if the BlockSize is set to a non-zero value from set property
            								<c>CommandBlockSize</c>.  The <c>Response</c> property will return
            								a response block of BlockSize bytes each time it is called until no 
            								more data remains, at which point, the status will be changed 
            								to <c>UVS_COMPLETE</c>.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:IBMU2.UODOTNET.UniCommand.EncryptionType">
            <summary>
            Gets the current EncryptionType value for this object.  It can be set with the 
            <c>EncryptionType</c> property to override the <c>UniSession</c> default EncryptionType.  
            
            Sets up the EncryptionType to be used for client-server communications in this object.
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniCommand.CommandBlockSize">
            <summary>
            Gets the current block size, in bytes, that is in use for server communications.
            By default, a value of 0 is set, which denotes that all data should be returned.
            
             Sets the current block size to the value passed in.
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniCommand.CommandAtSelected">
            <summary>
            Gets the value of the @SELECTED variable from the server when the command
            has successfully completed.
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniCommand.Command">
            <summary>
            Gets or Sets Command Name to be executed on the server.
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniCommand.SystemReturnCode">
            <summary>
            Gets the current value of @SYSTEM.RETURN.CODE from the server.
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniCommand.Response">
            <summary>
            Gets the output from the command <c>Execute()</c> and <c>Reply</c> methods
            </summary>
        </member>
        <member name="T:IBMU2.UODOTNET.UniXMLException">
            <summary>
            Summary description for UniXMLException.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniXMLException.#ctor">
            <summary>
            Initializes a new instance of the UniXMLException class.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniXMLException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the UniXMLException class with a specified error message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniXMLException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the UniXMLException class with a specified error message and a 
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="P:IBMU2.UODOTNET.UniXMLException.ErrorCode">
            <summary>
            Gets Error Code
            </summary>
        </member>
        <member name="T:IBMU2.UODOTNET.UniSession">
            <summary>
            A UniSession object represents a unique session to a U2 Database.
            </summary>
            <example> This sample shows how to use <c>UniCommand</c> Object.
            <code>
            [C#]
            using IBMU2.UODOTNET;
            using System.Text;
              class MyAppClass 
              {
                 public static void Main() 
                 {
                    try
                    {
            			UniSession us = UniObjects.OpenSession("localhost","ZZZ","XXX","HS.SALES","uvcs");
            		}
            		Catch (Exception ex)
            		{
            			//some error, display it 
            			Console.WriteLine(ex.Message);
            		}
            		finally
            		{
            			// no error
            			if(us1 != null)
            			{
            				UniObjects.CloseSession(us1);
            				us1= null;
            			}
            		}
                 }
              }
            [VB.NET]
            Option Explicit On 
            Option Strict On
            ' Add the classes in the following namespaces to our namespace
            Imports System
            Imports System.IO
            Imports System.Text
            Imports System.Collections
            Imports IBMU2.UODOTNET
            Class App
            	Public Shared Function Main(ByVal args() As String) As Integer
            	Dim us1 As UniSession = Nothing
            	Dim cmd As UniCommand = Nothing
            	Try
            		Console.WriteLine("Program started... ")
            		us1 = UniObjects.OpenSession("localhost", "ZZZ", "xxxx", "HS.SALES", "uvcs")
            	Catch e As Exception
            		If Not (us1 Is Nothing) Then
            			If (us1.IsActive) Then
            				UniObjects.CloseSession(us1)
            				us1 = Nothing
            			End If
            		End If
            		Console.WriteLine("")
            		Dim s As String
            		s = "Connection Failed : " + e.ToString()
            		Console.WriteLine(s)
            	Finally
            		If Not (us1 Is Nothing) Then
            			If (us1.IsActive) Then
            				Console.WriteLine("")
            				Dim s As String
            				s = "Connection Passed"
            				Console.WriteLine(s)
            				UniObjects.CloseSession(us1)
            				Console.WriteLine("Program finished... ")
            			End If
            		End If
            	End Try
            	Console.Read()
            	Return 0
            	End Function 'Main
            End Class 'App
            </code>
            </example>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_MAC_ADDRESS">
            <summary>
            Store for Mac Address
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_DEVICE_NAME">
            <summary>
            Store for Device Name
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.CreateUniDataSet">
            <summary>
            Creates and Returns a UniDataSet Object attached with this UniSession Object.
            </summary>
            <returns>UniDataSet object.</returns>
            <exception cref="T:IBMU2.UODOTNET.UniSessionException">Thrown when CreateUniDataSet() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.CreateUniDataSet(System.String[],System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Creates and returns UniDataSet Object.
            </summary>
            <param name="RecId"> string array  of record id</param>
            <param name="RetData">byte array  of record data</param>
            <param name="StatusData">byte array  of status data</param>
            <param name="RetValData">byte array  of return value data</param>
            <returns>a UniDataSet Object</returns>
            <exception cref="T:IBMU2.UODOTNET.UniSessionException">Thrown when CreateUniDataSet() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.CreateUniXML">
            <summary>
            Creates and Returns a UniXML Object attached with this UniSession Object.
            </summary>
            <returns>UniXML object.</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.CreateUniNLSLocale">
            <summary>
            If NLS is enabled on the server machine, this method will return an active UniNLSlocale
            object, which can then be used to manipulate server-side NLS Locale settings.
            </summary>
            <returns>UniNLSlocale object representing the state of the server-side NLS Locale</returns>
            <exception cref="T:IBMU2.UODOTNET.UniSessionException">Thrown when CreateUniNLSLocale() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.CreateUniNLSMap">
            <summary>
            If NLS is enabled on the server machine, this method will return an active UniNLSmap
            object, which can then be used to manipulate server-side NLS Map settings.
            </summary>
            <returns>UniNLSmap object representing the state of the server-side NLS map.</returns>
            <exception cref="T:IBMU2.UODOTNET.UniSessionException">Thrown when CreateUniNLSMap() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.CreateUniFile(System.String)">
            <summary>
            Creates and Returns a UniFile Object.
            </summary>
            <param name="pFileName">pFileName is name of the U2  file to be opened.</param>
            <returns>UniFile object representing the newly opened file</returns>
            <exception cref="T:IBMU2.UODOTNET.UniSessionException">Thrown when CreateUniFile() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.CreateUniDictionary(System.String)">
            <summary>
            Creates and Returns a UniDictionary Object.
            </summary>
            <param name="pFileName">aFileName is name of the U2 dictionary file to be opened.</param>
            <returns>UniDictionary object representing the newly opened dictionary file</returns>
            <exception cref="T:IBMU2.UODOTNET.UniSessionException">Thrown when CreateUniDictionary() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.CreateUniSelectList(System.Int32)">
            <summary>
            Creates and Returns a UniSelectList Object.
            </summary>
            <param name="aSelectListNumber">aSelectListNumber which U2 select list to create</param>
            <returns>UniSelectList Object</returns>
            <exception cref="T:IBMU2.UODOTNET.UniSessionException">Thrown when CreateUniSelectList() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.CreateUniSubroutine(System.String,System.Int32)">
            <summary>
            Creates and Returns a UniSubroutine Object.
            </summary>
            <param name="aSubName">aSubName String representing the name of the subroutine to be executed on the server.</param>
            <param name="aNumArgs">aNumArgs integer representing the number of arguments this subroutine has</param>
            <returns>UniSubroutine object representing the new subroutine</returns>
            <exception cref="T:IBMU2.UODOTNET.UniSessionException">Thrown when CreateUniSubroutine() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.CreateUniTransaction">
            <summary>
            Creates and Returns a UniTransaction Object. It allows transaction control on the session.
            </summary>
            <returns>UniTransaction object allow modification of the sessions transactional behavior</returns>
            <exception cref="T:IBMU2.UODOTNET.UniSessionException">Thrown when CreateUniTransaction() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.CreateUniDynArray(System.String)">
            <summary>
            Creates and Returns a UniDynArray Object with the given string.
            </summary>
            <param name="s">string object representing the data to be converted into a dynamic array</param>
            <returns>UniDynArray Object</returns>
            <exception cref="T:IBMU2.UODOTNET.UniSessionException">Thrown when CreateUniDynArray() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.CreateUniDynArray">
            <summary>
            Creates and Returns an empty UniDynArray Object.
            </summary>
            <returns>UniDynArray Object</returns>
            <exception cref="T:IBMU2.UODOTNET.UniSessionException">Thrown when CreateUniDynArray() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.CreateSequentialFile(System.String,System.String,System.Boolean)">
            <summary>
            Creates and Returns an UniSequentialFile Object.
            </summary>
            <param name="pFileName">name of the sequential file to be opened.  A U2 Type 1 or 19 file</param>
            <param name="pRecordID">refers to a record within the file, optionally created if it does not exist</param>
            <param name="pCreateFlag">boolean denoting whether or not the file should be created if it does not exist.</param>
            <returns>UniSequentialFile object representing the newly opened sequential file</returns>
            <exception cref="T:IBMU2.UODOTNET.UniSessionException">Thrown when CreateSequentialFile() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.CreateUniCommand">
            <summary>
            Creates and Returns UniCommand Object for this session.
            </summary>
            <returns>UniCommand Object </returns>
            <exception cref="T:IBMU2.UODOTNET.UniSessionException">Thrown when CreateUniCommand() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.ReleaseTaskLock(System.Int32)">
            <summary>
            used to release a <c>TaskLock</c> that was set previously using the <c>CreateTaskLock</c>
            method.
            </summary>
            <param name="pLockNum">aLockNum integer representing which of the 64 U2 task locks is to be set.</param>
            <exception cref="T:IBMU2.UODOTNET.UniSessionException">Thrown when ReleaseTaskLock() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.CreateTaskLock(System.Int32)">
            <summary>
            Used to set on of the 64 U2 synchronization locks.
            </summary>
            <param name="aLockNum">integer representing which one of the 64 UniVerse synchronization locks is to be set</param>
            <exception cref="T:IBMU2.UODOTNET.UniSessionException">Thrown when CreateTaskLock() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.GetAtVariable(System.Int32)">
            <summary>
            Returns the current value of the @variable specified by the input parameter.  Valid
            values for the input value are:
            Token (Value)							U2 @Variable
            <list type="bullet">
            <item>
            <description>AT_LOGNAME(1)				@LOGNAME</description>
            </item>
            <item>
            <description>AT_PATH(2)					@PATH</description>
            </item>
            <item>
            <description>AT_USERNO(3)				@USERNO</description>
            </item>
            <item>
            <description>AT_WHO(4)					@WHO</description>
            </item>
            <item>
            <description>AT_TRANSACTION(5)			@TRANSACTION</description>
            </item>
            <item>
            <description>AT_DATA_PENDING(6)			@DATA.PENDING</description>
            </item>
            <item>
            <description>AT_USER_RETURN_CODE(7)		@USER.RETURN.CODE</description>
            </item>
            <item>
            <description>AT_SYSTEM_RETURN_CODE(8)	@SYSTEM.RETURN.CODE</description>
            </item>
            <item>
            <description>AT_NULL_STR(9)				@NULL.STR</description>
            </item>
            <item>
            <description>AT_SCHEMA(10)				@SCHEMA</description>
            </item>
            </list>
            </summary>
            <param name="aTokenVal">integer representing which @variable to return.</param>
            <returns>UniDynArray Object</returns>
            <exception cref="T:IBMU2.UODOTNET.UniSessionException">Thrown when GetAtVariable() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.SetAtVariable(System.Int32,IBMU2.UODOTNET.UniDynArray)">
            <summary>
            sets the given @variable to the value passed in. Only affects UniObjectsTokens.AT_USER_RETURN_CODE
            (value = 7 ).
            </summary>
            <param name="aTokenVal">integer representing which @variable to set</param>
            <param name="aAtVariable">UniDynArray representing the @variables new value</param>
            <exception cref="T:IBMU2.UODOTNET.UniSessionException">Thrown when SetAtVariable() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.Encrypt(System.String)">
            <summary>
            This method is used to encrypt a given string into an internal format that is understood by the 
            server.
            </summary>
            <param name="aString">string to be encrypted</param>
            <returns>an encrypted string</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.UniCodeStringToByteArray(System.String)">
            <summary>
            Converts a UniCodeString to ByteArray as per the desired encoding set in using UOEncoding
            property. <seealso cref="M:IBMU2.UODOTNET.UniSession.ByteArrayToUniCodeString(System.Byte[])"/>
            </summary>
            <param name="pStringVal">string to be converted to byte array</param>
            <returns>An array of type Byte containing the result of the conversion</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when UniCodeStringToByteArray() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.ByteArrayToUniCodeString(System.Byte[])">
            <summary>
            Converts Byte Array to UniCodeString as per the desired encoding set in using UOEncoding
            property.
            </summary>
            <param name="ByteArray">An array of type Byte to be converted</param>
            <returns>UniCodeString(string) Object</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when ByteArrayToUniCodeString() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.GetMarkCharacter(System.Int32)">
            <summary>
            Returns the specified mark byte.  It will return the specified mark byte based on the 
            following list:
            <list type="bullet">
            <item>
            <description>IM - Item Mark</description>
            </item>
            <item>
            <description>FM - Field Mark</description>
            </item>
            <item>
            <description>VM - Value Mark</description>
            </item>
            <item>
            <description>SVM - SubValue Mark</description>
            </item>
            <item>
            <description>TM - Text Mark</description>
            </item>
            <item>
            <description> SQLNULL - SQL Null Mark</description>
            </item>
            </list>
            </summary>
            <param name="aMarkChar">integer representing which byte to obtain</param>
            <returns>byte representing the requested mark character</returns>
            <exception cref="T:IBMU2.UODOTNET.UniSessionException">Thrown when GetMarkCharacter() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.GetDelimitedString(System.String[],System.Int32)">
            <summary>
            Used to create and return delimited string for the passed array of string and delimiter.
            <seealso cref="M:IBMU2.UODOTNET.UniSession.GetDelimitedString(System.String[],System.Int32)"/>
            </summary>
            <param name="pRecordID"> array of string values</param>
            <param name="pDelimeter"> delimiter value</param>
            <returns>a delimited string object </returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.GetDelimitedByteArrayRecordID(System.String[],System.Int32)">
            <summary>
            Used to create and return delimited byte array of record ids for the passed array of strings and delimiter.
            </summary>
            <param name="pRecordID"></param>
            <param name="pDelimeter"></param>
            <returns></returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.GetDelimitedByteArrayRecordID(System.Int32[],System.Int32)">
            <summary>
            Used to create and return delimited byte array of record ids for the passed array of field numbers and delimiter.
            </summary>
            <param name="pFieldNumber"></param>
            <param name="pDelimeter"></param>
            <returns></returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.GetDelimitedString(System.Int32[],System.Int32)">
            <summary>
            Used to create delimited string for the passed array of integer and delimiter.
            </summary>
            <param name="pFieldNumber"> array of integers</param>
            <param name="pDelimeter"> delimiter value</param>
            <returns>a delimited string object</returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.Iconv(System.String,System.String)">
            <summary>
            onverts an input string into a UniVerse internal storage format using the
            conversion format specified.  The <c>status</c> function can be used
            after this method to determine the status of the <c>iconv</c> method.
            </summary>
            <param name="aString">input string that is to be converted</param>
            <param name="aConvCode">conversion code used to convert the string</param>
            <returns>String representing the newly converted string</returns>
            <exception cref="T:IBMU2.UODOTNET.UniSessionException">Thrown when Iconv() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.Oconv(System.String,System.String)">
            <summary>
            converts an output string into a UniVerse output storage format using the
            conversion format specified.  The <c>status</c> function can be used
            after this method to determine the status of the <c>oconv</c> method.
            </summary>
            <param name="aString">input string that is to be converted</param>
            <param name="aConvCode">conversion code used to convert the string</param>
            <returns>String representing the newly converted string</returns>
            <exception cref="T:IBMU2.UODOTNET.UniSessionException">Thrown when Oconv() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.Finalize">
            <summary>
            GC will call
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.#ctor">
            <summary>
             Initializes a new instance of the UniSession class.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.#ctor(IBMU2.UODOTNET.UniSession)">
            <summary>
            Copy UniSession Constructor.
            </summary>
            <param name="aSession"> UniSession Object</param>
            <exception cref="T:IBMU2.UODOTNET.UniSessionException">Thrown when aSession is null.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.Connect(System.String,System.String,System.String,System.String)">
            <summary>
            Opens up the session on the host identified with the passed values of user name, password
            account and server.
            </summary>
            <param name="pHostName"> Host Name</param>
            <param name="pUserID"> User Name</param>
            <param name="pPassword"> User Password</param>
            <param name="pAccount">U2 Account Name</param>
            <exception cref="T:IBMU2.UODOTNET.UniSessionException">Thrown when Connect() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.Connect(System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Opens up the session on the host identified with the passed values of user name, password
            account and server.
            </summary>
            <param name="pHostName"> Host Name</param>
            <param name="pPortNumber">Port Number</param>
            <param name="pUserID"> User Name</param>
            <param name="pPassword"> User Password</param>
            <param name="pAccount"> U2 Account Name</param>
            <exception cref="T:IBMU2.UODOTNET.UniSessionException">Thrown when Connect() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.Connect">
            <summary>
            Opens up the session on the host identified with the passed values of user name, password
            account and server.
            </summary>
            <exception cref="T:IBMU2.UODOTNET.UniSessionException">Thrown when Connect() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.Disconnect">
            <summary>
            Terminates an active connection.
            If the connection has not been established, will just return.
            </summary>
            <exception cref="T:IBMU2.UODOTNET.UniSessionException">Thrown when Disconnect() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.InitCommandObject">
            <summary>
            Initialize Default Values for reference type objects.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.InitDefaultValues">
            <summary>
            Initialize Default Values.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.CheckEntryConditions">
            <summary>
             this method ensures that all entry conditions are met before we process any method that
            communicates to the server.  Currently, the only two conditions for this object are:
            The session must be active
            The command object, if present, cannot be in a wait state (UVS_REPLY or UVS_MORE).
            </summary>
            <exception cref="T:IBMU2.UODOTNET.UniSessionException">Thrown when CheckEntryConditions() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.GetHostInfo">
            <summary>
            Used to get host information from the server.
            </summary>
            <exception cref="T:IBMU2.UODOTNET.UniSessionException">Thrown when GetHostInfo() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.GetValue(System.Int32)">
            <summary>
            Used to get a AT value from the server.
            </summary>
            <param name="pKey">integer representing the key value requested</param>
            <returns>UniDynArray representing the UniVerse session @variable</returns>
            <exception cref="T:IBMU2.UODOTNET.UniSessionException">Thrown when GetValue() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.SetValue(System.Int32,IBMU2.UODOTNET.UniDynArray)">
            <summary>
            Used to set a AT value on the server.
            </summary>
            <param name="pKey">representing the key value requested</param>
            <param name="pNewVal">UniDynArray representing the UniVerse session @variable to be changed</param>
            <exception cref="T:IBMU2.UODOTNET.UniSessionException">Thrown when SetValue() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.Dispose(System.Boolean)">
            <summary>
            Dispose the current object
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.NLSInit">
            <summary>
            Determines U2 Server NLS capability during initialization or connection.
            </summary>
            <exception cref="T:IBMU2.UODOTNET.UniSessionException">Thrown when NLSInit() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.CreateDeepCopy">
            <summary>
            Creates deep copy of UniSession Object.
            </summary>
            <remarks>yet to implement because of it holds reference type object</remarks>
            <returns></returns>
        </member>
        <member name="M:IBMU2.UODOTNET.UniSession.SetServiceType(System.String)">
            <summary>
            This function sets the Service Type - "uvcs"(Universe) or "udcs"(UniData).
            </summary>
            <param name="pServiceType">type of service</param>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_UserID">
            <summary>
            Store for User ID
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_Password">
            <summary>
            Store for Password
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_Account">
            <summary>
            Store for Account Name
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_HostName">
            <summary>
            Store for Server Name
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_IsActive">
            <summary>
            Store for boolean flag that indicates Session is Active or not
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_IsRPCError">
            <summary>
            Store for boolean flag that indicates Session has RPC Error
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_Conn">
            <summary>
            Store for UniRPCConnection object
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_UniMarkCharacters">
            <summary>
            Store for Session Marks
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_LicenseToken">
            <summary>
            Store for U2 License Token
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_UniSubKey">
            <summary>
            Store for U2 Sub Key
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_HostPort">
            <summary>
            Store for Host Port Number
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_TransportType">
            <summary>
            Store for Transport Type
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_CompressionThreshold">
            <summary>
            Store for Compression Threshold
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_Timeout">
            <summary>
            Store for Default Socket Time Out
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_EncryptionType">
            <summary>
            Store for Encryption Type
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_HostType">
            <summary>
            Store for Host Type
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_IsNLSEnabled">
            <summary>
            Store for boolean flag that indicates NLS Map Enabled or not
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_IsNLSLocalesEnabled">
            <summary>
            Store for boolean flag that indicates NLS Locale Enabled or not
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_IsNLSUnidataSession">
            <summary>
            Store for boolean flag that indicates type of Server - Universe or Unidata
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_IsSecure">
            <summary>
            Store for boolean flag that indicates if it uses SSL 
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_ClientCertificate">
            <summary>
            Store for X509Certificate object that holds the client certificate for SSL
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_UniCommand">
            <summary>
            Store for UniCommand Object
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_UniTransaction">
            <summary>
            Store for UniTransaction Object
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_UniNLSLocale">
            <summary>
            Store for UniNLSLocale Object
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_UniNLSMap">
            <summary>
            Store for UniNLSMap Object
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_BlockingStrategy">
            <summary>
            Store for Session Blocking Strategy
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_LockStrategy">
            <summary>
            Store for UniSession Lock Strategy
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_ReleaseStrategy">
            <summary>
            Store for Session Release Strategy
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_UniReturnCode">
            <summary>
            Store for Session Returned Code
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_NumOpenFiles">
            <summary>
            Store for Number of Open Files
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_UniStatus">
            <summary>
            Store for Session Status
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_CreationTime">
            <summary>
            Store for Pool Creation Time
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_FreedTime">
            <summary>
            Store for Pool Free Time ( From Busy to Available)
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_Encoding">
            <summary>
            Store for Encoding Type
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_Service">
            <summary>
            Store for service type. "uvcs" for Universe and "udcs" for Unidata
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_MaxOpenFiles">
            <summary>
            Store for Maximum Open Files
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_IsPooledSession">
            <summary>
            Store for the flag indicating whether or not Pooled Session
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_disposed">
            <summary>
            store for the flag indicating whether or not session disposed.
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_ClientIPAddress">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_UseIPv6">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniSession.m_lastServerError">
            <summary>
            
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.RecordSeparator">
            <summary>
            
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.IsActive">
             <summary>
             Gets the value that determines session is active or not.
             </summary>
            <value>IsActive accesses the value of m_IsActive data member</value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.IsRPCError">
             <summary>
             Gets  or Sets the value that indicates that Session has RPC Error.
             </summary>
            <value>IsRPCError accesses the value of m_IsRPCError data member</value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.UserName">
             <summary>
             Gets the user name to be used for the session connection operation.
             </summary>
            <value>UserName accesses the value of m_UserName data member</value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.Password">
             <summary>
             Gets the password for the specified user.
             </summary>
            <value>Password accesses the value of m_Password data member</value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.Account">
             <summary>
             Gets the name of the current U2 Account.
             </summary>
            <value>Account accesses the value of m_Account data member</value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.HostName">
             <summary>
             Gets the name of the instance of U2 Database Server to which to connect.
             </summary>
            <value>HostName accesses the value of m_HostName data member</value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.CompressionThreshold">
             <summary>
             Gets or Sets Compression Threshold value.
             </summary>
            <value>CompressionThreshold accesses the value of m_CompressionThreshold data member</value>
             <exception cref="T:IBMU2.UODOTNET.UniSessionException">Thrown when setting values are invalid or CompressionEnabled 
             property is fasle.</exception>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.EncryptionType">
             <summary>
             Gets or Sets Encryption Type.
             </summary>
            <value>EncryptionType accesses the value of m_EncryptionType data member</value>
             <exception cref="T:IBMU2.UODOTNET.UniSessionException">Thrown when setting values are invalid or EncryptionEnabled 
             property is fasle.</exception>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.DeviceSubKey">
             <summary>
             Gets the Device Sub Key.
             </summary>
            <value>DeviceSubKey accesses the value of m_DeviceSubKey data member</value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.ClientIPAddress">
            <summary>
            
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.IPAddress">
             <summary>
             Gets an Internet Protocol (IP) address.
             </summary>
            <value>IPAddress accesses the value of System.Net.Dns.GetHostName()</value>
             <exception cref="T:IBMU2.UODOTNET.UniSessionException">Thrown when System.Net.Dns.GetHostName() fails.</exception>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.MacAddress">
             <summary>
             Gets Mac Address.
             </summary>
            <value>MacAddress accesses the value of m_MacAddress data member </value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.DeviceName">
             <summary>
             Gets the Device Name.
             </summary>
            <value>DeviceName accesses the value of System.Net.Dns.GetHostName()</value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.HostPort">
             <summary>
             Gets Host Port Number.
             </summary>
            <value>HostPort accesses the value of the m_HostPort data member</value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.Service">
             <summary>
             Gets the type of Service - "uvcs"(Universe) or "udcs"(Unidata).
             </summary>
            <value>Service accesses the value of the m_Service data member</value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.HostType">
             <summary>
             Gets the type of Host where U2 Database server is running.
             </summary>
            <value>HostType accesses the value of the m_HostType data member</value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.ServerVersion">
             <summary>
             Gets U2 Server Version.
             </summary>
            <value>ServerVersion the value of the UniRPCConnection Version Property</value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.Timeout">
             <summary>
             Gets or sets the length of time before the Session times out.
             </summary>
             <exception cref="T:IBMU2.UODOTNET.UniSessionException">Thrown when setting value is less than 0.</exception>
            <value>Timeout accesses the value of the m_Timeout data member</value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.TransportType">
             <summary>
             Gets or Sets Transport Type.
             </summary>
            <value>TransportType accesses the value of the m_TransportType data member</value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.Status">
            <summary>
            Gets status of UniSession Object Operation like Iconv()
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.CompressionEnabled">
             <summary>
             Gets Compression Flag that determines whether Compression is Enable.
             </summary>
            <value>CompressionEnabled the value of the UniRPCConnection Compression Property</value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.EncryptionEnabled">
             <summary>
             Gets Encryption Flag that determines whether Encryption is Enable.
             </summary>
            <value>EncryptionEnabled accesses the value of the m_EncryptionEnabled data member</value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.NLSEnabled">
             <summary>
             Gets NLS Map Flag that determines whether U2 Database NLS Map is Enable.
             </summary>
            <value>NLSEnabled accesses the value of the m_NLSEnabled data member</value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.NLSLocalesEnabled">
             <summary>
             Gets NLS Locale Flag that determines whether U2 Database NLS Locale is Enable.
             </summary>
            <value>NLSLocalesEnabled accesses the value of the m_NLSLocalesEnabled data member</value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.BlockingStrategy">
             <summary>
             Gets or Sets UniSession Blocking Strategy.
             </summary>
             <exception cref="T:IBMU2.UODOTNET.UniSessionException">Thrown when setting value is less than 1 or greater than 2.</exception>
            <value>BlockingStrategy accesses the value of the m_BlockingStrategy data member</value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.LockStrategy">
             <summary>
             Gets or Sets UniSession Lock Strategy.
             </summary>
             <exception cref="T:IBMU2.UODOTNET.UniSessionException">Thrown when setting value is less than 0 or greater than 2.</exception>
            <value>LockStrategy accesses the value of the m_LockStrategy data member</value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.ReleaseStrategy">
             <summary>
             Gets or Sets UniSession Release Strategy.
             </summary>
             <exception cref="T:IBMU2.UODOTNET.UniSessionException">Thrown when setting value is less than 0 or greater than 8.</exception>
            <value>ReleaseStrategy accesses the value of the m_ReleaseStrategy data member</value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.MaxOpenFiles">
             <summary>
             Gets the value of Maximum Open Files.
             </summary>
            <value>MaxOpenFiles accesses the value of the m_MaxOpenFiles data member</value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.CurrentOpenFiles">
             <summary>
             Gets the value of Current Open Files.
             </summary>
            <value>CurrentOpenFiles accesses the value of the m_NumOpenFiles data member</value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.UOEncoding">
            <summary>
            Gets or Sets Encoding Object.
            </summary>
            <value>UOEncoding accesses the value of the m_UOEncoding data member</value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.UniRPCConnection">
            <summary>
            Gets the UniRPCConnection Object.
            </summary>
            <value>UniRPCConnection accesses the value of the m_UniRPCConnection data member</value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.UniCommand">
            <summary>
            Gets the UniCommand Object.
            </summary>
            <value>UniCommand accesses the value of the m_UniCommand data member</value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.UniTransaction">
            <summary>
            Gets the UniTransaction Object.
            </summary>
            <value>UniTransaction accesses the value of the m_UniTransaction data member</value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.CreationTime">
            <summary>
            Gets or Sets the Creation Time of the Session. This is the time when Session was created first
            and given to Application.
            </summary>
            <value>CreationTime accesses the value of the m_CreationTime data member</value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.FreedTime">
            <summary>
            Gets or Sets the Free Time of the Session. This is the time when Session moved from Busy Pool to
            Available Pool. This is used to determine how long the Session is sitting on Available Pool.
            </summary>
            <value>FreedTime accesses the value of the m_FreedTime data member</value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.IsPooledSession">
            <summary>
            Gets or Set Session Type - Pooled or non Pooled
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.IsSecure">
            <summary>
            Gets or Sets the SSL flag of the Session. 
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.ClientCertificate">
            <summary>
            Gets or Sets the Client Certificate used in building a SSL secure conection. Client Certificate is
            only used when the server requires client authentication.
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.UseIPv6">
            <summary>
            
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniSession.SessionMarkBytes">
            <summary>
             Set/get the marks
             </summary>
        </member>
        <member name="T:IBMU2.UODOTNET.UniRPCTokens">
            <summary> 
            UniProxyTokens is the primary class used for holding UniVerse RPC define tokens.
            </summary>
            <remarks> This is additional information about UniRPCtokens</remarks>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCTokens.UNIRPC_INITIAL_PROXY_CONNECTIONID">
            <summary> 
            Initial connection id that is used when opening a new connection with a proxy server.
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCTokens.UNIRPC_SECURE_SESSION">
            <summary> 
            Secure and nonsecure session tokens @since UniRPC???
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCTokens.UNIRPC_NONSECURE_SESSION">
            <summary> 
            Secure and nonsecure session tokens @since UniRPC???
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCTokens.UNIRPC_TRANSPORT_TCPIP">
            <summary> 
            Default RPC transport type(TCP/IP). TCP/IP is the only transport type we support.
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCTokens.UNIRPC_DEFAULT_PROXY_PORT">
            <summary> 
            Default RPC proxy daemon port. Currently defined as 31448
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCTokens.UNIRPC_DEFAULT_SSL_PROXY_PORT">
            <summary> 
            Default RPC proxy daemon port. Currently defined as 31448
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCTokens.UNIRPC_DEFAULT_PORT">
            <summary> 
            Default RPC proxy daemon port. Currently defined as 31438
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCTokens.UNIRPC_ENCRYPTION_NONE">
            <summary> 
            Encryption type for when no encryption is desired.
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCTokens.UNIRPC_ENCRYPTION_XOR">
            <summary> 
            Encryption type for when XOR encryption is desired.
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCTokens.UNIRPC_PROXY_HEADER_TYPE_SPOOF">
            <summary> 
            Proxy header type that is used when the client wants to tell the proxy 
            server to read a packet even though a packet has not been sent.
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCTokens.UNIRPC_PROXY_HEADER_TYPE_DEFAULT">
            <summary> 
            Proxy header type that is used for all standard packets sent to and from the proxy server.
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCTokens.UNIRPC_BAD_CONNECTION">
            <summary> 
            The current connection is no longer active or alive.
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCTokens.UNIRPC_NO_CONNECTION">
            <summary> 
            The method called can't complete when the connection is in the disconnected state.
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCTokens.UNIRPC_INVALID_ARG_TYPE">
            <summary> 
            An argument of a perticular type was requested but that argument was NOT of the requested type.
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCTokens.UNIRPC_WRONG_VERSION">
            <summary> 
            A connection was attempted with a UniRPC library of a version that this library does not support.
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCTokens.UNIRPC_BAD_PARAMETER">
            <summary> 
            A method in the UniRPC package was given an invalid parameter.
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCTokens.UNIRPC_FAILED">
             <summary> 
            A non specific error occured while executing this method.
             </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCTokens.UNIRPC_ARG_COUNT">
            <summary> 
            The specified argument was used out of order in a write statement or 
            has exceeded the maximum number of arguments allowed.
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCTokens.UNIRPC_UNKNOWN_HOST">
            <summary> 
            The specified host was NOT found.
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCTokens.UNIRPC_BAD_TRANSPORT">
            <summary> 
            This RPC package can't use the specified transport type.
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCTokens.UNIRPC_CONNECTION">
            <summary> 
            The method called can't complete when the connection is in the connected state.
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCTokens.UNIRPC_NO_MULTIPLEX_SUPPORT">
            <summary> 
            The method called dosn't or can't support use with or as a multiplexed connection.
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCTokens.UNIRPC_NO_ENCRYPTION_SUPPORT">
            <summary> 
            The method called dosn't or can't support encryption.
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCTokens.UNIRPC_NO_COMPRESSION_SUPPORT">
            <summary> 
            The method called dosn't or can't support compression.
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCTokens.UNIRPC_FAILED_PROXY_LOGIN">
            <summary> 
            The proxy server login procedure failed.
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCTokens.UNIRPC_FAILED_PROXY_LOGIN_AUTH">
            <summary> 
            The proxy server login procedure failed with bad authorization.
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCTokens.UNIRPC_FAILED_PROXY_LOGIN_MAX_SESSIONS">
            <summary> 
            The proxy server login procedure failed with exceeded max sessions.
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCTokens.UNIRPC_FAILED_PROXY_LOGIN_MAX_SESSION_CONNECTIONS">
            <summary> 
            The proxy server login procedure failed with exceeded max session connections.
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniRPCTokens.UNIRPC_NOT_PROXY_CONNECTION">
            <summary> 
            The proxy server login procedure failed with exceeded max session connections.
            </summary>
        </member>
        <member name="T:IBMU2.UODOTNET.UniObjects">
            <summary>
            Represents an open connection to a U2 database. This class cannot be inherited.
            </summary>
            <example> This sample shows how to call OpenSession() method.
            <code>
            [C#]
            using IBMU2.UODOTNET;
            using System.Text;
              class MyAppClass 
              {
                 public static void Main() 
                 {
                    try
                    {
            			UniSession us = UniObjects.OpenSession("localhost","ZZZ","XXX","HS.SALES","uvcs");
            		}
            		Catch (Exception ex)
            		{
            			// some error, display it 
            			MessageBox.Show(ex.Message);
            			
            		}
            		finally
            		{
            			// no error
            			if(us1 != null)
            			{
            				UniObjects.CloseSession(us1);
            				us1= null;
            			}
            		}
                 }
              }
              [VB.NET]
            Option Explicit On 
            Option Strict On
            ' Add the classes in the following namespaces to our namespace
            Imports System
            Imports System.IO
            Imports System.Text
            Imports System.Collections
            Imports IBMU2.UODOTNET
            Class App
            	Public Shared Function Main(ByVal args() As String) As Integer
            	Dim us1 As UniSession = Nothing
            	Try
            		Console.WriteLine("Program started... ")
            		us1 = UniObjects.OpenSession("localhost", "ZZZ", "xxxx", "HS.SALES", "uvcs")
            	Catch e As Exception
            		If Not (us1 Is Nothing) Then
            			If (us1.IsActive) Then
            			UniObjects.CloseSession(us1)
            			us1 = Nothing
            			End If
            		End If
            		Console.WriteLine("")
            		Dim s As String
            		s = "Connection Failed : " + e.Message
            		Console.WriteLine(s)
            	Finally
            		If Not (us1 Is Nothing) Then
            			If (us1.IsActive) Then
            				Console.WriteLine("")
            				Dim s As String
            				s = "Connection Passed"
            				Console.WriteLine(s)
            				UniObjects.CloseSession(us1)
            				Console.WriteLine("Program finished... ")
            			End If
            		End If
            	End Try
            	Console.Read()
            	Return 0
            	End Function 'Main
            End Class 'App
            </code>
            </example>
        </member>
        <member name="M:IBMU2.UODOTNET.UniObjects.OpenSession(System.String,System.String,System.String,System.String)">
            <summary>
            Returns a new instance of the UniSession class.
            </summary>
            <param name="hostname">The name or network address of the instance of U2 Database to which to connect.</param>
            <param name="userid">U2 Database login name</param>
            <param name="password">U2 Database login password</param>
            <param name="account">The name of the U2 Database Account</param>
            <returns>A UniSession Object</returns>
            <exception cref="T:System.Exception">Thrown when OpenSession() fails.</exception>
            <remarks>
            This method uses database service "defcs". "defcs" is created in "unirpcservices" file on the server by server installation.
            </remarks>		
            <example> This sample shows how to call OpenSession() method.
            <code>
              class MyAppClass 
              {
                 public static void Main() 
                 {
                    try
                    {
            			UniSession us = UniObjects.OpenSession("localhost","ZZZ","XXX","HS.SALES");
            		}
            		Catch (Exception ex)
            		{
            			// some error, display it 
            			MessageBox.Show(ex.Message);
            			
            		}
            		finally
            		{
            			// no error
            			if(us1 != null)
            			{
            				UniObjects.CloseSession(us1);
            				us1= null;
            			}
            		}
                 }
              }
            </code>
            </example>
        </member>
        <member name="M:IBMU2.UODOTNET.UniObjects.OpenSession(System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Returns a new instance of the UniSession class.
            </summary>
            <param name="hostname">The name or network address of the instance of U2 Database to which to connect.</param>
            <param name="port">Host Port Number</param>
            <param name="userid">U2 Database login name</param>
            <param name="password">U2 Database login password</param>
            <param name="account">The name of the U2 Database Account</param>
            <returns>A UniSession Object</returns>
            <exception cref="T:System.Exception">Thrown when OpenSession() fails.</exception>
            <remarks>
            This method uses database service "defcs". "defcs" is created in "unirpcservices" file on the server by server installation.
            </remarks>		
            <example> This sample shows how to call OpenSession() method.
            <code>
              class MyAppClass 
              {
                 public static void Main() 
                 {
                    try
                    {
            			UniSession us = UniObjects.OpenSession("localhost",78965,"ZZZ","XXX","HS.SALES");
            		}
            		Catch (Exception ex)
            		{
            			// some error, display it 
            			MessageBox.Show(ex.Message);
            			
            		}
            		finally
            		{
            			// no error
            			if(us1 != null)
            			{
            				UniObjects.CloseSession(us1);
            				us1= null;
            			}
            		}
                 }
              }
            </code>
            </example>
        </member>
        <member name="M:IBMU2.UODOTNET.UniObjects.OpenSecureSession(System.String,System.String,System.String,System.String,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Returns a new instance of the UniSession class.
            </summary>
            <param name="hostname">The name or network address of the instance of U2 Database to which to connect.</param>
            <param name="userid">U2 Database login name</param>
            <param name="password">U2 Database login password</param>
            <param name="account">The name of the U2 Database Account</param>
            <param name="clientcertificate">the client certificate if server needs to authenticate the client, otherwise, set it to null</param>
            <returns>A UniSession Object</returns>
            <exception cref="T:System.Exception">Thrown when OpenSession() fails.</exception>
            <remarks>
            This method uses database service "defcs". "defcs" is created in "unirpcservices" file on the server by server installation.
            </remarks>		
        </member>
        <member name="M:IBMU2.UODOTNET.UniObjects.OpenSecureSession(System.String,System.Int32,System.String,System.String,System.String,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Returns a new instance of the UniSession class.
            </summary>
            <param name="hostname">The name or network address of the instance of U2 Database to which to connect.</param>
            <param name="port">Host Port Number</param>
            <param name="userid">U2 Database login name</param>
            <param name="password">U2 Database login password</param>
            <param name="account">The name of the U2 Database Account</param>
            <param name="clientcertificate">the client certificate if server needs to authenticate the client, otherwise, set it to null</param>
            <returns>A UniSession Object</returns>
            <exception cref="T:System.Exception">Thrown when OpenSession() fails.</exception>
            <remarks>
            This method uses database service "defcs". "defcs" is created in "unirpcservices" file on the server by server installation.
            </remarks>		
        </member>
        <member name="M:IBMU2.UODOTNET.UniObjects.OpenSession(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Returns a new instance of the UniSession class.
            </summary>
            <param name="hostname">The name or network address of the instance of U2 Database to which to connect.</param>
            <param name="userid">U2 Database login name</param>
            <param name="password">U2 Database login password</param>
            <param name="account">The name of the U2 Database Account</param>
            <param name="service">The name of U2 Database service as defined in "unirpcservices" file. Server installation creates the following entries in "unirpcservices" file:  "defcs" for the default service, "uvcs" for Universe , "udcs" for Unidata</param>
            <returns>A UniSession Object</returns>
            <exception cref="T:System.Exception">Thrown when OpenSession() fails.</exception>
            <example> This sample shows how to call OpenSession() method.
            <code>
              class MyAppClass 
              {
                 public static void Main() 
                 {
                    try
                    {
            			UniSession us = UniObjects.OpenSession("localhost","ZZZ","XXX","HS.SALES","uvcs");
            		}
            		Catch (Exception ex)
            		{
            			// some error, display it 
            			MessageBox.Show(ex.Message);
            			
            		}
            		finally
            		{
            			// no error
            			if(us1 != null)
            			{
            				UniObjects.CloseSession(us1);
            				us1= null;
            			}
            		}
                 }
              }
            </code>
            </example>
        </member>
        <member name="M:IBMU2.UODOTNET.UniObjects.OpenSecureSession(System.String,System.String,System.String,System.String,System.String,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Returns a new instance of the UniSession class.
            </summary>
            <param name="hostname">The name or network address of the instance of U2 Database to which to connect.</param>
            <param name="userid">U2 Database login name</param>
            <param name="password">U2 Database login password</param>
            <param name="account">The name of the U2 Database Account</param>
            <param name="service">The name of U2 Database service as defined in "unirpcservices" file. Server installation creates the following entries in "unirpcservices" file:  "defcs" for the default service, "uvcs" for Universe , "udcs" for Unidata</param>
            <param name="clientcertificate">the client certificate if server needs to authenticate the client, otherwise, set it to null</param>
            <returns>A UniSession Object</returns>
            <exception cref="T:System.Exception">Thrown when OpenSession() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniObjects.OpenSession(System.String,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Returns a new instance of the UniSession class.
            </summary>
            <param name="hostname">The name or network address of the instance of U2 Database to which to connect.</param>
            <param name="port">Host Port Number</param>
            <param name="userid">U2 Database login name</param>
            <param name="password">U2 Database login password</param>
            <param name="account">The name of the U2 Database Account</param>
            <param name="service">The name of U2 Database service as defined in "unirpcservices" file. Server installation creates the following entries in "unirpcservices" file:  "defcs" for the default service, "uvcs" for Universe , "udcs" for Unidata</param>
            <returns>A UniSession Object</returns>
            <exception cref="T:System.Exception">Thrown when OpenSession() fails.</exception>
            <example> This sample shows how to call OpenSession() method.
            <code>
              class MyAppClass 
              {
                 public static void Main() 
                 {
                    try
                    {
            			UniSession us = UniObjects.OpenSession("localhost",34567,"ZZZ","XXX","HS.SALES","uvcs");
            		}
            		Catch (Exception ex)
            		{
            			// some error, display it 
            			MessageBox.Show(ex.Message);
            			
            		}
            		finally
            		{
            			// no error
            			if(us1 != null)
            			{
            				UniObjects.CloseSession(us1);
            				us1= null;
            			}
            		}
                 }
              }
            </code>
            </example>
        </member>
        <member name="M:IBMU2.UODOTNET.UniObjects.OpenSecureSession(System.String,System.Int32,System.String,System.String,System.String,System.String,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Returns a new instance of the UniSession class.
            </summary>
            <param name="hostname">The name or network address of the instance of U2 Database to which to connect.</param>
            <param name="port">Host Port Number</param>
            <param name="userid">U2 Database login name</param>
            <param name="password">U2 Database login password</param>
            <param name="account">The name of the U2 Database Account</param>
            <param name="service">The name of U2 Database service as defined in "unirpcservices" file. Server installation creates the following entries in "unirpcservices" file:  "defcs" for the default service, "uvcs" for Universe , "udcs" for Unidata</param>
            <param name="clientcertificate">the client certificate if server needs to authenticate the client, otherwise, set it to null</param>
            <returns>A UniSession Object</returns>
            <exception cref="T:System.Exception">Thrown when OpenSession() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniObjects.CloseSession(IBMU2.UODOTNET.UniSession)">
            <summary>
            Closes the connection to the U2 database. This is the preferred method of closing any open connection.
            </summary>
            <param name="us">a UniSession Object</param>
            <exception cref="T:System.Exception">Thrown when CloseSession() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniObjects.OpenSession(System.String,System.Int32,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Overloaded. Returns a new instance of the UniSession class.
            </summary>
            <param name="hostname">The name or network address of the instance of U2 Database to which to connect.</param>
            <param name="port_number">Host Port Number</param>
            <param name="userid">U2 Database login name</param>
            <param name="password">U2 Database login password</param>
            <param name="account">The name of the U2 Database Account</param>
            <param name="service">The name of U2 Database service as defined in "unirpcservices" file. Server installation creates the following entries in "unirpcservices" file:  "defcs" for the default service, "uvcs" for Universe , "udcs" for Unidata</param>
            <param name="min_poolsize">The minimum number of connections allowed in the pool. Default is 1</param>
            <param name="max_poolsize">The maximum number of connections allowed in the pool. Default is License Limit</param>
            <param name="sslmode">true if it is a SSL connection</param>
            <param name="clientcertificate">the client certificate if server needs to authenticate the client</param>
            <returns>A UniSession Object</returns>
            <exception cref="T:System.Exception">Thrown when OpenSession() fails.</exception>
            <seealso cref="M:IBMU2.UODOTNET.UniObjects.OpenSession(System.String,System.String,System.String,System.String)"/>
        </member>
        <member name="M:IBMU2.UODOTNET.UniObjects.CloseAllSessions">
            <summary>
            Close all the connections. Use with caution:be sure no connections are in use before
            calling. Note that you are not required to call this when done with a ConnectionPool, since
            connections are guaranteed to be closed when garbage collected. But this method gives more control
            regarding when the connections are closed.
            </summary>
            <remarks>when Connection Pooling is OFF, this method does nothing</remarks>
            <exception cref="T:System.Exception">Thrown when CloseAllSessions() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniObjects.CloseServerConnection(IBMU2.UODOTNET.UniSession)">
            <summary>
            This method will physically disconnect UniSession Object and remove it from busy pool. It is
            not recommended to use this function.
            </summary>
            <param name="us"> a UniSession Object</param>
            <remarks>when Connection Pooling is OFF, this method does samething as CloseSession()/&gt;
            <seealso cref="M:IBMU2.UODOTNET.UniObjects.CloseSession(IBMU2.UODOTNET.UniSession)"/></remarks>
            <exception cref="T:System.Exception">Thrown when CloseServerConnection() fails.</exception>
        </member>
        <member name="M:IBMU2.UODOTNET.UniObjects.PoolingThread">
            <summary>
            UODOTNET Thread Monitor Function
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniObjects.CloseIdleSessions(System.Object)">
            <summary>
            This function will be called periodically and it will close idle connections
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniObjects.Finalize">
            <summary>
            This is a Finalize Method or Destructor. Generally it is called by garbage collector.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniObjects.CheckConfigSetting(System.String,System.String,System.Int32@)">
            <summary>
            Read Config File's UODOTNET Section 
            </summary>
            <param name="key">key to find</param>
            <param name="ConfigName">section name in the config file</param>
            <param name="pValue">if key found, overwite this value</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniObjects.#ctor">
            <summary>
            This is private Singleton UniObjects Constructor. It will follow C# Singleton Design Patterns
            and it will be called only once internally to Initialize data.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniObjects.InitDefaultValues">
            <summary>
            Initialize data
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniObjects.ConnectStringCPOFF(System.String,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="hostname"></param>
            <param name="port"></param>
            <param name="userid"></param>
            <param name="password"></param>
            <param name="account"></param>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjects.m_SocketTimeout">
            <summary>
            Store for the Socket Time Out
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjects.m_SslIgnoreCertificateNameMismatch">
            <summary>
            SSL authentication related flags
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjects.m_UniTrace">
            <summary>
            Store for instance of UniTrace Class
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjects.m_RM">
            <summary>
            Store for instance of Resource Manager
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjects.m_UOPooling">
            <summary>
            Store  for the Connection Pooling Property
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniObjects.InitPerformanceCounter">
            <summary>
            Initialize data related with Performance Counter
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniObjects.ConnectStringCPON(System.String,System.Int32,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="hostname"></param>
            <param name="port"></param>
            <param name="userid"></param>
            <param name="password"></param>
            <param name="account"></param>
            <param name="service"></param>
            <param name="min_poolsize"></param>
            <param name="max_poolsize"></param>
            <returns></returns>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjects.m_PoolList">
            <summary>
            Store for the session list
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjects.m_MinPoolSize">
            <summary>
            Store for the default UO.NET Minimum Pool size
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjects.m_MaxPoolSize">
            <summary>
            Store for the default UO.NET Maximum Pool size
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjects.m_PollingThread">
            <summary>
            Store for the Thread Monitor
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjects.m_UniPerfCounter">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjects.m_PoolingOpenSessionTimeout">
            <summary>
            Store for the Timeout value when waiting for a Pooled session
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjects.m_IdleRemoveThreshold">
            <summary>
            Store for the Idle Remove Threshold Time Out
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjects.m_IdleRemoveExecInterval">
            <summary>
            Store for the Idle Remove Thread Execution Interval
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjects.m_Timer">
            <summary>
            Store for instance of a timer for idle remove thread
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjects.m_EnableServerAlive">
            <summary>
            /
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjects.m_UseIPv6">
            <summary>
            
            </summary>
        </member>
        <member name="F:IBMU2.UODOTNET.UniObjects.m_Instance">
            <summary>
            Store for instance of a private constructor of Singleton Class
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniObjects.UOPooling">
            <summary>
            Gets or Sets the Connection Pooling Flag.
            </summary>
            <value>true, if the Connection Pooling is set; otherwise, false. The default value is false</value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniObjects.EnableServerAlive">
            <summary>
            Enable ServerAlive check before a connection is given from the pool
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniObjects.MinPoolSize">
            <summary>
            Gets or Sets the default minimum size of connection pools
            </summary>
            <remarks> MinPoolSize can't be less than 1</remarks>
        </member>
        <member name="P:IBMU2.UODOTNET.UniObjects.MaxPoolSize">
            <summary>
            Gets or Sets the default maximum size of connection pools
            </summary>
            <remarks> MaxPoolSize can't be less than MinPoolSize</remarks>
        </member>
        <member name="P:IBMU2.UODOTNET.UniObjects.U2SslProtocols">
            <summary>
            
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniObjects.PoolingOpenSessionTimeOut">
            <summary>
            Gets or Sets the timeout value of waiting for pooled session
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniObjects.IdleRemoveThreshold">
            <summary>
            Gets or Sets the Idle Remove Threshold Time Out.
            </summary>
            <value>The number of milliseconds session can stay in pool as idle.
            The default value is 300000 milliseconds(5 minutes).</value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniObjects.IdleRemoveExecInterval">
            <summary>
            Gets or Sets the Idle Remove Execution Interval Time.
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniObjects.SslIgnoreCertificateNameMismatch">
            <summary>
            Gets or Sets the flag on whether to ignore name mismatch error
            on the server certificate during authentication. Name mismatch error occurs
            when the name specified in the certificate is different from the name of the server
            machine which provides the certificate.
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniObjects.SslCheckCertificateRevocation">
            <summary>
            Gets or Sets the flag on whether the certificate revocation list is checked during authentication
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniObjects.SslIgnoreIncompleteCertificateChain">
            <summary>
            Gets or Sets the flag on whether incomplete certificate chain error is ignored during authentication
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniObjects.PerformanceCounter">
            <summary>
            
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniObjects.UniResourceManager">
            <summary>
            
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniObjects.Trace">
            <summary>
            
            </summary>
        </member>
        <member name="P:IBMU2.UODOTNET.UniObjects.TimeOut">
            <summary>
            Gets or Sets the Socket Time Out.
            </summary>
            <value>The number of milliseconds to wait before session returns.
            The default value is 30000 milliseconds(0.5 minutes). </value>
        </member>
        <member name="P:IBMU2.UODOTNET.UniObjects.UseIPv6">
            <summary>
            
            </summary>
        </member>
        <member name="T:IBMU2.UODOTNET.UniCommandException">
            <summary>
            UniCommandException extends ApplicationException. UniCommandException is thrown by a user program, 
            not by the common language runtime and it represents errors that occur during application execution.
            When an error occurs during UniCommand execution, it reports this by throwing an exception containing 
            information about the error. Once thrown, an exception is handled by the application or by the default
            exception handler.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniCommandException.#ctor">
            <summary>
            Initializes a new instance of the UniCommandException class.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniCommandException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the UniCommandException class with a specified error message.
            </summary>
            <param name="message">message description</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniCommandException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the UniCommandException class with a specified error message and a 
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">message description</param>
            <param name="inner">inner exception object</param>
        </member>
        <member name="P:IBMU2.UODOTNET.UniCommandException.ErrorCode">
            <summary>
            Gets Error Code
            </summary>
        </member>
        <member name="T:IBMU2.UODOTNET.UniRPCPacketException">
            <summary>
            UniRPCPacketException extends ApplicationException. UniRPCPacketException is thrown by a user program, 
            not by the common language runtime and it represents errors that occur during application execution.
            When an error occurs during UniRPCPacket execution, it reports this by throwing an exception containing 
            information about the error. Once thrown, an exception is handled by the application or by the default
            exception handler.
            </summary>
            
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPacketException.#ctor">
            <summary>
            Initializes a new instance of the UniRPCPacketException class.
            </summary>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPacketException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the UniRPCPacketException class with a specified error message.
            </summary>
            <param name="message">message description</param>
        </member>
        <member name="M:IBMU2.UODOTNET.UniRPCPacketException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the UniRPCPacketException class with a specified error message and a 
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">message description</param>
            <param name="inner">inner exception object</param>
        </member>
    </members>
</doc>
